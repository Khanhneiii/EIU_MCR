
EIU MCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  000030ba  0000314e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d9  00800288  00800288  000031d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050ed  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001991  00000000  00000000  000086e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003097  00000000  00000000  0000a076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  0000d110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f1f  00000000  00000000  0000d91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002905  00000000  00000000  0000e83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c2       	rjmp	.+1264   	; 0x4f2 <__ctors_end>
       2:	00 00       	nop
       4:	97 c2       	rjmp	.+1326   	; 0x534 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c2       	rjmp	.+1322   	; 0x534 <__bad_interrupt>
       a:	00 00       	nop
       c:	0f c4       	rjmp	.+2078   	; 0x82c <__vector_3>
       e:	00 00       	nop
      10:	24 c4       	rjmp	.+2120   	; 0x85a <__vector_4>
      12:	00 00       	nop
      14:	8f c2       	rjmp	.+1310   	; 0x534 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c2       	rjmp	.+1306   	; 0x534 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c2       	rjmp	.+1302   	; 0x534 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c2       	rjmp	.+1298   	; 0x534 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c2       	rjmp	.+1294   	; 0x534 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c2       	rjmp	.+1290   	; 0x534 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c2       	rjmp	.+1286   	; 0x534 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c2       	rjmp	.+1282   	; 0x534 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c2       	rjmp	.+1278   	; 0x534 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c2       	rjmp	.+1274   	; 0x534 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c2       	rjmp	.+1270   	; 0x534 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c2       	rjmp	.+1266   	; 0x534 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c2       	rjmp	.+1262   	; 0x534 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c2       	rjmp	.+1258   	; 0x534 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c2       	rjmp	.+1254   	; 0x534 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c2       	rjmp	.+1250   	; 0x534 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c2       	rjmp	.+1246   	; 0x534 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c2       	rjmp	.+1242   	; 0x534 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__vector_23>
      60:	69 c2       	rjmp	.+1234   	; 0x534 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c2       	rjmp	.+1230   	; 0x534 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c2       	rjmp	.+1226   	; 0x534 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c2       	rjmp	.+1222   	; 0x534 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c2       	rjmp	.+1218   	; 0x534 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c2       	rjmp	.+1214   	; 0x534 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c2       	rjmp	.+1210   	; 0x534 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c2       	rjmp	.+1206   	; 0x534 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c2       	rjmp	.+1202   	; 0x534 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c2       	rjmp	.+1198   	; 0x534 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c2       	rjmp	.+1194   	; 0x534 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c2       	rjmp	.+1190   	; 0x534 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c2       	rjmp	.+1186   	; 0x534 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c2       	rjmp	.+1182   	; 0x534 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c2       	rjmp	.+1178   	; 0x534 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c2       	rjmp	.+1174   	; 0x534 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c2       	rjmp	.+1170   	; 0x534 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c2       	rjmp	.+1166   	; 0x534 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c2       	rjmp	.+1162   	; 0x534 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c2       	rjmp	.+1158   	; 0x534 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c2       	rjmp	.+1154   	; 0x534 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c2       	rjmp	.+1150   	; 0x534 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c2       	rjmp	.+1146   	; 0x534 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c2       	rjmp	.+1142   	; 0x534 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c2       	rjmp	.+1138   	; 0x534 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c2       	rjmp	.+1134   	; 0x534 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c2       	rjmp	.+1130   	; 0x534 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c2       	rjmp	.+1126   	; 0x534 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c2       	rjmp	.+1122   	; 0x534 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c2       	rjmp	.+1118   	; 0x534 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c2       	rjmp	.+1114   	; 0x534 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c2       	rjmp	.+1110   	; 0x534 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c2       	rjmp	.+1106   	; 0x534 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8b 07       	cpc	r24, r27
      e6:	c8 07       	cpc	r28, r24
      e8:	03 08       	sbc	r0, r3
      ea:	40 08       	sbc	r4, r0
      ec:	81 08       	sbc	r8, r1
      ee:	be 08       	sbc	r11, r14
      f0:	fb 08       	sbc	r15, r11
      f2:	38 09       	sbc	r19, r8
      f4:	77 09       	sbc	r23, r7
      f6:	7f 0c       	add	r7, r15
      f8:	63 0c       	add	r6, r3
      fa:	1b 0c       	add	r1, r11
      fc:	47 0c       	add	r4, r7
      fe:	c3 0b       	sbc	r28, r19
     100:	9b 0d       	add	r25, r11
     102:	ef 0b       	sbc	r30, r31
     104:	1b 0c       	add	r1, r11
     106:	8c 0b       	sbc	r24, r28
     108:	9b 0d       	add	r25, r11
     10a:	9b 0d       	add	r25, r11
     10c:	9b 0d       	add	r25, r11
     10e:	a7 0b       	sbc	r26, r23
     110:	9b 0d       	add	r25, r11
     112:	c3 0b       	sbc	r28, r19
     114:	a3 0d       	add	r26, r3
     116:	92 0c       	add	r9, r2
     118:	9b 0d       	add	r25, r11
     11a:	9b 0d       	add	r25, r11
     11c:	9b 0d       	add	r25, r11
     11e:	9b 0d       	add	r25, r11
     120:	9b 0d       	add	r25, r11
     122:	9b 0d       	add	r25, r11
     124:	9b 0d       	add	r25, r11
     126:	7b 0b       	sbc	r23, r27
     128:	9b 0d       	add	r25, r11
     12a:	9b 0d       	add	r25, r11
     12c:	9b 0d       	add	r25, r11
     12e:	8c 0b       	sbc	r24, r28
     130:	9b 0d       	add	r25, r11
     132:	a7 0b       	sbc	r26, r23
     134:	9b 0d       	add	r25, r11
     136:	d0 0c       	add	r13, r0
     138:	9b 0d       	add	r25, r11
     13a:	9b 0d       	add	r25, r11
     13c:	9b 0d       	add	r25, r11
     13e:	9b 0d       	add	r25, r11
     140:	9b 0d       	add	r25, r11
     142:	9b 0d       	add	r25, r11
     144:	9b 0d       	add	r25, r11
     146:	9b 0d       	add	r25, r11
     148:	9b 0d       	add	r25, r11
     14a:	9b 0d       	add	r25, r11
     14c:	9b 0d       	add	r25, r11
     14e:	9b 0d       	add	r25, r11
     150:	9b 0d       	add	r25, r11
     152:	9b 0d       	add	r25, r11
     154:	9b 0d       	add	r25, r11
     156:	b1 0c       	add	r11, r1
     158:	9b 0d       	add	r25, r11
     15a:	9b 0d       	add	r25, r11
     15c:	9b 0d       	add	r25, r11
     15e:	9b 0d       	add	r25, r11
     160:	9b 0d       	add	r25, r11
     162:	9b 0d       	add	r25, r11
     164:	9b 0d       	add	r25, r11
     166:	92 0c       	add	r9, r2
     168:	9b 0d       	add	r25, r11
     16a:	9b 0d       	add	r25, r11
     16c:	9b 0d       	add	r25, r11
     16e:	7b 0b       	sbc	r23, r27
     170:	9b 0d       	add	r25, r11
     172:	9b 0d       	add	r25, r11
     174:	9b 0d       	add	r25, r11
     176:	2e 0d       	add	r18, r14
     178:	9b 0d       	add	r25, r11
     17a:	9b 0d       	add	r25, r11
     17c:	9b 0d       	add	r25, r11
     17e:	9b 0d       	add	r25, r11
     180:	9b 0d       	add	r25, r11
     182:	9b 0d       	add	r25, r11
     184:	9b 0d       	add	r25, r11
     186:	9b 0d       	add	r25, r11
     188:	9b 0d       	add	r25, r11
     18a:	9b 0d       	add	r25, r11
     18c:	9b 0d       	add	r25, r11
     18e:	9b 0d       	add	r25, r11
     190:	9b 0d       	add	r25, r11
     192:	9b 0d       	add	r25, r11
     194:	9b 0d       	add	r25, r11
     196:	9b 0d       	add	r25, r11
     198:	9b 0d       	add	r25, r11
     19a:	9b 0d       	add	r25, r11
     19c:	9b 0d       	add	r25, r11
     19e:	9b 0d       	add	r25, r11
     1a0:	9b 0d       	add	r25, r11
     1a2:	9b 0d       	add	r25, r11
     1a4:	9b 0d       	add	r25, r11
     1a6:	9b 0d       	add	r25, r11
     1a8:	9b 0d       	add	r25, r11
     1aa:	9b 0d       	add	r25, r11
     1ac:	9b 0d       	add	r25, r11
     1ae:	9b 0d       	add	r25, r11
     1b0:	9b 0d       	add	r25, r11
     1b2:	9b 0d       	add	r25, r11
     1b4:	9b 0d       	add	r25, r11
     1b6:	ff 0c       	add	r15, r15
     1b8:	9b 0d       	add	r25, r11
     1ba:	9b 0d       	add	r25, r11
     1bc:	9b 0d       	add	r25, r11
     1be:	9b 0d       	add	r25, r11
     1c0:	9b 0d       	add	r25, r11
     1c2:	9b 0d       	add	r25, r11
     1c4:	9b 0d       	add	r25, r11
     1c6:	9b 0d       	add	r25, r11
     1c8:	9b 0d       	add	r25, r11
     1ca:	9b 0d       	add	r25, r11
     1cc:	9b 0d       	add	r25, r11
     1ce:	9b 0d       	add	r25, r11
     1d0:	9b 0d       	add	r25, r11
     1d2:	9b 0d       	add	r25, r11
     1d4:	9b 0d       	add	r25, r11
     1d6:	d0 0c       	add	r13, r0
     1d8:	9b 0d       	add	r25, r11
     1da:	9b 0d       	add	r25, r11
     1dc:	9b 0d       	add	r25, r11
     1de:	9b 0d       	add	r25, r11
     1e0:	9b 0d       	add	r25, r11
     1e2:	9b 0d       	add	r25, r11
     1e4:	9b 0d       	add	r25, r11
     1e6:	b1 0c       	add	r11, r1
     1e8:	9b 0d       	add	r25, r11
     1ea:	9b 0d       	add	r25, r11
     1ec:	9b 0d       	add	r25, r11
     1ee:	9b 0d       	add	r25, r11
     1f0:	9b 0d       	add	r25, r11
     1f2:	9b 0d       	add	r25, r11
     1f4:	9b 0d       	add	r25, r11
     1f6:	7c 0d       	add	r23, r12
     1f8:	7f 0c       	add	r7, r15
     1fa:	9b 0d       	add	r25, r11
     1fc:	7f 0c       	add	r7, r15
     1fe:	9b 0d       	add	r25, r11
     200:	9b 0d       	add	r25, r11
     202:	9b 0d       	add	r25, r11
     204:	9b 0d       	add	r25, r11
     206:	9b 0d       	add	r25, r11
     208:	9b 0d       	add	r25, r11
     20a:	9b 0d       	add	r25, r11
     20c:	9b 0d       	add	r25, r11
     20e:	9b 0d       	add	r25, r11
     210:	9b 0d       	add	r25, r11
     212:	9b 0d       	add	r25, r11
     214:	9b 0d       	add	r25, r11
     216:	9b 0d       	add	r25, r11
     218:	9b 0d       	add	r25, r11
     21a:	9b 0d       	add	r25, r11
     21c:	9b 0d       	add	r25, r11
     21e:	9b 0d       	add	r25, r11
     220:	9b 0d       	add	r25, r11
     222:	9b 0d       	add	r25, r11
     224:	9b 0d       	add	r25, r11
     226:	9b 0d       	add	r25, r11
     228:	9b 0d       	add	r25, r11
     22a:	9b 0d       	add	r25, r11
     22c:	9b 0d       	add	r25, r11
     22e:	9b 0d       	add	r25, r11
     230:	9b 0d       	add	r25, r11
     232:	9b 0d       	add	r25, r11
     234:	9b 0d       	add	r25, r11
     236:	9b 0d       	add	r25, r11
     238:	9b 0d       	add	r25, r11
     23a:	9b 0d       	add	r25, r11
     23c:	9b 0d       	add	r25, r11
     23e:	9b 0d       	add	r25, r11
     240:	9b 0d       	add	r25, r11
     242:	9b 0d       	add	r25, r11
     244:	9b 0d       	add	r25, r11
     246:	9b 0d       	add	r25, r11
     248:	9b 0d       	add	r25, r11
     24a:	9b 0d       	add	r25, r11
     24c:	9b 0d       	add	r25, r11
     24e:	9b 0d       	add	r25, r11
     250:	9b 0d       	add	r25, r11
     252:	9b 0d       	add	r25, r11
     254:	9b 0d       	add	r25, r11
     256:	9b 0d       	add	r25, r11
     258:	9b 0d       	add	r25, r11
     25a:	9b 0d       	add	r25, r11
     25c:	9b 0d       	add	r25, r11
     25e:	9b 0d       	add	r25, r11
     260:	9b 0d       	add	r25, r11
     262:	9b 0d       	add	r25, r11
     264:	9b 0d       	add	r25, r11
     266:	9b 0d       	add	r25, r11
     268:	9b 0d       	add	r25, r11
     26a:	9b 0d       	add	r25, r11
     26c:	9b 0d       	add	r25, r11
     26e:	9b 0d       	add	r25, r11
     270:	9b 0d       	add	r25, r11
     272:	9b 0d       	add	r25, r11
     274:	9b 0d       	add	r25, r11
     276:	5d 0d       	add	r21, r13
     278:	7f 0c       	add	r7, r15
     27a:	9b 0d       	add	r25, r11
     27c:	9b 0d       	add	r25, r11
     27e:	9b 0d       	add	r25, r11
     280:	9b 0d       	add	r25, r11
     282:	9b 0d       	add	r25, r11
     284:	9b 0d       	add	r25, r11
     286:	9b 0d       	add	r25, r11
     288:	9b 0d       	add	r25, r11
     28a:	9b 0d       	add	r25, r11
     28c:	9b 0d       	add	r25, r11
     28e:	9b 0d       	add	r25, r11
     290:	9b 0d       	add	r25, r11
     292:	9b 0d       	add	r25, r11
     294:	9b 0d       	add	r25, r11
     296:	9b 0d       	add	r25, r11
     298:	9b 0d       	add	r25, r11
     29a:	9b 0d       	add	r25, r11
     29c:	9b 0d       	add	r25, r11
     29e:	9b 0d       	add	r25, r11
     2a0:	9b 0d       	add	r25, r11
     2a2:	9b 0d       	add	r25, r11
     2a4:	9b 0d       	add	r25, r11
     2a6:	9b 0d       	add	r25, r11
     2a8:	9b 0d       	add	r25, r11
     2aa:	9b 0d       	add	r25, r11
     2ac:	9b 0d       	add	r25, r11
     2ae:	9b 0d       	add	r25, r11
     2b0:	9b 0d       	add	r25, r11
     2b2:	9b 0d       	add	r25, r11
     2b4:	9b 0d       	add	r25, r11
     2b6:	2e 0d       	add	r18, r14
     2b8:	9b 0d       	add	r25, r11
     2ba:	9b 0d       	add	r25, r11
     2bc:	9b 0d       	add	r25, r11
     2be:	9b 0d       	add	r25, r11
     2c0:	9b 0d       	add	r25, r11
     2c2:	9b 0d       	add	r25, r11
     2c4:	9b 0d       	add	r25, r11
     2c6:	9b 0d       	add	r25, r11
     2c8:	9b 0d       	add	r25, r11
     2ca:	9b 0d       	add	r25, r11
     2cc:	9b 0d       	add	r25, r11
     2ce:	9b 0d       	add	r25, r11
     2d0:	9b 0d       	add	r25, r11
     2d2:	9b 0d       	add	r25, r11
     2d4:	9b 0d       	add	r25, r11
     2d6:	a3 0d       	add	r26, r3
     2d8:	97 0e       	add	r9, r23
     2da:	7f 0e       	add	r7, r31
     2dc:	3f 0e       	add	r3, r31
     2de:	67 0e       	add	r6, r23
     2e0:	ef 0d       	add	r30, r15
     2e2:	97 0f       	add	r25, r23
     2e4:	17 0e       	add	r1, r23
     2e6:	3f 0e       	add	r3, r31
     2e8:	c0 0d       	add	r28, r0
     2ea:	97 0f       	add	r25, r23
     2ec:	97 0f       	add	r25, r23
     2ee:	97 0f       	add	r25, r23
     2f0:	d7 0d       	add	r29, r7
     2f2:	97 0f       	add	r25, r23
     2f4:	ef 0d       	add	r30, r15
     2f6:	9f 0f       	add	r25, r31
     2f8:	aa 0e       	add	r10, r26
     2fa:	97 0f       	add	r25, r23
     2fc:	97 0f       	add	r25, r23
     2fe:	97 0f       	add	r25, r23
     300:	97 0f       	add	r25, r23
     302:	97 0f       	add	r25, r23
     304:	97 0f       	add	r25, r23
     306:	97 0f       	add	r25, r23
     308:	b3 0d       	add	r27, r3
     30a:	97 0f       	add	r25, r23
     30c:	97 0f       	add	r25, r23
     30e:	97 0f       	add	r25, r23
     310:	c0 0d       	add	r28, r0
     312:	97 0f       	add	r25, r23
     314:	d7 0d       	add	r29, r7
     316:	97 0f       	add	r25, r23
     318:	e0 0e       	add	r14, r16
     31a:	97 0f       	add	r25, r23
     31c:	97 0f       	add	r25, r23
     31e:	97 0f       	add	r25, r23
     320:	97 0f       	add	r25, r23
     322:	97 0f       	add	r25, r23
     324:	97 0f       	add	r25, r23
     326:	97 0f       	add	r25, r23
     328:	97 0f       	add	r25, r23
     32a:	97 0f       	add	r25, r23
     32c:	97 0f       	add	r25, r23
     32e:	97 0f       	add	r25, r23
     330:	97 0f       	add	r25, r23
     332:	97 0f       	add	r25, r23
     334:	97 0f       	add	r25, r23
     336:	97 0f       	add	r25, r23
     338:	c5 0e       	add	r12, r21
     33a:	97 0f       	add	r25, r23
     33c:	97 0f       	add	r25, r23
     33e:	97 0f       	add	r25, r23
     340:	97 0f       	add	r25, r23
     342:	97 0f       	add	r25, r23
     344:	97 0f       	add	r25, r23
     346:	97 0f       	add	r25, r23
     348:	aa 0e       	add	r10, r26
     34a:	97 0f       	add	r25, r23
     34c:	97 0f       	add	r25, r23
     34e:	97 0f       	add	r25, r23
     350:	b3 0d       	add	r27, r3
     352:	97 0f       	add	r25, r23
     354:	97 0f       	add	r25, r23
     356:	97 0f       	add	r25, r23
     358:	36 0f       	add	r19, r22
     35a:	97 0f       	add	r25, r23
     35c:	97 0f       	add	r25, r23
     35e:	97 0f       	add	r25, r23
     360:	97 0f       	add	r25, r23
     362:	97 0f       	add	r25, r23
     364:	97 0f       	add	r25, r23
     366:	97 0f       	add	r25, r23
     368:	97 0f       	add	r25, r23
     36a:	97 0f       	add	r25, r23
     36c:	97 0f       	add	r25, r23
     36e:	97 0f       	add	r25, r23
     370:	97 0f       	add	r25, r23
     372:	97 0f       	add	r25, r23
     374:	97 0f       	add	r25, r23
     376:	97 0f       	add	r25, r23
     378:	97 0f       	add	r25, r23
     37a:	97 0f       	add	r25, r23
     37c:	97 0f       	add	r25, r23
     37e:	97 0f       	add	r25, r23
     380:	97 0f       	add	r25, r23
     382:	97 0f       	add	r25, r23
     384:	97 0f       	add	r25, r23
     386:	97 0f       	add	r25, r23
     388:	97 0f       	add	r25, r23
     38a:	97 0f       	add	r25, r23
     38c:	97 0f       	add	r25, r23
     38e:	97 0f       	add	r25, r23
     390:	97 0f       	add	r25, r23
     392:	97 0f       	add	r25, r23
     394:	97 0f       	add	r25, r23
     396:	97 0f       	add	r25, r23
     398:	0b 0f       	add	r16, r27
     39a:	97 0f       	add	r25, r23
     39c:	97 0f       	add	r25, r23
     39e:	97 0f       	add	r25, r23
     3a0:	97 0f       	add	r25, r23
     3a2:	97 0f       	add	r25, r23
     3a4:	97 0f       	add	r25, r23
     3a6:	97 0f       	add	r25, r23
     3a8:	97 0f       	add	r25, r23
     3aa:	97 0f       	add	r25, r23
     3ac:	97 0f       	add	r25, r23
     3ae:	97 0f       	add	r25, r23
     3b0:	97 0f       	add	r25, r23
     3b2:	97 0f       	add	r25, r23
     3b4:	97 0f       	add	r25, r23
     3b6:	97 0f       	add	r25, r23
     3b8:	e0 0e       	add	r14, r16
     3ba:	97 0f       	add	r25, r23
     3bc:	97 0f       	add	r25, r23
     3be:	97 0f       	add	r25, r23
     3c0:	97 0f       	add	r25, r23
     3c2:	97 0f       	add	r25, r23
     3c4:	97 0f       	add	r25, r23
     3c6:	97 0f       	add	r25, r23
     3c8:	c5 0e       	add	r12, r21
     3ca:	97 0f       	add	r25, r23
     3cc:	97 0f       	add	r25, r23
     3ce:	97 0f       	add	r25, r23
     3d0:	97 0f       	add	r25, r23
     3d2:	97 0f       	add	r25, r23
     3d4:	97 0f       	add	r25, r23
     3d6:	97 0f       	add	r25, r23
     3d8:	7c 0f       	add	r23, r28
     3da:	97 0e       	add	r9, r23
     3dc:	97 0f       	add	r25, r23
     3de:	97 0e       	add	r9, r23
     3e0:	97 0f       	add	r25, r23
     3e2:	97 0f       	add	r25, r23
     3e4:	97 0f       	add	r25, r23
     3e6:	97 0f       	add	r25, r23
     3e8:	97 0f       	add	r25, r23
     3ea:	97 0f       	add	r25, r23
     3ec:	97 0f       	add	r25, r23
     3ee:	97 0f       	add	r25, r23
     3f0:	97 0f       	add	r25, r23
     3f2:	97 0f       	add	r25, r23
     3f4:	97 0f       	add	r25, r23
     3f6:	97 0f       	add	r25, r23
     3f8:	97 0f       	add	r25, r23
     3fa:	97 0f       	add	r25, r23
     3fc:	97 0f       	add	r25, r23
     3fe:	97 0f       	add	r25, r23
     400:	97 0f       	add	r25, r23
     402:	97 0f       	add	r25, r23
     404:	97 0f       	add	r25, r23
     406:	97 0f       	add	r25, r23
     408:	97 0f       	add	r25, r23
     40a:	97 0f       	add	r25, r23
     40c:	97 0f       	add	r25, r23
     40e:	97 0f       	add	r25, r23
     410:	97 0f       	add	r25, r23
     412:	97 0f       	add	r25, r23
     414:	97 0f       	add	r25, r23
     416:	97 0f       	add	r25, r23
     418:	97 0f       	add	r25, r23
     41a:	97 0f       	add	r25, r23
     41c:	97 0f       	add	r25, r23
     41e:	97 0f       	add	r25, r23
     420:	97 0f       	add	r25, r23
     422:	97 0f       	add	r25, r23
     424:	97 0f       	add	r25, r23
     426:	97 0f       	add	r25, r23
     428:	97 0f       	add	r25, r23
     42a:	97 0f       	add	r25, r23
     42c:	97 0f       	add	r25, r23
     42e:	97 0f       	add	r25, r23
     430:	97 0f       	add	r25, r23
     432:	97 0f       	add	r25, r23
     434:	97 0f       	add	r25, r23
     436:	97 0f       	add	r25, r23
     438:	97 0f       	add	r25, r23
     43a:	97 0f       	add	r25, r23
     43c:	97 0f       	add	r25, r23
     43e:	97 0f       	add	r25, r23
     440:	97 0f       	add	r25, r23
     442:	97 0f       	add	r25, r23
     444:	97 0f       	add	r25, r23
     446:	97 0f       	add	r25, r23
     448:	97 0f       	add	r25, r23
     44a:	97 0f       	add	r25, r23
     44c:	97 0f       	add	r25, r23
     44e:	97 0f       	add	r25, r23
     450:	97 0f       	add	r25, r23
     452:	97 0f       	add	r25, r23
     454:	97 0f       	add	r25, r23
     456:	97 0f       	add	r25, r23
     458:	61 0f       	add	r22, r17
     45a:	97 0e       	add	r9, r23
     45c:	97 0f       	add	r25, r23
     45e:	97 0f       	add	r25, r23
     460:	97 0f       	add	r25, r23
     462:	97 0f       	add	r25, r23
     464:	97 0f       	add	r25, r23
     466:	97 0f       	add	r25, r23
     468:	97 0f       	add	r25, r23
     46a:	97 0f       	add	r25, r23
     46c:	97 0f       	add	r25, r23
     46e:	97 0f       	add	r25, r23
     470:	97 0f       	add	r25, r23
     472:	97 0f       	add	r25, r23
     474:	97 0f       	add	r25, r23
     476:	97 0f       	add	r25, r23
     478:	97 0f       	add	r25, r23
     47a:	97 0f       	add	r25, r23
     47c:	97 0f       	add	r25, r23
     47e:	97 0f       	add	r25, r23
     480:	97 0f       	add	r25, r23
     482:	97 0f       	add	r25, r23
     484:	97 0f       	add	r25, r23
     486:	97 0f       	add	r25, r23
     488:	97 0f       	add	r25, r23
     48a:	97 0f       	add	r25, r23
     48c:	97 0f       	add	r25, r23
     48e:	97 0f       	add	r25, r23
     490:	97 0f       	add	r25, r23
     492:	97 0f       	add	r25, r23
     494:	97 0f       	add	r25, r23
     496:	97 0f       	add	r25, r23
     498:	36 0f       	add	r19, r22
     49a:	97 0f       	add	r25, r23
     49c:	97 0f       	add	r25, r23
     49e:	97 0f       	add	r25, r23
     4a0:	97 0f       	add	r25, r23
     4a2:	97 0f       	add	r25, r23
     4a4:	97 0f       	add	r25, r23
     4a6:	97 0f       	add	r25, r23
     4a8:	97 0f       	add	r25, r23
     4aa:	97 0f       	add	r25, r23
     4ac:	97 0f       	add	r25, r23
     4ae:	97 0f       	add	r25, r23
     4b0:	97 0f       	add	r25, r23
     4b2:	97 0f       	add	r25, r23
     4b4:	97 0f       	add	r25, r23
     4b6:	97 0f       	add	r25, r23
     4b8:	9f 0f       	add	r25, r31
     4ba:	f7 0f       	add	r31, r23
     4bc:	3b 11       	cpse	r19, r11
     4be:	3b 11       	cpse	r19, r11
     4c0:	3b 11       	cpse	r19, r11
     4c2:	05 10       	cpse	r0, r5
     4c4:	4f 10       	cpse	r4, r15
     4c6:	3b 11       	cpse	r19, r11
     4c8:	3b 11       	cpse	r19, r11
     4ca:	3b 11       	cpse	r19, r11
     4cc:	3b 11       	cpse	r19, r11
     4ce:	3b 11       	cpse	r19, r11
     4d0:	3b 11       	cpse	r19, r11
     4d2:	89 10       	cpse	r8, r9
     4d4:	3b 11       	cpse	r19, r11
     4d6:	3b 11       	cpse	r19, r11
     4d8:	3b 11       	cpse	r19, r11
     4da:	3b 11       	cpse	r19, r11
     4dc:	3b 11       	cpse	r19, r11
     4de:	3b 11       	cpse	r19, r11
     4e0:	3b 11       	cpse	r19, r11
     4e2:	3b 11       	cpse	r19, r11
     4e4:	3b 11       	cpse	r19, r11
     4e6:	b3 10       	cpse	r11, r3
     4e8:	3b 11       	cpse	r19, r11
     4ea:	3b 11       	cpse	r19, r11
     4ec:	3b 11       	cpse	r19, r11
     4ee:	dd 10       	cpse	r13, r13
     4f0:	fa 10       	cpse	r15, r10

000004f2 <__ctors_end>:
     4f2:	11 24       	eor	r1, r1
     4f4:	1f be       	out	0x3f, r1	; 63
     4f6:	cf ef       	ldi	r28, 0xFF	; 255
     4f8:	d1 e2       	ldi	r29, 0x21	; 33
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	00 e0       	ldi	r16, 0x00	; 0
     500:	0c bf       	out	0x3c, r16	; 60

00000502 <__do_copy_data>:
     502:	12 e0       	ldi	r17, 0x02	; 2
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b2 e0       	ldi	r27, 0x02	; 2
     508:	ea eb       	ldi	r30, 0xBA	; 186
     50a:	f0 e3       	ldi	r31, 0x30	; 48
     50c:	00 e0       	ldi	r16, 0x00	; 0
     50e:	0b bf       	out	0x3b, r16	; 59
     510:	02 c0       	rjmp	.+4      	; 0x516 <__do_copy_data+0x14>
     512:	07 90       	elpm	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	a8 38       	cpi	r26, 0x88	; 136
     518:	b1 07       	cpc	r27, r17
     51a:	d9 f7       	brne	.-10     	; 0x512 <__do_copy_data+0x10>

0000051c <__do_clear_bss>:
     51c:	23 e0       	ldi	r18, 0x03	; 3
     51e:	a8 e8       	ldi	r26, 0x88	; 136
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	01 c0       	rjmp	.+2      	; 0x526 <.do_clear_bss_start>

00000524 <.do_clear_bss_loop>:
     524:	1d 92       	st	X+, r1

00000526 <.do_clear_bss_start>:
     526:	a1 36       	cpi	r26, 0x61	; 97
     528:	b2 07       	cpc	r27, r18
     52a:	e1 f7       	brne	.-8      	; 0x524 <.do_clear_bss_loop>
     52c:	0e 94 30 14 	call	0x2860	; 0x2860 <main>
     530:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <_exit>

00000534 <__bad_interrupt>:
     534:	65 cd       	rjmp	.-1334   	; 0x0 <__vectors>

00000536 <adc_init>:
     536:	80 e4       	ldi	r24, 0x40	; 64
     538:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     53c:	84 e8       	ldi	r24, 0x84	; 132
     53e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     542:	8c e2       	ldi	r24, 0x2C	; 44
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <compareValue+0x1>
     54a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <compareValue>
     54e:	08 95       	ret

00000550 <read_adc>:
     550:	80 64       	ori	r24, 0x40	; 64
     552:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     556:	ea e7       	ldi	r30, 0x7A	; 122
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	80 64       	ori	r24, 0x40	; 64
     55e:	80 83       	st	Z, r24
     560:	80 81       	ld	r24, Z
     562:	84 ff       	sbrs	r24, 4
     564:	fd cf       	rjmp	.-6      	; 0x560 <read_adc+0x10>
     566:	ea e7       	ldi	r30, 0x7A	; 122
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	80 83       	st	Z, r24
     570:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     574:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     578:	08 95       	ret

0000057a <read_bat>:
     57a:	80 e4       	ldi	r24, 0x40	; 64
     57c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     580:	eb e7       	ldi	r30, 0x7B	; 123
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	88 60       	ori	r24, 0x08	; 8
     588:	80 83       	st	Z, r24
     58a:	ea e7       	ldi	r30, 0x7A	; 122
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	80 64       	ori	r24, 0x40	; 64
     592:	80 83       	st	Z, r24
     594:	80 81       	ld	r24, Z
     596:	84 ff       	sbrs	r24, 4
     598:	fd cf       	rjmp	.-6      	; 0x594 <read_bat+0x1a>
     59a:	ea e7       	ldi	r30, 0x7A	; 122
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 61       	ori	r24, 0x10	; 16
     5a2:	80 83       	st	Z, r24
     5a4:	eb e7       	ldi	r30, 0x7B	; 123
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	87 7f       	andi	r24, 0xF7	; 247
     5ac:	80 83       	st	Z, r24
     5ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     5b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     5b6:	08 95       	ret

000005b8 <read_volt>:
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	0c ee       	ldi	r16, 0xEC	; 236
     5c0:	12 e0       	ldi	r17, 0x02	; 2
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	8c 2f       	mov	r24, r28
     5c6:	c4 df       	rcall	.-120    	; 0x550 <read_adc>
     5c8:	f8 01       	movw	r30, r16
     5ca:	92 93       	st	-Z, r25
     5cc:	82 93       	st	-Z, r24
     5ce:	8f 01       	movw	r16, r30
     5d0:	cf 5f       	subi	r28, 0xFF	; 255
     5d2:	c8 30       	cpi	r28, 0x08	; 8
     5d4:	b9 f7       	brne	.-18     	; 0x5c4 <read_volt+0xc>
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <read_sensor>:
     5de:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     5e2:	81 11       	cpse	r24, r1
     5e4:	16 c0       	rjmp	.+44     	; 0x612 <read_sensor+0x34>
     5e6:	e8 df       	rcall	.-48     	; 0x5b8 <read_volt>
     5e8:	ec ed       	ldi	r30, 0xDC	; 220
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	a9 e8       	ldi	r26, 0x89	; 137
     5ee:	b2 e0       	ldi	r27, 0x02	; 2
     5f0:	6c ee       	ldi	r22, 0xEC	; 236
     5f2:	72 e0       	ldi	r23, 0x02	; 2
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	88 0f       	add	r24, r24
     5f8:	41 91       	ld	r20, Z+
     5fa:	51 91       	ld	r21, Z+
     5fc:	2d 91       	ld	r18, X+
     5fe:	3d 91       	ld	r19, X+
     600:	24 17       	cp	r18, r20
     602:	35 07       	cpc	r19, r21
     604:	08 f4       	brcc	.+2      	; 0x608 <read_sensor+0x2a>
     606:	81 60       	ori	r24, 0x01	; 1
     608:	e6 17       	cp	r30, r22
     60a:	f7 07       	cpc	r31, r23
     60c:	a1 f7       	brne	.-24     	; 0x5f6 <read_sensor+0x18>
     60e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <sensor>
     612:	08 95       	ret

00000614 <update_vcompare>:
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	e9 ea       	ldi	r30, 0xA9	; 169
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	c9 eb       	ldi	r28, 0xB9	; 185
     61e:	d2 e0       	ldi	r29, 0x02	; 2
     620:	a9 e8       	ldi	r26, 0x89	; 137
     622:	b2 e0       	ldi	r27, 0x02	; 2
     624:	49 eb       	ldi	r20, 0xB9	; 185
     626:	52 e0       	ldi	r21, 0x02	; 2
     628:	21 91       	ld	r18, Z+
     62a:	31 91       	ld	r19, Z+
     62c:	89 91       	ld	r24, Y+
     62e:	99 91       	ld	r25, Y+
     630:	82 0f       	add	r24, r18
     632:	93 1f       	adc	r25, r19
     634:	96 95       	lsr	r25
     636:	87 95       	ror	r24
     638:	8d 93       	st	X+, r24
     63a:	9d 93       	st	X+, r25
     63c:	e4 17       	cp	r30, r20
     63e:	f5 07       	cpc	r31, r21
     640:	99 f7       	brne	.-26     	; 0x628 <update_vcompare+0x14>
     642:	40 e1       	ldi	r20, 0x10	; 16
     644:	69 e8       	ldi	r22, 0x89	; 137
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	88 e1       	ldi	r24, 0x18	; 24
     64a:	8c d0       	rcall	.+280    	; 0x764 <eeprom_writestr>
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <update_white>:
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec ed       	ldi	r30, 0xDC	; 220
     658:	f2 e0       	ldi	r31, 0x02	; 2
     65a:	a9 eb       	ldi	r26, 0xB9	; 185
     65c:	b2 e0       	ldi	r27, 0x02	; 2
     65e:	2c ee       	ldi	r18, 0xEC	; 236
     660:	32 e0       	ldi	r19, 0x02	; 2
     662:	ed 01       	movw	r28, r26
     664:	81 91       	ld	r24, Z+
     666:	91 91       	ld	r25, Z+
     668:	89 93       	st	Y+, r24
     66a:	99 93       	st	Y+, r25
     66c:	e2 17       	cp	r30, r18
     66e:	f3 07       	cpc	r31, r19
     670:	c9 f7       	brne	.-14     	; 0x664 <update_white+0x12>
     672:	e9 ea       	ldi	r30, 0xA9	; 169
     674:	f2 e0       	ldi	r31, 0x02	; 2
     676:	c9 e8       	ldi	r28, 0x89	; 137
     678:	d2 e0       	ldi	r29, 0x02	; 2
     67a:	49 eb       	ldi	r20, 0xB9	; 185
     67c:	52 e0       	ldi	r21, 0x02	; 2
     67e:	21 91       	ld	r18, Z+
     680:	31 91       	ld	r19, Z+
     682:	8d 91       	ld	r24, X+
     684:	9d 91       	ld	r25, X+
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	89 93       	st	Y+, r24
     690:	99 93       	st	Y+, r25
     692:	e4 17       	cp	r30, r20
     694:	f5 07       	cpc	r31, r21
     696:	99 f7       	brne	.-26     	; 0x67e <update_white+0x2c>
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <update_black>:
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ac ed       	ldi	r26, 0xDC	; 220
     6a4:	b2 e0       	ldi	r27, 0x02	; 2
     6a6:	e9 ea       	ldi	r30, 0xA9	; 169
     6a8:	f2 e0       	ldi	r31, 0x02	; 2
     6aa:	2c ee       	ldi	r18, 0xEC	; 236
     6ac:	32 e0       	ldi	r19, 0x02	; 2
     6ae:	ef 01       	movw	r28, r30
     6b0:	8d 91       	ld	r24, X+
     6b2:	9d 91       	ld	r25, X+
     6b4:	89 93       	st	Y+, r24
     6b6:	99 93       	st	Y+, r25
     6b8:	a2 17       	cp	r26, r18
     6ba:	b3 07       	cpc	r27, r19
     6bc:	c9 f7       	brne	.-14     	; 0x6b0 <update_black+0x12>
     6be:	c9 eb       	ldi	r28, 0xB9	; 185
     6c0:	d2 e0       	ldi	r29, 0x02	; 2
     6c2:	a9 e8       	ldi	r26, 0x89	; 137
     6c4:	b2 e0       	ldi	r27, 0x02	; 2
     6c6:	49 eb       	ldi	r20, 0xB9	; 185
     6c8:	52 e0       	ldi	r21, 0x02	; 2
     6ca:	21 91       	ld	r18, Z+
     6cc:	31 91       	ld	r19, Z+
     6ce:	89 91       	ld	r24, Y+
     6d0:	99 91       	ld	r25, Y+
     6d2:	82 0f       	add	r24, r18
     6d4:	93 1f       	adc	r25, r19
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	8d 93       	st	X+, r24
     6dc:	9d 93       	st	X+, r25
     6de:	e4 17       	cp	r30, r20
     6e0:	f5 07       	cpc	r31, r21
     6e2:	99 f7       	brne	.-26     	; 0x6ca <update_black+0x2c>
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <read_vcompare>:
     6ea:	40 e1       	ldi	r20, 0x10	; 16
     6ec:	69 e8       	ldi	r22, 0x89	; 137
     6ee:	72 e0       	ldi	r23, 0x02	; 2
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	60 c0       	rjmp	.+192    	; 0x7b4 <eeprom_readstr>
     6f4:	08 95       	ret

000006f6 <beep_init>:
     6f6:	24 9a       	sbi	0x04, 4	; 4
     6f8:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <beep_cn+0x1>
     6fc:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <beep_cn>
     700:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <beep_flag>
     704:	08 95       	ret

00000706 <beep_on>:
     706:	2c 9a       	sbi	0x05, 4	; 5
     708:	08 95       	ret

0000070a <beep_off>:
     70a:	2c 98       	cbi	0x05, 4	; 5
     70c:	08 95       	ret

0000070e <beep_mod>:
     70e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <beep_flag>
     712:	88 23       	and	r24, r24
     714:	71 f0       	breq	.+28     	; 0x732 <beep_mod+0x24>
     716:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <beep_cn>
     71a:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <beep_cn+0x1>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <beep_cn+0x1>
     724:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <beep_cn>
     728:	89 2b       	or	r24, r25
     72a:	19 f4       	brne	.+6      	; 0x732 <beep_mod+0x24>
     72c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <beep_flag>
     730:	ec cf       	rjmp	.-40     	; 0x70a <beep_off>
     732:	08 95       	ret

00000734 <beep_long>:
     734:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <beep_cn+0x1>
     738:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <beep_cn>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <beep_flag>
     742:	e1 cf       	rjmp	.-62     	; 0x706 <beep_on>
     744:	08 95       	ret

00000746 <eeprom_writebyte>:
     746:	f9 99       	sbic	0x1f, 1	; 31
     748:	fe cf       	rjmp	.-4      	; 0x746 <eeprom_writebyte>
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	92 bd       	out	0x22, r25	; 34
     74e:	81 bd       	out	0x21, r24	; 33
     750:	60 bd       	out	0x20, r22	; 32
     752:	8f b7       	in	r24, 0x3f	; 63
     754:	8f 77       	andi	r24, 0x7F	; 127
     756:	8f bf       	out	0x3f, r24	; 63
     758:	fa 9a       	sbi	0x1f, 2	; 31
     75a:	f9 9a       	sbi	0x1f, 1	; 31
     75c:	8f b7       	in	r24, 0x3f	; 63
     75e:	80 68       	ori	r24, 0x80	; 128
     760:	8f bf       	out	0x3f, r24	; 63
     762:	08 95       	ret

00000764 <eeprom_writestr>:
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	71 f0       	breq	.+28     	; 0x78e <eeprom_writestr+0x2a>
     772:	44 23       	and	r20, r20
     774:	61 f0       	breq	.+24     	; 0x78e <eeprom_writestr+0x2a>
     776:	c8 2f       	mov	r28, r24
     778:	8b 01       	movw	r16, r22
     77a:	d4 2f       	mov	r29, r20
     77c:	d8 0f       	add	r29, r24
     77e:	f8 01       	movw	r30, r16
     780:	61 91       	ld	r22, Z+
     782:	8f 01       	movw	r16, r30
     784:	8c 2f       	mov	r24, r28
     786:	df df       	rcall	.-66     	; 0x746 <eeprom_writebyte>
     788:	cf 5f       	subi	r28, 0xFF	; 255
     78a:	cd 13       	cpse	r28, r29
     78c:	f8 cf       	rjmp	.-16     	; 0x77e <eeprom_writestr+0x1a>
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <eeprom_readbyte>:
     798:	f9 99       	sbic	0x1f, 1	; 31
     79a:	fe cf       	rjmp	.-4      	; 0x798 <eeprom_readbyte>
     79c:	9f b7       	in	r25, 0x3f	; 63
     79e:	9f 77       	andi	r25, 0x7F	; 127
     7a0:	9f bf       	out	0x3f, r25	; 63
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	92 bd       	out	0x22, r25	; 34
     7a6:	81 bd       	out	0x21, r24	; 33
     7a8:	f8 9a       	sbi	0x1f, 0	; 31
     7aa:	8f b7       	in	r24, 0x3f	; 63
     7ac:	80 68       	ori	r24, 0x80	; 128
     7ae:	8f bf       	out	0x3f, r24	; 63
     7b0:	80 b5       	in	r24, 0x20	; 32
     7b2:	08 95       	ret

000007b4 <eeprom_readstr>:
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	c8 2f       	mov	r28, r24
     7be:	d4 2f       	mov	r29, r20
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <eeprom_readstr+0x20>
     7c6:	84 2f       	mov	r24, r20
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <malloc>
     7ce:	bc 01       	movw	r22, r24
     7d0:	89 2b       	or	r24, r25
     7d2:	61 f0       	breq	.+24     	; 0x7ec <eeprom_readstr+0x38>
     7d4:	dd 23       	and	r29, r29
     7d6:	51 f0       	breq	.+20     	; 0x7ec <eeprom_readstr+0x38>
     7d8:	8b 01       	movw	r16, r22
     7da:	dc 0f       	add	r29, r28
     7dc:	8c 2f       	mov	r24, r28
     7de:	dc df       	rcall	.-72     	; 0x798 <eeprom_readbyte>
     7e0:	f8 01       	movw	r30, r16
     7e2:	81 93       	st	Z+, r24
     7e4:	8f 01       	movw	r16, r30
     7e6:	cf 5f       	subi	r28, 0xFF	; 255
     7e8:	cd 13       	cpse	r28, r29
     7ea:	f8 cf       	rjmp	.-16     	; 0x7dc <eeprom_readstr+0x28>
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <encoder_init>:
     7f6:	80 ea       	ldi	r24, 0xA0	; 160
     7f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     7fc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     800:	8c e0       	ldi	r24, 0x0C	; 12
     802:	8d bb       	out	0x1d, r24	; 29
     804:	8c bb       	out	0x1c, r24	; 28
     806:	8a b1       	in	r24, 0x0a	; 10
     808:	83 7f       	andi	r24, 0xF3	; 243
     80a:	8a b9       	out	0x0a, r24	; 10
     80c:	8e b1       	in	r24, 0x0e	; 14
     80e:	8c 60       	ori	r24, 0x0C	; 12
     810:	8e b9       	out	0x0e, r24	; 14
     812:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <distance1+0x1>
     816:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <distance1>
     81a:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <vantoc1>
     81e:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <distance2+0x1>
     822:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <distance2>
     826:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <vantoc2>
     82a:	08 95       	ret

0000082c <__vector_3>:
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <distance1>
     83e:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <distance1+0x1>
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <distance1+0x1>
     848:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <distance1>
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_4>:
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <distance2>
     86c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <distance2+0x1>
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <distance2+0x1>
     876:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <distance2>
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <handle_init>:
     888:	25 9a       	sbi	0x04, 5	; 4
     88a:	80 e8       	ldi	r24, 0x80	; 128
     88c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     890:	82 e1       	ldi	r24, 0x12	; 18
     892:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
     896:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     89a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     89e:	83 e1       	ldi	r24, 0x13	; 19
     8a0:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
     8a4:	88 e8       	ldi	r24, 0x88	; 136
     8a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     8b0:	8c ed       	ldi	r24, 0xDC	; 220
     8b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     8b6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     8ba:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
     8be:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
     8c2:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
     8c6:	08 95       	ret

000008c8 <handle>:
     8c8:	26 ef       	ldi	r18, 0xF6	; 246
     8ca:	ac 01       	movw	r20, r24
     8cc:	24 03       	mulsu	r18, r20
     8ce:	c0 01       	movw	r24, r0
     8d0:	25 9f       	mul	r18, r21
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     8da:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     8e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     8ea:	08 95       	ret

000008ec <handleMicro>:
     8ec:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     8f0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     8f4:	28 1b       	sub	r18, r24
     8f6:	39 0b       	sbc	r19, r25
     8f8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     8fc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     900:	08 95       	ret

00000902 <save_handle_center>:
     902:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <handle_center>
     906:	88 e2       	ldi	r24, 0x28	; 40
     908:	1e df       	rcall	.-452    	; 0x746 <eeprom_writebyte>
     90a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <handle_center+0x1>
     90e:	89 e2       	ldi	r24, 0x29	; 41
     910:	1a cf       	rjmp	.-460    	; 0x746 <eeprom_writebyte>
     912:	08 95       	ret

00000914 <read_handle_center>:
     914:	89 e2       	ldi	r24, 0x29	; 41
     916:	40 df       	rcall	.-384    	; 0x798 <eeprom_readbyte>
     918:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <handle_center>
     91c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <handle_center+0x1>
     920:	88 e2       	ldi	r24, 0x28	; 40
     922:	3a df       	rcall	.-396    	; 0x798 <eeprom_readbyte>
     924:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     928:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     92c:	a9 01       	movw	r20, r18
     92e:	48 0f       	add	r20, r24
     930:	51 1d       	adc	r21, r1
     932:	ca 01       	movw	r24, r20
     934:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <handle_center+0x1>
     938:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <handle_center>
     93c:	8c 3b       	cpi	r24, 0xBC	; 188
     93e:	52 e0       	ldi	r21, 0x02	; 2
     940:	95 07       	cpc	r25, r21
     942:	38 f4       	brcc	.+14     	; 0x952 <read_handle_center+0x3e>
     944:	8c ed       	ldi	r24, 0xDC	; 220
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
     94c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
     950:	08 95       	ret
     952:	8d 3f       	cpi	r24, 0xFD	; 253
     954:	98 40       	sbci	r25, 0x08	; 8
     956:	30 f0       	brcs	.+12     	; 0x964 <read_handle_center+0x50>
     958:	8c ed       	ldi	r24, 0xDC	; 220
     95a:	95 e0       	ldi	r25, 0x05	; 5
     95c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
     960:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
     964:	08 95       	ret

00000966 <input_init>:
     966:	a1 e0       	ldi	r26, 0x01	; 1
     968:	b1 e0       	ldi	r27, 0x01	; 1
     96a:	8c 91       	ld	r24, X
     96c:	80 7f       	andi	r24, 0xF0	; 240
     96e:	8c 93       	st	X, r24
     970:	e2 e0       	ldi	r30, 0x02	; 2
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	80 81       	ld	r24, Z
     976:	8f 60       	ori	r24, 0x0F	; 15
     978:	80 83       	st	Z, r24
     97a:	8c 91       	ld	r24, X
     97c:	8f 70       	andi	r24, 0x0F	; 15
     97e:	8c 93       	st	X, r24
     980:	80 81       	ld	r24, Z
     982:	80 6f       	ori	r24, 0xF0	; 240
     984:	80 83       	st	Z, r24
     986:	8f e0       	ldi	r24, 0x0F	; 15
     988:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <key_input>
     98c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <key0>
     990:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <key2>
     994:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <key1>
     998:	80 ef       	ldi	r24, 0xF0	; 240
     99a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <dipsw_input>
     99e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <dipsw0>
     9a2:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <dipsw2>
     9a6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <dipsw1>
     9aa:	08 95       	ret

000009ac <update_input>:
     9ac:	40 91 fd 02 	lds	r20, 0x02FD	; 0x8002fd <key1>
     9b0:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <key2>
     9b4:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <key0>
     9b8:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <key1>
     9bc:	50 91 f9 02 	lds	r21, 0x02F9	; 0x8002f9 <dipsw1>
     9c0:	50 93 ff 02 	sts	0x02FF, r21	; 0x8002ff <dipsw2>
     9c4:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <dipsw0>
     9c8:	20 93 f9 02 	sts	0x02F9, r18	; 0x8002f9 <dipsw1>
     9cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     9d0:	38 2f       	mov	r19, r24
     9d2:	30 7f       	andi	r19, 0xF0	; 240
     9d4:	30 93 f8 02 	sts	0x02F8, r19	; 0x8002f8 <dipsw0>
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <key0>
     9de:	23 13       	cpse	r18, r19
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <update_input+0x3e>
     9e2:	52 13       	cpse	r21, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <update_input+0x3e>
     9e6:	50 93 01 03 	sts	0x0301, r21	; 0x800301 <dipsw_input>
     9ea:	98 13       	cpse	r25, r24
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <update_input+0x4a>
     9ee:	49 13       	cpse	r20, r25
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <update_input+0x4a>
     9f2:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <key_input>
     9f6:	08 95       	ret

000009f8 <get_key>:
     9f8:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <key_input>
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	a9 01       	movw	r20, r18
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <get_key+0xe>
     a02:	55 95       	asr	r21
     a04:	47 95       	ror	r20
     a06:	8a 95       	dec	r24
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <get_key+0xa>
     a0a:	ca 01       	movw	r24, r20
     a0c:	51 e0       	ldi	r21, 0x01	; 1
     a0e:	85 27       	eor	r24, r21
     a10:	81 70       	andi	r24, 0x01	; 1
     a12:	08 95       	ret

00000a14 <get_dipsw>:
     a14:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <dipsw_input>
     a18:	82 95       	swap	r24
     a1a:	8f 70       	andi	r24, 0x0F	; 15
     a1c:	08 95       	ret

00000a1e <getGateSensor>:
     a1e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <gatesensorMaskut>
     a22:	08 95       	ret

00000a24 <LCD_Enable>:
     a24:	47 9a       	sbi	0x08, 7	; 8
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	8a 95       	dec	r24
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <LCD_Enable+0x4>
     a2c:	47 98       	cbi	0x08, 7	; 8
     a2e:	87 e5       	ldi	r24, 0x57	; 87
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <LCD_Enable+0xe>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <LCD_Enable+0x14>
     a38:	00 00       	nop
     a3a:	08 95       	ret

00000a3c <LCD_Send4Bit>:
     a3c:	98 b1       	in	r25, 0x08	; 8
     a3e:	8f 70       	andi	r24, 0x0F	; 15
     a40:	90 7f       	andi	r25, 0xF0	; 240
     a42:	89 2b       	or	r24, r25
     a44:	88 b9       	out	0x08, r24	; 8
     a46:	08 95       	ret

00000a48 <LCD_SendData>:
     a48:	cf 93       	push	r28
     a4a:	c8 2f       	mov	r28, r24
     a4c:	82 95       	swap	r24
     a4e:	8f 70       	andi	r24, 0x0F	; 15
     a50:	f5 df       	rcall	.-22     	; 0xa3c <LCD_Send4Bit>
     a52:	e8 df       	rcall	.-48     	; 0xa24 <LCD_Enable>
     a54:	8c 2f       	mov	r24, r28
     a56:	f2 df       	rcall	.-28     	; 0xa3c <LCD_Send4Bit>
     a58:	e5 df       	rcall	.-54     	; 0xa24 <LCD_Enable>
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <LCD_SendCommand>:
     a5e:	cf 93       	push	r28
     a60:	c8 2f       	mov	r28, r24
     a62:	45 98       	cbi	0x08, 5	; 8
     a64:	82 95       	swap	r24
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	e9 df       	rcall	.-46     	; 0xa3c <LCD_Send4Bit>
     a6a:	dc df       	rcall	.-72     	; 0xa24 <LCD_Enable>
     a6c:	8c 2f       	mov	r24, r28
     a6e:	e6 df       	rcall	.-52     	; 0xa3c <LCD_Send4Bit>
     a70:	d9 df       	rcall	.-78     	; 0xa24 <LCD_Enable>
     a72:	45 9a       	sbi	0x08, 5	; 8
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <LCD_Gotoxy>:
     a78:	45 98       	cbi	0x08, 5	; 8
     a7a:	61 11       	cpse	r22, r1
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <LCD_Gotoxy+0xa>
     a7e:	80 58       	subi	r24, 0x80	; 128
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <LCD_Gotoxy+0xc>
     a82:	80 54       	subi	r24, 0x40	; 64
     a84:	ef ed       	ldi	r30, 0xDF	; 223
     a86:	fe e2       	ldi	r31, 0x2E	; 46
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <LCD_Gotoxy+0x10>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <LCD_Gotoxy+0x16>
     a8e:	00 00       	nop
     a90:	e6 df       	rcall	.-52     	; 0xa5e <LCD_SendCommand>
     a92:	8f e9       	ldi	r24, 0x9F	; 159
     a94:	9f e0       	ldi	r25, 0x0F	; 15
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <LCD_Gotoxy+0x1e>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCD_Gotoxy+0x24>
     a9c:	00 00       	nop
     a9e:	08 95       	ret

00000aa0 <LCD_Clr>:
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	dd df       	rcall	.-70     	; 0xa5e <LCD_SendCommand>
     aa4:	8f e3       	ldi	r24, 0x3F	; 63
     aa6:	9c e9       	ldi	r25, 0x9C	; 156
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCD_Clr+0x8>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <LCD_Clr+0xe>
     aae:	00 00       	nop
     ab0:	08 95       	ret

00000ab2 <LCD_Init>:
     ab2:	87 b1       	in	r24, 0x07	; 7
     ab4:	8f 60       	ori	r24, 0x0F	; 15
     ab6:	87 b9       	out	0x07, r24	; 7
     ab8:	87 b1       	in	r24, 0x07	; 7
     aba:	80 6a       	ori	r24, 0xA0	; 160
     abc:	87 b9       	out	0x07, r24	; 7
     abe:	3e 9a       	sbi	0x07, 6	; 7
     ac0:	88 b1       	in	r24, 0x08	; 8
     ac2:	80 7f       	andi	r24, 0xF0	; 240
     ac4:	88 b9       	out	0x08, r24	; 8
     ac6:	2f ef       	ldi	r18, 0xFF	; 255
     ac8:	89 ef       	ldi	r24, 0xF9	; 249
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	21 50       	subi	r18, 0x01	; 1
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <LCD_Init+0x1a>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <LCD_Init+0x24>
     ad6:	00 00       	nop
     ad8:	45 98       	cbi	0x08, 5	; 8
     ada:	8f e1       	ldi	r24, 0x1F	; 31
     adc:	9e e4       	ldi	r25, 0x4E	; 78
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <LCD_Init+0x2c>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <LCD_Init+0x32>
     ae4:	00 00       	nop
     ae6:	46 98       	cbi	0x08, 6	; 8
     ae8:	8f e1       	ldi	r24, 0x1F	; 31
     aea:	9e e4       	ldi	r25, 0x4E	; 78
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <LCD_Init+0x3a>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <LCD_Init+0x40>
     af2:	00 00       	nop
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	b3 df       	rcall	.-154    	; 0xa5e <LCD_SendCommand>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	9c e9       	ldi	r25, 0x9C	; 156
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <LCD_Init+0x4a>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <LCD_Init+0x50>
     b02:	00 00       	nop
     b04:	8f df       	rcall	.-226    	; 0xa24 <LCD_Enable>
     b06:	8f e3       	ldi	r24, 0x3F	; 63
     b08:	9c e9       	ldi	r25, 0x9C	; 156
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <LCD_Init+0x58>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <LCD_Init+0x5e>
     b10:	00 00       	nop
     b12:	88 df       	rcall	.-240    	; 0xa24 <LCD_Enable>
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	9c e9       	ldi	r25, 0x9C	; 156
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <LCD_Init+0x66>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <LCD_Init+0x6c>
     b1e:	00 00       	nop
     b20:	81 df       	rcall	.-254    	; 0xa24 <LCD_Enable>
     b22:	8f e3       	ldi	r24, 0x3F	; 63
     b24:	9c e9       	ldi	r25, 0x9C	; 156
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <LCD_Init+0x74>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <LCD_Init+0x7a>
     b2c:	00 00       	nop
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	96 df       	rcall	.-212    	; 0xa5e <LCD_SendCommand>
     b32:	8f e3       	ldi	r24, 0x3F	; 63
     b34:	9c e9       	ldi	r25, 0x9C	; 156
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_Init+0x84>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <LCD_Init+0x8a>
     b3c:	00 00       	nop
     b3e:	88 e2       	ldi	r24, 0x28	; 40
     b40:	83 df       	rcall	.-250    	; 0xa48 <LCD_SendData>
     b42:	8f e3       	ldi	r24, 0x3F	; 63
     b44:	9c e9       	ldi	r25, 0x9C	; 156
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <LCD_Init+0x94>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <LCD_Init+0x9a>
     b4c:	00 00       	nop
     b4e:	8c e0       	ldi	r24, 0x0C	; 12
     b50:	86 df       	rcall	.-244    	; 0xa5e <LCD_SendCommand>
     b52:	8f e3       	ldi	r24, 0x3F	; 63
     b54:	9c e9       	ldi	r25, 0x9C	; 156
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <LCD_Init+0xa4>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <LCD_Init+0xaa>
     b5c:	00 00       	nop
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	7e df       	rcall	.-260    	; 0xa5e <LCD_SendCommand>
     b62:	8f e3       	ldi	r24, 0x3F	; 63
     b64:	9c e9       	ldi	r25, 0x9C	; 156
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <LCD_Init+0xb4>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <LCD_Init+0xba>
     b6c:	00 00       	nop
     b6e:	98 df       	rcall	.-208    	; 0xaa0 <LCD_Clr>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	81 cf       	rjmp	.-254    	; 0xa78 <LCD_Gotoxy>
     b76:	08 95       	ret

00000b78 <LCD_PutD>:
     b78:	80 5d       	subi	r24, 0xD0	; 208
     b7a:	66 cf       	rjmp	.-308    	; 0xa48 <LCD_SendData>
     b7c:	08 95       	ret

00000b7e <LCD_Puts>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	ec 01       	movw	r28, r24
     b84:	45 9a       	sbi	0x08, 5	; 8
     b86:	88 81       	ld	r24, Y
     b88:	88 23       	and	r24, r24
     b8a:	29 f0       	breq	.+10     	; 0xb96 <LCD_Puts+0x18>
     b8c:	21 96       	adiw	r28, 0x01	; 1
     b8e:	5c df       	rcall	.-328    	; 0xa48 <LCD_SendData>
     b90:	89 91       	ld	r24, Y+
     b92:	81 11       	cpse	r24, r1
     b94:	fc cf       	rjmp	.-8      	; 0xb8e <LCD_Puts+0x10>
     b96:	45 98       	cbi	0x08, 5	; 8
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <LCD_PutDec>:
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ac 01       	movw	r20, r24
     ba8:	8a 30       	cpi	r24, 0x0A	; 10
     baa:	91 05       	cpc	r25, r1
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <LCD_PutDec+0x12>
     bae:	69 c0       	rjmp	.+210    	; 0xc82 <LCD_PutDec+0xe4>
     bb0:	9c 01       	movw	r18, r24
     bb2:	32 95       	swap	r19
     bb4:	22 95       	swap	r18
     bb6:	2f 70       	andi	r18, 0x0F	; 15
     bb8:	23 27       	eor	r18, r19
     bba:	3f 70       	andi	r19, 0x0F	; 15
     bbc:	23 27       	eor	r18, r19
     bbe:	a7 e4       	ldi	r26, 0x47	; 71
     bc0:	b3 e0       	ldi	r27, 0x03	; 3
     bc2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	60 e1       	ldi	r22, 0x10	; 16
     bd4:	77 e2       	ldi	r23, 0x27	; 39
     bd6:	86 9f       	mul	r24, r22
     bd8:	90 01       	movw	r18, r0
     bda:	87 9f       	mul	r24, r23
     bdc:	30 0d       	add	r19, r0
     bde:	96 9f       	mul	r25, r22
     be0:	30 0d       	add	r19, r0
     be2:	11 24       	eor	r1, r1
     be4:	42 1b       	sub	r20, r18
     be6:	53 0b       	sbc	r21, r19
     be8:	9a 01       	movw	r18, r20
     bea:	36 95       	lsr	r19
     bec:	27 95       	ror	r18
     bee:	36 95       	lsr	r19
     bf0:	27 95       	ror	r18
     bf2:	36 95       	lsr	r19
     bf4:	27 95       	ror	r18
     bf6:	a5 ec       	ldi	r26, 0xC5	; 197
     bf8:	b0 e2       	ldi	r27, 0x20	; 32
     bfa:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     bfe:	92 95       	swap	r25
     c00:	82 95       	swap	r24
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	89 27       	eor	r24, r25
     c06:	9f 70       	andi	r25, 0x0F	; 15
     c08:	89 27       	eor	r24, r25
     c0a:	68 ee       	ldi	r22, 0xE8	; 232
     c0c:	73 e0       	ldi	r23, 0x03	; 3
     c0e:	86 9f       	mul	r24, r22
     c10:	90 01       	movw	r18, r0
     c12:	87 9f       	mul	r24, r23
     c14:	30 0d       	add	r19, r0
     c16:	96 9f       	mul	r25, r22
     c18:	30 0d       	add	r19, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	42 1b       	sub	r20, r18
     c1e:	53 0b       	sbc	r21, r19
     c20:	9a 01       	movw	r18, r20
     c22:	36 95       	lsr	r19
     c24:	27 95       	ror	r18
     c26:	36 95       	lsr	r19
     c28:	27 95       	ror	r18
     c2a:	ab e7       	ldi	r26, 0x7B	; 123
     c2c:	b4 e1       	ldi	r27, 0x14	; 20
     c2e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	64 e6       	ldi	r22, 0x64	; 100
     c38:	68 9f       	mul	r22, r24
     c3a:	90 01       	movw	r18, r0
     c3c:	69 9f       	mul	r22, r25
     c3e:	30 0d       	add	r19, r0
     c40:	11 24       	eor	r1, r1
     c42:	42 1b       	sub	r20, r18
     c44:	53 0b       	sbc	r21, r19
     c46:	9a 01       	movw	r18, r20
     c48:	ad ec       	ldi	r26, 0xCD	; 205
     c4a:	bc ec       	ldi	r27, 0xCC	; 204
     c4c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	9c 01       	movw	r18, r24
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	24 2f       	mov	r18, r20
     c74:	28 1b       	sub	r18, r24
     c76:	82 2f       	mov	r24, r18
     c78:	7f df       	rcall	.-258    	; 0xb78 <LCD_PutD>
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	7f df       	rcall	.-258    	; 0xb7e <LCD_Puts>
     c80:	e2 c0       	rjmp	.+452    	; 0xe46 <LCD_PutDec+0x2a8>
     c82:	84 36       	cpi	r24, 0x64	; 100
     c84:	91 05       	cpc	r25, r1
     c86:	08 f0       	brcs	.+2      	; 0xc8a <LCD_PutDec+0xec>
     c88:	6d c0       	rjmp	.+218    	; 0xd64 <LCD_PutDec+0x1c6>
     c8a:	9c 01       	movw	r18, r24
     c8c:	32 95       	swap	r19
     c8e:	22 95       	swap	r18
     c90:	2f 70       	andi	r18, 0x0F	; 15
     c92:	23 27       	eor	r18, r19
     c94:	3f 70       	andi	r19, 0x0F	; 15
     c96:	23 27       	eor	r18, r19
     c98:	a7 e4       	ldi	r26, 0x47	; 71
     c9a:	b3 e0       	ldi	r27, 0x03	; 3
     c9c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     ca0:	96 95       	lsr	r25
     ca2:	87 95       	ror	r24
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	60 e1       	ldi	r22, 0x10	; 16
     cae:	77 e2       	ldi	r23, 0x27	; 39
     cb0:	86 9f       	mul	r24, r22
     cb2:	90 01       	movw	r18, r0
     cb4:	87 9f       	mul	r24, r23
     cb6:	30 0d       	add	r19, r0
     cb8:	96 9f       	mul	r25, r22
     cba:	30 0d       	add	r19, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	42 1b       	sub	r20, r18
     cc0:	53 0b       	sbc	r21, r19
     cc2:	9a 01       	movw	r18, r20
     cc4:	36 95       	lsr	r19
     cc6:	27 95       	ror	r18
     cc8:	36 95       	lsr	r19
     cca:	27 95       	ror	r18
     ccc:	36 95       	lsr	r19
     cce:	27 95       	ror	r18
     cd0:	a5 ec       	ldi	r26, 0xC5	; 197
     cd2:	b0 e2       	ldi	r27, 0x20	; 32
     cd4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     cd8:	92 95       	swap	r25
     cda:	82 95       	swap	r24
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	89 27       	eor	r24, r25
     ce0:	9f 70       	andi	r25, 0x0F	; 15
     ce2:	89 27       	eor	r24, r25
     ce4:	68 ee       	ldi	r22, 0xE8	; 232
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	86 9f       	mul	r24, r22
     cea:	90 01       	movw	r18, r0
     cec:	87 9f       	mul	r24, r23
     cee:	30 0d       	add	r19, r0
     cf0:	96 9f       	mul	r25, r22
     cf2:	30 0d       	add	r19, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	42 1b       	sub	r20, r18
     cf8:	53 0b       	sbc	r21, r19
     cfa:	9a 01       	movw	r18, r20
     cfc:	36 95       	lsr	r19
     cfe:	27 95       	ror	r18
     d00:	36 95       	lsr	r19
     d02:	27 95       	ror	r18
     d04:	ab e7       	ldi	r26, 0x7B	; 123
     d06:	b4 e1       	ldi	r27, 0x14	; 20
     d08:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     d0c:	8c 01       	movw	r16, r24
     d0e:	16 95       	lsr	r17
     d10:	07 95       	ror	r16
     d12:	24 e6       	ldi	r18, 0x64	; 100
     d14:	20 9f       	mul	r18, r16
     d16:	c0 01       	movw	r24, r0
     d18:	21 9f       	mul	r18, r17
     d1a:	90 0d       	add	r25, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	8a 01       	movw	r16, r20
     d20:	08 1b       	sub	r16, r24
     d22:	19 0b       	sbc	r17, r25
     d24:	98 01       	movw	r18, r16
     d26:	ad ec       	ldi	r26, 0xCD	; 205
     d28:	bc ec       	ldi	r27, 0xCC	; 204
     d2a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     d2e:	ec 01       	movw	r28, r24
     d30:	d6 95       	lsr	r29
     d32:	c7 95       	ror	r28
     d34:	d6 95       	lsr	r29
     d36:	c7 95       	ror	r28
     d38:	d6 95       	lsr	r29
     d3a:	c7 95       	ror	r28
     d3c:	8c 2f       	mov	r24, r28
     d3e:	1c df       	rcall	.-456    	; 0xb78 <LCD_PutD>
     d40:	ce 01       	movw	r24, r28
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	cc 0f       	add	r28, r28
     d48:	dd 1f       	adc	r29, r29
     d4a:	cc 0f       	add	r28, r28
     d4c:	dd 1f       	adc	r29, r29
     d4e:	cc 0f       	add	r28, r28
     d50:	dd 1f       	adc	r29, r29
     d52:	c8 0f       	add	r28, r24
     d54:	d9 1f       	adc	r29, r25
     d56:	80 2f       	mov	r24, r16
     d58:	8c 1b       	sub	r24, r28
     d5a:	0e df       	rcall	.-484    	; 0xb78 <LCD_PutD>
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	0e df       	rcall	.-484    	; 0xb7e <LCD_Puts>
     d62:	71 c0       	rjmp	.+226    	; 0xe46 <LCD_PutDec+0x2a8>
     d64:	88 3e       	cpi	r24, 0xE8	; 232
     d66:	23 e0       	ldi	r18, 0x03	; 3
     d68:	92 07       	cpc	r25, r18
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <LCD_PutDec+0x1d0>
     d6c:	6c c0       	rjmp	.+216    	; 0xe46 <LCD_PutDec+0x2a8>
     d6e:	9c 01       	movw	r18, r24
     d70:	32 95       	swap	r19
     d72:	22 95       	swap	r18
     d74:	2f 70       	andi	r18, 0x0F	; 15
     d76:	23 27       	eor	r18, r19
     d78:	3f 70       	andi	r19, 0x0F	; 15
     d7a:	23 27       	eor	r18, r19
     d7c:	a7 e4       	ldi	r26, 0x47	; 71
     d7e:	b3 e0       	ldi	r27, 0x03	; 3
     d80:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     d84:	96 95       	lsr	r25
     d86:	87 95       	ror	r24
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	60 e1       	ldi	r22, 0x10	; 16
     d92:	77 e2       	ldi	r23, 0x27	; 39
     d94:	86 9f       	mul	r24, r22
     d96:	90 01       	movw	r18, r0
     d98:	87 9f       	mul	r24, r23
     d9a:	30 0d       	add	r19, r0
     d9c:	96 9f       	mul	r25, r22
     d9e:	30 0d       	add	r19, r0
     da0:	11 24       	eor	r1, r1
     da2:	42 1b       	sub	r20, r18
     da4:	53 0b       	sbc	r21, r19
     da6:	9a 01       	movw	r18, r20
     da8:	36 95       	lsr	r19
     daa:	27 95       	ror	r18
     dac:	36 95       	lsr	r19
     dae:	27 95       	ror	r18
     db0:	36 95       	lsr	r19
     db2:	27 95       	ror	r18
     db4:	a5 ec       	ldi	r26, 0xC5	; 197
     db6:	b0 e2       	ldi	r27, 0x20	; 32
     db8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     dbc:	8c 01       	movw	r16, r24
     dbe:	12 95       	swap	r17
     dc0:	02 95       	swap	r16
     dc2:	0f 70       	andi	r16, 0x0F	; 15
     dc4:	01 27       	eor	r16, r17
     dc6:	1f 70       	andi	r17, 0x0F	; 15
     dc8:	01 27       	eor	r16, r17
     dca:	28 ee       	ldi	r18, 0xE8	; 232
     dcc:	33 e0       	ldi	r19, 0x03	; 3
     dce:	02 9f       	mul	r16, r18
     dd0:	c0 01       	movw	r24, r0
     dd2:	03 9f       	mul	r16, r19
     dd4:	90 0d       	add	r25, r0
     dd6:	12 9f       	mul	r17, r18
     dd8:	90 0d       	add	r25, r0
     dda:	11 24       	eor	r1, r1
     ddc:	8a 01       	movw	r16, r20
     dde:	08 1b       	sub	r16, r24
     de0:	19 0b       	sbc	r17, r25
     de2:	98 01       	movw	r18, r16
     de4:	36 95       	lsr	r19
     de6:	27 95       	ror	r18
     de8:	36 95       	lsr	r19
     dea:	27 95       	ror	r18
     dec:	ab e7       	ldi	r26, 0x7B	; 123
     dee:	b4 e1       	ldi	r27, 0x14	; 20
     df0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     df4:	ec 01       	movw	r28, r24
     df6:	d6 95       	lsr	r29
     df8:	c7 95       	ror	r28
     dfa:	8c 2f       	mov	r24, r28
     dfc:	bd de       	rcall	.-646    	; 0xb78 <LCD_PutD>
     dfe:	24 e6       	ldi	r18, 0x64	; 100
     e00:	2c 9f       	mul	r18, r28
     e02:	c0 01       	movw	r24, r0
     e04:	2d 9f       	mul	r18, r29
     e06:	90 0d       	add	r25, r0
     e08:	11 24       	eor	r1, r1
     e0a:	08 1b       	sub	r16, r24
     e0c:	19 0b       	sbc	r17, r25
     e0e:	98 01       	movw	r18, r16
     e10:	ad ec       	ldi	r26, 0xCD	; 205
     e12:	bc ec       	ldi	r27, 0xCC	; 204
     e14:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__umulhisi3>
     e18:	ec 01       	movw	r28, r24
     e1a:	d6 95       	lsr	r29
     e1c:	c7 95       	ror	r28
     e1e:	d6 95       	lsr	r29
     e20:	c7 95       	ror	r28
     e22:	d6 95       	lsr	r29
     e24:	c7 95       	ror	r28
     e26:	8c 2f       	mov	r24, r28
     e28:	a7 de       	rcall	.-690    	; 0xb78 <LCD_PutD>
     e2a:	ce 01       	movw	r24, r28
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	cc 0f       	add	r28, r28
     e32:	dd 1f       	adc	r29, r29
     e34:	cc 0f       	add	r28, r28
     e36:	dd 1f       	adc	r29, r29
     e38:	cc 0f       	add	r28, r28
     e3a:	dd 1f       	adc	r29, r29
     e3c:	c8 0f       	add	r28, r24
     e3e:	d9 1f       	adc	r29, r25
     e40:	80 2f       	mov	r24, r16
     e42:	8c 1b       	sub	r24, r28
     e44:	99 de       	rcall	.-718    	; 0xb78 <LCD_PutD>
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

00000e50 <led_init>:
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	81 b9       	out	0x01, r24	; 1
     e54:	82 b9       	out	0x02, r24	; 2
     e56:	ea e0       	ldi	r30, 0x0A	; 10
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	88 63       	ori	r24, 0x38	; 56
     e5e:	80 83       	st	Z, r24
     e60:	eb e0       	ldi	r30, 0x0B	; 11
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	80 81       	ld	r24, Z
     e66:	87 7c       	andi	r24, 0xC7	; 199
     e68:	80 83       	st	Z, r24
     e6a:	08 95       	ret

00000e6c <led_put>:
     e6c:	80 95       	com	r24
     e6e:	82 b9       	out	0x02, r24	; 2
     e70:	08 95       	ret

00000e72 <RGB>:
     e72:	88 23       	and	r24, r24
     e74:	31 f0       	breq	.+12     	; 0xe82 <RGB+0x10>
     e76:	eb e0       	ldi	r30, 0x0B	; 11
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	80 81       	ld	r24, Z
     e7c:	80 61       	ori	r24, 0x10	; 16
     e7e:	80 83       	st	Z, r24
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <RGB+0x1a>
     e82:	eb e0       	ldi	r30, 0x0B	; 11
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	80 81       	ld	r24, Z
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	80 83       	st	Z, r24
     e8c:	66 23       	and	r22, r22
     e8e:	31 f0       	breq	.+12     	; 0xe9c <RGB+0x2a>
     e90:	eb e0       	ldi	r30, 0x0B	; 11
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	80 83       	st	Z, r24
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <RGB+0x34>
     e9c:	eb e0       	ldi	r30, 0x0B	; 11
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7d       	andi	r24, 0xDF	; 223
     ea4:	80 83       	st	Z, r24
     ea6:	44 23       	and	r20, r20
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <RGB+0x44>
     eaa:	eb e0       	ldi	r30, 0x0B	; 11
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	80 83       	st	Z, r24
     eb4:	08 95       	ret
     eb6:	eb e0       	ldi	r30, 0x0B	; 11
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	80 81       	ld	r24, Z
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	80 83       	st	Z, r24
     ec0:	08 95       	ret

00000ec2 <setup>:
		handleAndSpeed (5,speedRun);
		break;
		case 0x0e://
		case 0x0c://
		case 0x04:
		handleAndSpeed (10,speedRun);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	00 dd       	rcall	.-1536   	; 0x8c8 <handle>
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
     ed4:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
     ed8:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
     edc:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <cnt4+0x1>
     ee0:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <cnt4>
     ee4:	80 e3       	ldi	r24, 0x30	; 48
     ee6:	95 e7       	ldi	r25, 0x75	; 117
     ee8:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <RunTimer+0x1>
     eec:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <RunTimer>
     ef0:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <sensorPos>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
     efa:	8c dd       	rcall	.-1256   	; 0xa14 <get_dipsw>
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	37 97       	sbiw	r30, 0x07	; 7
     f02:	e9 30       	cpi	r30, 0x09	; 9
     f04:	f1 05       	cpc	r31, r1
     f06:	08 f0       	brcs	.+2      	; 0xf0a <setup+0x48>
     f08:	59 c2       	rjmp	.+1202   	; 0x13bc <__EEPROM_REGION_LENGTH__+0x3bc>
     f0a:	88 27       	eor	r24, r24
     f0c:	ee 58       	subi	r30, 0x8E	; 142
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__tablejump2__>
     f16:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
     f1a:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
     f1e:	84 e6       	ldi	r24, 0x64	; 100
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
     f26:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
     f2a:	42 e3       	ldi	r20, 0x32	; 50
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <speed90+0x1>
     f32:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <speed90>
     f36:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <speedBoostAfter90+0x1>
     f3a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <speedBoostAfter90>
     f3e:	28 ec       	ldi	r18, 0xC8	; 200
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	30 93 4f 03 	sts	0x034F, r19	; 0x80034f <timerBoostAfter90+0x1>
     f46:	20 93 4e 03 	sts	0x034E, r18	; 0x80034e <timerBoostAfter90>
     f4a:	6a e0       	ldi	r22, 0x0A	; 10
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <angleChangeLanes+0x1>
     f52:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <angleChangeLanes>
     f56:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
     f5a:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
     f5e:	68 e7       	ldi	r22, 0x78	; 120
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timerBrakeChangeLanes+0x1>
     f66:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timerBrakeChangeLanes>
     f6a:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <speedChangeLanes+0x1>
     f6e:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <speedChangeLanes>
     f72:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <speedBoostAfterChangeLanes+0x1>
     f76:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <speedBoostAfterChangeLanes>
     f7a:	30 93 33 03 	sts	0x0333, r19	; 0x800333 <timerBoostAfterChangeLanes+0x1>
     f7e:	20 93 32 03 	sts	0x0332, r18	; 0x800332 <timerBoostAfterChangeLanes>
     f82:	8d e2       	ldi	r24, 0x2D	; 45
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
     f8a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
     f8e:	46 c2       	rjmp	.+1164   	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
     f90:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
     f94:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
     f98:	24 e6       	ldi	r18, 0x64	; 100
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	30 93 37 03 	sts	0x0337, r19	; 0x800337 <timerBrake90+0x1>
     fa0:	20 93 36 03 	sts	0x0336, r18	; 0x800336 <timerBrake90>
     fa4:	82 e3       	ldi	r24, 0x32	; 50
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <speed90+0x1>
     fac:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <speed90>
     fb0:	30 93 13 03 	sts	0x0313, r19	; 0x800313 <speedBoostAfter90+0x1>
     fb4:	20 93 12 03 	sts	0x0312, r18	; 0x800312 <speedBoostAfter90>
     fb8:	48 ec       	ldi	r20, 0xC8	; 200
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	50 93 4f 03 	sts	0x034F, r21	; 0x80034f <timerBoostAfter90+0x1>
     fc0:	40 93 4e 03 	sts	0x034E, r20	; 0x80034e <timerBoostAfter90>
     fc4:	6a e0       	ldi	r22, 0x0A	; 10
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <angleChangeLanes+0x1>
     fcc:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <angleChangeLanes>
     fd0:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
     fd4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
     fd8:	68 e7       	ldi	r22, 0x78	; 120
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timerBrakeChangeLanes+0x1>
     fe0:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timerBrakeChangeLanes>
     fe4:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <speedChangeLanes+0x1>
     fe8:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <speedChangeLanes>
     fec:	30 93 39 03 	sts	0x0339, r19	; 0x800339 <speedBoostAfterChangeLanes+0x1>
     ff0:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <speedBoostAfterChangeLanes>
     ff4:	50 93 33 03 	sts	0x0333, r21	; 0x800333 <timerBoostAfterChangeLanes+0x1>
     ff8:	40 93 32 03 	sts	0x0332, r20	; 0x800332 <timerBoostAfterChangeLanes>
     ffc:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
    1000:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
    1004:	0b c2       	rjmp	.+1046   	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    1006:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
    100a:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
    100e:	84 e6       	ldi	r24, 0x64	; 100
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
    1016:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
    101a:	42 e3       	ldi	r20, 0x32	; 50
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <speed90+0x1>
    1022:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <speed90>
    1026:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <speedBoostAfter90+0x1>
    102a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <speedBoostAfter90>
    102e:	28 ec       	ldi	r18, 0xC8	; 200
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	30 93 4f 03 	sts	0x034F, r19	; 0x80034f <timerBoostAfter90+0x1>
    1036:	20 93 4e 03 	sts	0x034E, r18	; 0x80034e <timerBoostAfter90>
    103a:	6a e0       	ldi	r22, 0x0A	; 10
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <angleChangeLanes+0x1>
    1042:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <angleChangeLanes>
    1046:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
    104a:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
    104e:	68 e7       	ldi	r22, 0x78	; 120
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timerBrakeChangeLanes+0x1>
    1056:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timerBrakeChangeLanes>
    105a:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <speedChangeLanes+0x1>
    105e:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <speedChangeLanes>
    1062:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    1066:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <speedBoostAfterChangeLanes>
    106a:	30 93 33 03 	sts	0x0333, r19	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    106e:	20 93 32 03 	sts	0x0332, r18	; 0x800332 <timerBoostAfterChangeLanes>
    1072:	87 e3       	ldi	r24, 0x37	; 55
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
    107a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
    107e:	ce c1       	rjmp	.+924    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    1080:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
    1084:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
    1088:	8c e3       	ldi	r24, 0x3C	; 60
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
    1090:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
    1094:	82 e8       	ldi	r24, 0x82	; 130
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <speed90+0x1>
    109c:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <speed90>
    10a0:	28 ec       	ldi	r18, 0xC8	; 200
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	30 93 13 03 	sts	0x0313, r19	; 0x800313 <speedBoostAfter90+0x1>
    10a8:	20 93 12 03 	sts	0x0312, r18	; 0x800312 <speedBoostAfter90>
    10ac:	84 e6       	ldi	r24, 0x64	; 100
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <timerBoostAfter90+0x1>
    10b4:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <timerBoostAfter90>
    10b8:	42 e1       	ldi	r20, 0x12	; 18
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	50 93 31 03 	sts	0x0331, r21	; 0x800331 <angleChangeLanes+0x1>
    10c0:	40 93 30 03 	sts	0x0330, r20	; 0x800330 <angleChangeLanes>
    10c4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
    10c8:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
    10cc:	4e e1       	ldi	r20, 0x1E	; 30
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <timerBrakeChangeLanes+0x1>
    10d4:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <timerBrakeChangeLanes>
    10d8:	44 eb       	ldi	r20, 0xB4	; 180
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <speedChangeLanes+0x1>
    10e0:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <speedChangeLanes>
    10e4:	42 ed       	ldi	r20, 0xD2	; 210
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	50 93 1f 03 	sts	0x031F, r21	; 0x80031f <speedRunForward+0x1>
    10ec:	40 93 1e 03 	sts	0x031E, r20	; 0x80031e <speedRunForward>
    10f0:	30 93 39 03 	sts	0x0339, r19	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    10f4:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <speedBoostAfterChangeLanes>
    10f8:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    10fc:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <timerBoostAfterChangeLanes>
    1100:	8d c1       	rjmp	.+794    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    1102:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
    1106:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
    110a:	84 e6       	ldi	r24, 0x64	; 100
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
    1112:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
    1116:	42 e3       	ldi	r20, 0x32	; 50
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <speed90+0x1>
    111e:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <speed90>
    1122:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <speedBoostAfter90+0x1>
    1126:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <speedBoostAfter90>
    112a:	28 ec       	ldi	r18, 0xC8	; 200
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	30 93 4f 03 	sts	0x034F, r19	; 0x80034f <timerBoostAfter90+0x1>
    1132:	20 93 4e 03 	sts	0x034E, r18	; 0x80034e <timerBoostAfter90>
    1136:	6a e0       	ldi	r22, 0x0A	; 10
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <angleChangeLanes+0x1>
    113e:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <angleChangeLanes>
    1142:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
    1146:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
    114a:	68 e7       	ldi	r22, 0x78	; 120
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timerBrakeChangeLanes+0x1>
    1152:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timerBrakeChangeLanes>
    1156:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <speedChangeLanes+0x1>
    115a:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <speedChangeLanes>
    115e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    1162:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <speedBoostAfterChangeLanes>
    1166:	30 93 33 03 	sts	0x0333, r19	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    116a:	20 93 32 03 	sts	0x0332, r18	; 0x800332 <timerBoostAfterChangeLanes>
    116e:	81 e4       	ldi	r24, 0x41	; 65
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
    1176:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
    117a:	50 c1       	rjmp	.+672    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    117c:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
    1180:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
    1184:	84 e6       	ldi	r24, 0x64	; 100
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
    118c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
    1190:	42 e3       	ldi	r20, 0x32	; 50
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <speed90+0x1>
    1198:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <speed90>
    119c:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <speedBoostAfter90+0x1>
    11a0:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <speedBoostAfter90>
    11a4:	28 ec       	ldi	r18, 0xC8	; 200
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	30 93 4f 03 	sts	0x034F, r19	; 0x80034f <timerBoostAfter90+0x1>
    11ac:	20 93 4e 03 	sts	0x034E, r18	; 0x80034e <timerBoostAfter90>
    11b0:	6a e0       	ldi	r22, 0x0A	; 10
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <angleChangeLanes+0x1>
    11b8:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <angleChangeLanes>
    11bc:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
    11c0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
    11c4:	68 e7       	ldi	r22, 0x78	; 120
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timerBrakeChangeLanes+0x1>
    11cc:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timerBrakeChangeLanes>
    11d0:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <speedChangeLanes+0x1>
    11d4:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <speedChangeLanes>
    11d8:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    11dc:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <speedBoostAfterChangeLanes>
    11e0:	30 93 33 03 	sts	0x0333, r19	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    11e4:	20 93 32 03 	sts	0x0332, r18	; 0x800332 <timerBoostAfterChangeLanes>
    11e8:	86 e4       	ldi	r24, 0x46	; 70
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
    11f0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
    11f4:	13 c1       	rjmp	.+550    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    11f6:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
    11fa:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
    11fe:	84 e6       	ldi	r24, 0x64	; 100
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
    1206:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
    120a:	42 e3       	ldi	r20, 0x32	; 50
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <speed90+0x1>
    1212:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <speed90>
    1216:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <speedBoostAfter90+0x1>
    121a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <speedBoostAfter90>
    121e:	28 ec       	ldi	r18, 0xC8	; 200
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	30 93 4f 03 	sts	0x034F, r19	; 0x80034f <timerBoostAfter90+0x1>
    1226:	20 93 4e 03 	sts	0x034E, r18	; 0x80034e <timerBoostAfter90>
    122a:	6a e0       	ldi	r22, 0x0A	; 10
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <angleChangeLanes+0x1>
    1232:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <angleChangeLanes>
    1236:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
    123a:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
    123e:	68 e7       	ldi	r22, 0x78	; 120
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timerBrakeChangeLanes+0x1>
    1246:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timerBrakeChangeLanes>
    124a:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <speedChangeLanes+0x1>
    124e:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <speedChangeLanes>
    1252:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    1256:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <speedBoostAfterChangeLanes>
    125a:	30 93 33 03 	sts	0x0333, r19	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    125e:	20 93 32 03 	sts	0x0332, r18	; 0x800332 <timerBoostAfterChangeLanes>
    1262:	8b e4       	ldi	r24, 0x4B	; 75
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
    126a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
    126e:	d6 c0       	rjmp	.+428    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    1270:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
    1274:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
    1278:	86 e9       	ldi	r24, 0x96	; 150
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
    1280:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
    1284:	84 e6       	ldi	r24, 0x64	; 100
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <speed90+0x1>
    128c:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <speed90>
    1290:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <speedBoostAfter90+0x1>
    1294:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <speedBoostAfter90>
    1298:	28 ec       	ldi	r18, 0xC8	; 200
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	30 93 4f 03 	sts	0x034F, r19	; 0x80034f <timerBoostAfter90+0x1>
    12a0:	20 93 4e 03 	sts	0x034E, r18	; 0x80034e <timerBoostAfter90>
    12a4:	4a e0       	ldi	r20, 0x0A	; 10
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	50 93 31 03 	sts	0x0331, r21	; 0x800331 <angleChangeLanes+0x1>
    12ac:	40 93 30 03 	sts	0x0330, r20	; 0x800330 <angleChangeLanes>
    12b0:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
    12b4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
    12b8:	48 e7       	ldi	r20, 0x78	; 120
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <timerBrakeChangeLanes+0x1>
    12c0:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <timerBrakeChangeLanes>
    12c4:	42 e3       	ldi	r20, 0x32	; 50
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <speedChangeLanes+0x1>
    12cc:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <speedChangeLanes>
    12d0:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    12d4:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <speedBoostAfterChangeLanes>
    12d8:	30 93 33 03 	sts	0x0333, r19	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    12dc:	20 93 32 03 	sts	0x0332, r18	; 0x800332 <timerBoostAfterChangeLanes>
    12e0:	80 e5       	ldi	r24, 0x50	; 80
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
    12e8:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
    12ec:	97 c0       	rjmp	.+302    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    12ee:	86 ef       	ldi	r24, 0xF6	; 246
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    12f2:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <speedBrake90+0x1>
    12f6:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <speedBrake90>
    12fa:	8c e3       	ldi	r24, 0x3C	; 60
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timerBrake90+0x1>
    1302:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timerBrake90>
    1306:	82 e3       	ldi	r24, 0x32	; 50
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <angleTurn90+0x1>
    130e:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <angleTurn90>
    1312:	28 e7       	ldi	r18, 0x78	; 120
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <speedTurn90+0x1>
    131a:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <speedTurn90>
    131e:	2e e1       	ldi	r18, 0x1E	; 30
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	30 93 3f 03 	sts	0x033F, r19	; 0x80033f <speedSmall90+0x1>
    1326:	20 93 3e 03 	sts	0x033E, r18	; 0x80033e <speedSmall90>
    132a:	44 eb       	ldi	r20, 0xB4	; 180
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	50 93 05 03 	sts	0x0305, r21	; 0x800305 <speedBig90+0x1>
    1332:	40 93 04 03 	sts	0x0304, r20	; 0x800304 <speedBig90>
    1336:	44 e6       	ldi	r20, 0x64	; 100
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	50 93 4f 03 	sts	0x034F, r21	; 0x80034f <timerBoostAfter90+0x1>
    133e:	40 93 4e 03 	sts	0x034E, r20	; 0x80034e <timerBoostAfter90>
    1342:	46 e1       	ldi	r20, 0x16	; 22
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	50 93 31 03 	sts	0x0331, r21	; 0x800331 <angleChangeLanes+0x1>
    134a:	40 93 30 03 	sts	0x0330, r20	; 0x800330 <angleChangeLanes>
    134e:	30 93 21 03 	sts	0x0321, r19	; 0x800321 <speedBrakeChangeLanes+0x1>
    1352:	20 93 20 03 	sts	0x0320, r18	; 0x800320 <speedBrakeChangeLanes>
    1356:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <timerBrakeChangeLanes+0x1>
    135a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <timerBrakeChangeLanes>
    135e:	8c e8       	ldi	r24, 0x8C	; 140
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <speedChangeLanes+0x1>
    1366:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <speedChangeLanes>
    136a:	82 ed       	ldi	r24, 0xD2	; 210
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <speedRunForward+0x1>
    1372:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <speedRunForward>
    1376:	8f ea       	ldi	r24, 0xAF	; 175
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <speedRunForwardBeforeChangeLine+0x1>
    137e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <speedRunForwardBeforeChangeLine>
    1382:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <speed90>
    1386:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <speed90+0x1>
    138a:	2e 52       	subi	r18, 0x2E	; 46
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	c9 01       	movw	r24, r18
    1390:	99 23       	and	r25, r25
    1392:	0c f4       	brge	.+2      	; 0x1396 <__EEPROM_REGION_LENGTH__+0x396>
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	95 95       	asr	r25
    1398:	87 95       	ror	r24
    139a:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedRunForwardBeforeTurn90+0x1>
    139e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedRunForwardBeforeTurn90>
    13a2:	8c ed       	ldi	r24, 0xDC	; 220
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    13aa:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <speedBoostAfterChangeLanes>
    13ae:	84 e6       	ldi	r24, 0x64	; 100
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    13b6:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <timerBoostAfterChangeLanes>
    13ba:	30 c0       	rjmp	.+96     	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    13bc:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <speedBrake90+0x1>
    13c0:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <speedBrake90>
    13c4:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <timerBrake90+0x1>
    13c8:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <timerBrake90>
    13cc:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <speed90+0x1>
    13d0:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <speed90>
    13d4:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <speedBoostAfter90+0x1>
    13d8:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <speedBoostAfter90>
    13dc:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <timerBoostAfter90+0x1>
    13e0:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <timerBoostAfter90>
    13e4:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <angleChangeLanes+0x1>
    13e8:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <angleChangeLanes>
    13ec:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <speedBrakeChangeLanes+0x1>
    13f0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <speedBrakeChangeLanes>
    13f4:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <timerBrakeChangeLanes+0x1>
    13f8:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <timerBrakeChangeLanes>
    13fc:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <speedChangeLanes+0x1>
    1400:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <speedChangeLanes>
    1404:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    1408:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <speedBoostAfterChangeLanes>
    140c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    1410:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <timerBoostAfterChangeLanes>
    1414:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <speedRunForward+0x1>
    1418:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <speedRunForward>
    141c:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <speedRunForward>
    1420:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <speedRunForward+0x1>
    1424:	30 93 07 03 	sts	0x0307, r19	; 0x800307 <speedRun0+0x1>
    1428:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <speedRun0>
    142c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <angle0+0x1>
    1430:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <angle0>
    1434:	30 93 35 03 	sts	0x0335, r19	; 0x800335 <speedRun1+0x1>
    1438:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <speedRun1>
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <angle1+0x1>
    1444:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <angle1>
    1448:	41 e6       	ldi	r20, 0x61	; 97
    144a:	42 9f       	mul	r20, r18
    144c:	c0 01       	movw	r24, r0
    144e:	43 9f       	mul	r20, r19
    1450:	90 0d       	add	r25, r0
    1452:	11 24       	eor	r1, r1
    1454:	e4 e6       	ldi	r30, 0x64	; 100
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	bf 01       	movw	r22, r30
    145a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    145e:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <speedRun2+0x1>
    1462:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <speedRun2>
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <angle2+0x1>
    146e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <angle2>
    1472:	48 e5       	ldi	r20, 0x58	; 88
    1474:	42 9f       	mul	r20, r18
    1476:	c0 01       	movw	r24, r0
    1478:	43 9f       	mul	r20, r19
    147a:	90 0d       	add	r25, r0
    147c:	11 24       	eor	r1, r1
    147e:	bf 01       	movw	r22, r30
    1480:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    1484:	70 93 4d 03 	sts	0x034D, r23	; 0x80034d <speedRun3+0x1>
    1488:	60 93 4c 03 	sts	0x034C, r22	; 0x80034c <speedRun3>
    148c:	85 e0       	ldi	r24, 0x05	; 5
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <angle3+0x1>
    1494:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <angle3>
    1498:	46 e5       	ldi	r20, 0x56	; 86
    149a:	42 9f       	mul	r20, r18
    149c:	c0 01       	movw	r24, r0
    149e:	43 9f       	mul	r20, r19
    14a0:	90 0d       	add	r25, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	bf 01       	movw	r22, r30
    14a6:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    14aa:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <speedRun4+0x1>
    14ae:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <speedRun4>
    14b2:	88 e0       	ldi	r24, 0x08	; 8
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <angle4+0x1>
    14ba:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <angle4>
    14be:	43 e5       	ldi	r20, 0x53	; 83
    14c0:	42 9f       	mul	r20, r18
    14c2:	c0 01       	movw	r24, r0
    14c4:	43 9f       	mul	r20, r19
    14c6:	90 0d       	add	r25, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	bf 01       	movw	r22, r30
    14cc:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    14d0:	70 93 15 03 	sts	0x0315, r23	; 0x800315 <speedRun5+0x1>
    14d4:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <speedRun5>
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angle5+0x1>
    14e0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angle5>
    14e4:	4e e4       	ldi	r20, 0x4E	; 78
    14e6:	42 9f       	mul	r20, r18
    14e8:	c0 01       	movw	r24, r0
    14ea:	43 9f       	mul	r20, r19
    14ec:	90 0d       	add	r25, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	bf 01       	movw	r22, r30
    14f2:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    14f6:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <speedRun6+0x1>
    14fa:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <speedRun6>
    14fe:	8d e0       	ldi	r24, 0x0D	; 13
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <angle6+0x1>
    1506:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <angle6>
    150a:	4b e4       	ldi	r20, 0x4B	; 75
    150c:	42 9f       	mul	r20, r18
    150e:	c0 01       	movw	r24, r0
    1510:	43 9f       	mul	r20, r19
    1512:	90 0d       	add	r25, r0
    1514:	11 24       	eor	r1, r1
    1516:	bf 01       	movw	r22, r30
    1518:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    151c:	70 93 4b 03 	sts	0x034B, r23	; 0x80034b <speedRun7+0x1>
    1520:	60 93 4a 03 	sts	0x034A, r22	; 0x80034a <speedRun7>
    1524:	81 e1       	ldi	r24, 0x11	; 17
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <angle7+0x1>
    152c:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <angle7>
    1530:	08 95       	ret

00001532 <checkCrossLine>:
    1532:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <sensor>
    1536:	93 7c       	andi	r25, 0xC3	; 195
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	93 3c       	cpi	r25, 0xC3	; 195
    153c:	09 f0       	breq	.+2      	; 0x1540 <checkCrossLine+0xe>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	08 95       	ret

00001542 <checkCrossHalfLine>:
    1542:	f7 df       	rcall	.-18     	; 0x1532 <checkCrossLine>
    1544:	81 11       	cpse	r24, r1
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <checkCrossHalfLine+0x20>
    1548:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    154c:	98 2f       	mov	r25, r24
    154e:	90 7f       	andi	r25, 0xF0	; 240
    1550:	90 3f       	cpi	r25, 0xF0	; 240
    1552:	49 f0       	breq	.+18     	; 0x1566 <checkCrossHalfLine+0x24>
    1554:	98 2f       	mov	r25, r24
    1556:	9f 70       	andi	r25, 0x0F	; 15
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	9f 30       	cpi	r25, 0x0F	; 15
    155c:	29 f0       	breq	.+10     	; 0x1568 <checkCrossHalfLine+0x26>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	08 95       	ret
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	08 95       	ret
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	08 95       	ret

0000156a <handleAndSpeed>:
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
    1574:	8b 01       	movw	r16, r22
    1576:	a8 d9       	rcall	.-3248   	; 0x8c8 <handle>
    1578:	dd 23       	and	r29, r29
    157a:	14 f5       	brge	.+68     	; 0x15c0 <handleAndSpeed+0x56>
    157c:	d1 95       	neg	r29
    157e:	c1 95       	neg	r28
    1580:	d1 09       	sbc	r29, r1
    1582:	fe 01       	movw	r30, r28
    1584:	e0 5f       	subi	r30, 0xF0	; 240
    1586:	fd 4f       	sbci	r31, 0xFD	; 253
    1588:	20 81       	ld	r18, Z
    158a:	20 9f       	mul	r18, r16
    158c:	c0 01       	movw	r24, r0
    158e:	21 9f       	mul	r18, r17
    1590:	90 0d       	add	r25, r0
    1592:	11 24       	eor	r1, r1
    1594:	24 e6       	ldi	r18, 0x64	; 100
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	b9 01       	movw	r22, r18
    159a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    159e:	fb 01       	movw	r30, r22
    15a0:	ce 5b       	subi	r28, 0xBE	; 190
    15a2:	dd 4f       	sbci	r29, 0xFD	; 253
    15a4:	48 81       	ld	r20, Y
    15a6:	40 9f       	mul	r20, r16
    15a8:	c0 01       	movw	r24, r0
    15aa:	41 9f       	mul	r20, r17
    15ac:	90 0d       	add	r25, r0
    15ae:	11 24       	eor	r1, r1
    15b0:	b9 01       	movw	r22, r18
    15b2:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    15b6:	cb 01       	movw	r24, r22
    15b8:	bf 01       	movw	r22, r30
    15ba:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
    15be:	25 c0       	rjmp	.+74     	; 0x160a <handleAndSpeed+0xa0>
    15c0:	20 97       	sbiw	r28, 0x00	; 0
    15c2:	29 f4       	brne	.+10     	; 0x15ce <handleAndSpeed+0x64>
    15c4:	b8 01       	movw	r22, r16
    15c6:	c8 01       	movw	r24, r16
    15c8:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
    15cc:	1e c0       	rjmp	.+60     	; 0x160a <handleAndSpeed+0xa0>
    15ce:	fe 01       	movw	r30, r28
    15d0:	ee 5b       	subi	r30, 0xBE	; 190
    15d2:	fd 4f       	sbci	r31, 0xFD	; 253
    15d4:	20 81       	ld	r18, Z
    15d6:	20 9f       	mul	r18, r16
    15d8:	c0 01       	movw	r24, r0
    15da:	21 9f       	mul	r18, r17
    15dc:	90 0d       	add	r25, r0
    15de:	11 24       	eor	r1, r1
    15e0:	24 e6       	ldi	r18, 0x64	; 100
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	b9 01       	movw	r22, r18
    15e6:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    15ea:	fb 01       	movw	r30, r22
    15ec:	c0 5f       	subi	r28, 0xF0	; 240
    15ee:	dd 4f       	sbci	r29, 0xFD	; 253
    15f0:	48 81       	ld	r20, Y
    15f2:	40 9f       	mul	r20, r16
    15f4:	c0 01       	movw	r24, r0
    15f6:	41 9f       	mul	r20, r17
    15f8:	90 0d       	add	r25, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	b9 01       	movw	r22, r18
    15fe:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    1602:	cb 01       	movw	r24, r22
    1604:	bf 01       	movw	r22, r30
    1606:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	08 95       	ret

00001614 <handleAndSpeedMicro>:
		break;
	}
}
void handleAndSpeedMicro (int angle,int speed1)
{
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	ec 01       	movw	r28, r24
    161e:	8b 01       	movw	r16, r22
	int speed2;
	int speed3;
	handleMicro(angle);
    1620:	65 d9       	rcall	.-3382   	; 0x8ec <handleMicro>
	if (angle<0){
    1622:	dd 23       	and	r29, r29
    1624:	4c f5       	brge	.+82     	; 0x1678 <handleAndSpeedMicro+0x64>
		angle = -angle;
		speed2 = speed1*coeffR1[angle/10]/100;
    1626:	88 27       	eor	r24, r24
    1628:	99 27       	eor	r25, r25
    162a:	8c 1b       	sub	r24, r28
    162c:	9d 0b       	sbc	r25, r29
    162e:	6a e0       	ldi	r22, 0x0A	; 10
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    1636:	9b 01       	movw	r18, r22
		speed3 = speed1*coeffR3[angle/10]/100;
    1638:	fb 01       	movw	r30, r22
    163a:	e0 5f       	subi	r30, 0xF0	; 240
    163c:	fd 4f       	sbci	r31, 0xFD	; 253
		speed (speed2,speed3);
    163e:	40 81       	ld	r20, Z
    1640:	40 9f       	mul	r20, r16
    1642:	c0 01       	movw	r24, r0
    1644:	41 9f       	mul	r20, r17
    1646:	90 0d       	add	r25, r0
    1648:	11 24       	eor	r1, r1
    164a:	e4 e6       	ldi	r30, 0x64	; 100
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	bf 01       	movw	r22, r30
    1650:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    1654:	eb 01       	movw	r28, r22
	int speed2;
	int speed3;
	handleMicro(angle);
	if (angle<0){
		angle = -angle;
		speed2 = speed1*coeffR1[angle/10]/100;
    1656:	d9 01       	movw	r26, r18
    1658:	ae 5b       	subi	r26, 0xBE	; 190
    165a:	bd 4f       	sbci	r27, 0xFD	; 253
		speed3 = speed1*coeffR3[angle/10]/100;
		speed (speed2,speed3);
    165c:	2c 91       	ld	r18, X
    165e:	20 9f       	mul	r18, r16
    1660:	c0 01       	movw	r24, r0
    1662:	21 9f       	mul	r18, r17
    1664:	90 0d       	add	r25, r0
    1666:	11 24       	eor	r1, r1
    1668:	bf 01       	movw	r22, r30
    166a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    166e:	cb 01       	movw	r24, r22
    1670:	be 01       	movw	r22, r28
    1672:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
    1676:	2c c0       	rjmp	.+88     	; 0x16d0 <handleAndSpeedMicro+0xbc>
	}
	else if (angle == 0 )
    1678:	20 97       	sbiw	r28, 0x00	; 0
    167a:	29 f4       	brne	.+10     	; 0x1686 <handleAndSpeedMicro+0x72>
	{
		speed (speed1,speed1);
    167c:	b8 01       	movw	r22, r16
    167e:	c8 01       	movw	r24, r16
    1680:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
    1684:	25 c0       	rjmp	.+74     	; 0x16d0 <handleAndSpeedMicro+0xbc>
	}
	else {
		speed2 = speed1*coeffR1[angle/10]/100;
    1686:	ce 01       	movw	r24, r28
    1688:	6a e0       	ldi	r22, 0x0A	; 10
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    1690:	9b 01       	movw	r18, r22
    1692:	fb 01       	movw	r30, r22
    1694:	ee 5b       	subi	r30, 0xBE	; 190
    1696:	fd 4f       	sbci	r31, 0xFD	; 253
		speed3 = speed1*coeffR3[angle/10]/100;
		speed (speed3,speed2);
    1698:	40 81       	ld	r20, Z
    169a:	40 9f       	mul	r20, r16
    169c:	c0 01       	movw	r24, r0
    169e:	41 9f       	mul	r20, r17
    16a0:	90 0d       	add	r25, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	e4 e6       	ldi	r30, 0x64	; 100
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	bf 01       	movw	r22, r30
    16aa:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    16ae:	eb 01       	movw	r28, r22
	{
		speed (speed1,speed1);
	}
	else {
		speed2 = speed1*coeffR1[angle/10]/100;
		speed3 = speed1*coeffR3[angle/10]/100;
    16b0:	d9 01       	movw	r26, r18
    16b2:	a0 5f       	subi	r26, 0xF0	; 240
    16b4:	bd 4f       	sbci	r27, 0xFD	; 253
		speed (speed3,speed2);
    16b6:	2c 91       	ld	r18, X
    16b8:	20 9f       	mul	r18, r16
    16ba:	c0 01       	movw	r24, r0
    16bc:	21 9f       	mul	r18, r17
    16be:	90 0d       	add	r25, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	bf 01       	movw	r22, r30
    16c4:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__divmodhi4>
    16c8:	cb 01       	movw	r24, r22
    16ca:	be 01       	movw	r22, r28
    16cc:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
	}
}
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

000016da <runForwardLine>:
		speed (speed3,speed2);
	}
}
void runForwardLine (int speedRun)
{
	switch(sensor) {
    16da:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	81 3f       	cpi	r24, 0xF1	; 241
    16e2:	91 05       	cpc	r25, r1
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <runForwardLine+0xe>
    16e6:	27 c2       	rjmp	.+1102   	; 0x1b36 <runForwardLine+0x45c>
    16e8:	fc 01       	movw	r30, r24
    16ea:	88 27       	eor	r24, r24
    16ec:	e5 58       	subi	r30, 0x85	; 133
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	8f 4f       	sbci	r24, 0xFF	; 255
    16f2:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__tablejump2__>
		case 0x18:// 00011000
		case 0x3c:// 00111100
		handleAndSpeed(angle0,speedRun0);
    16f6:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <speedRun0>
    16fa:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <speedRun0+0x1>
    16fe:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <angle0>
    1702:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <angle0+0x1>
    1706:	31 df       	rcall	.-414    	; 0x156a <handleAndSpeed>
		curveFlag = 0;
    1708:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = 0;
    170c:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <sensorPos>
		straightLine = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
    1716:	08 95       	ret
		case 0x1C:// 00011100
		case 0x08:// 00001000
		if ( sensorPos < -3)
    1718:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    171c:	8d 3f       	cpi	r24, 0xFD	; 253
    171e:	34 f4       	brge	.+12     	; 0x172c <runForwardLine+0x52>
		{
			handleAndSpeed (-30,0);
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	82 ee       	ldi	r24, 0xE2	; 226
    1726:	9f ef       	ldi	r25, 0xFF	; 255
    1728:	20 cf       	rjmp	.-448    	; 0x156a <handleAndSpeed>
			break;
    172a:	08 95       	ret
		}
		else
		handleAndSpeed(angle1,speedRun1);
    172c:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <speedRun1>
    1730:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <speedRun1+0x1>
    1734:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <angle1>
    1738:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <angle1+0x1>
    173c:	16 df       	rcall	.-468    	; 0x156a <handleAndSpeed>
		curveFlag = 0;
    173e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 1;
    1748:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
    174c:	08 95       	ret
		case 0x0c:// 00001100
		case 0x1e:// 00011110
		if ( sensorPos < -3)
    174e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1752:	8d 3f       	cpi	r24, 0xFD	; 253
    1754:	34 f4       	brge	.+12     	; 0x1762 <runForwardLine+0x88>
		{
			handleAndSpeed(-30,0);
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	82 ee       	ldi	r24, 0xE2	; 226
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	05 cf       	rjmp	.-502    	; 0x156a <handleAndSpeed>
			break;
    1760:	08 95       	ret
		}
		else
		handleAndSpeed(angle2,speedRun2);
    1762:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <speedRun2>
    1766:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <speedRun2+0x1>
    176a:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <angle2>
    176e:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <angle2+0x1>
    1772:	fb de       	rcall	.-522    	; 0x156a <handleAndSpeed>
		curveFlag = 0;
    1774:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = 2;
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
    1784:	08 95       	ret
		case 0x04:// 00000100
		case 0x0e:// 00001110
		if ( sensorPos < -3)
    1786:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    178a:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    178c:	34 f4       	brge	.+12     	; 0x179a <runForwardLine+0xc0>
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	82 ee       	ldi	r24, 0xE2	; 226
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	e9 ce       	rjmp	.-558    	; 0x156a <handleAndSpeed>
			break;
    1798:	08 95       	ret
		}
		else if (brakeCurve > 11)
    179a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    179e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    17a2:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(7);
    17a4:	50 f0       	brcs	.+20     	; 0x17ba <runForwardLine+0xe0>
    17a6:	87 e0       	ldi	r24, 0x07	; 7
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	8e d8       	rcall	.-3812   	; 0x8c8 <handle>
			speed(-20,-20);
    17ac:	6c ee       	ldi	r22, 0xEC	; 236
    17ae:	7f ef       	ldi	r23, 0xFF	; 255
    17b0:	8c ee       	ldi	r24, 0xEC	; 236
    17b2:	9f ef       	ldi	r25, 0xFF	; 255
    17b4:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <runForwardLine+0xf2>
		}
		else
		handleAndSpeed(angle3,speedRun3);
    17ba:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <speedRun3>
    17be:	70 91 4d 03 	lds	r23, 0x034D	; 0x80034d <speedRun3+0x1>
    17c2:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <angle3>
    17c6:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <angle3+0x1>
    17ca:	cf de       	rcall	.-610    	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 3;
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    17d8:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
    17dc:	08 95       	ret
		case 0x06:// 00000110
		if ( sensorPos < -3)
    17de:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    17e2:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    17e4:	34 f4       	brge	.+12     	; 0x17f2 <runForwardLine+0x118>
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	82 ee       	ldi	r24, 0xE2	; 226
    17ec:	9f ef       	ldi	r25, 0xFF	; 255
    17ee:	bd ce       	rjmp	.-646    	; 0x156a <handleAndSpeed>
			break;
		}
		else if (brakeCurve > 11)
    17f0:	08 95       	ret
    17f2:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    17f6:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    17fa:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    17fc:	50 f0       	brcs	.+20     	; 0x1812 <runForwardLine+0x138>
    17fe:	8f e0       	ldi	r24, 0x0F	; 15
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	62 d8       	rcall	.-3900   	; 0x8c8 <handle>
			speed(-20,-20);
    1804:	6c ee       	ldi	r22, 0xEC	; 236
    1806:	7f ef       	ldi	r23, 0xFF	; 255
    1808:	8c ee       	ldi	r24, 0xEC	; 236
    180a:	9f ef       	ldi	r25, 0xFF	; 255
    180c:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
    1810:	09 c0       	rjmp	.+18     	; 0x1824 <runForwardLine+0x14a>
		}
		else
		handleAndSpeed(angle4,speedRun4);
    1812:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <speedRun4>
    1816:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <speedRun4+0x1>
    181a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle4>
    181e:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle4+0x1>
    1822:	a3 de       	rcall	.-698    	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 4;
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    1830:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x02:// 00000010
		case 0x07:// 00000111
		if ( sensorPos < -3)
    1834:	08 95       	ret
    1836:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    183a:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    183c:	34 f4       	brge	.+12     	; 0x184a <runForwardLine+0x170>
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	82 ee       	ldi	r24, 0xE2	; 226
    1844:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1846:	91 ce       	rjmp	.-734    	; 0x156a <handleAndSpeed>
		}
		else if (brakeCurve > 11)
    1848:	08 95       	ret
    184a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    184e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    1852:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    1854:	50 f0       	brcs	.+20     	; 0x186a <runForwardLine+0x190>
    1856:	8f e0       	ldi	r24, 0x0F	; 15
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	36 d8       	rcall	.-3988   	; 0x8c8 <handle>
			speed(-20,-20);
    185c:	6c ee       	ldi	r22, 0xEC	; 236
    185e:	7f ef       	ldi	r23, 0xFF	; 255
    1860:	8c ee       	ldi	r24, 0xEC	; 236
    1862:	9f ef       	ldi	r25, 0xFF	; 255
    1864:	0e 94 92 14 	call	0x2924	; 0x2924 <speed>
		}
		else
		handleAndSpeed(angle5,speedRun5);
    1868:	09 c0       	rjmp	.+18     	; 0x187c <runForwardLine+0x1a2>
    186a:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <speedRun5>
    186e:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <speedRun5+0x1>
    1872:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angle5>
    1876:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angle5+0x1>
    187a:	77 de       	rcall	.-786    	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 5;
    1882:	85 e0       	ldi	r24, 0x05	; 5
    1884:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    1888:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x03:// 00000011
		if ( sensorPos < -3)
    188c:	08 95       	ret
    188e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1892:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1894:	34 f4       	brge	.+12     	; 0x18a2 <runForwardLine+0x1c8>
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	82 ee       	ldi	r24, 0xE2	; 226
    189c:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    189e:	65 ce       	rjmp	.-822    	; 0x156a <handleAndSpeed>
		}
		else
		handleAndSpeed(angle6,speedRun6);
    18a0:	08 95       	ret
    18a2:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <speedRun6>
    18a6:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <speedRun6+0x1>
    18aa:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <angle6>
    18ae:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <angle6+0x1>
    18b2:	5b de       	rcall	.-842    	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 6;
    18ba:	86 e0       	ldi	r24, 0x06	; 6
    18bc:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    18c0:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x01:// 00000001
		if ( sensorPos < -3)
    18c4:	08 95       	ret
    18c6:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    18ca:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    18cc:	34 f4       	brge	.+12     	; 0x18da <runForwardLine+0x200>
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	82 ee       	ldi	r24, 0xE2	; 226
    18d4:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    18d6:	49 ce       	rjmp	.-878    	; 0x156a <handleAndSpeed>
		}
		handleAndSpeed(angle7,speedRun7);
    18d8:	08 95       	ret
    18da:	60 91 4a 03 	lds	r22, 0x034A	; 0x80034a <speedRun7>
    18de:	70 91 4b 03 	lds	r23, 0x034B	; 0x80034b <speedRun7+0x1>
    18e2:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <angle7>
    18e6:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <angle7+0x1>
    18ea:	3f de       	rcall	.-898    	; 0x156a <handleAndSpeed>
		curveFlag = 1;   //RYGB(0,0,0,0);
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		straightLine = 0;
    18f2:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		sensorPos = 6;
    18f6:	86 e0       	ldi	r24, 0x06	; 6
    18f8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		break;
		case 0x81:// 10000001
		case 0xc1:// 11000001
		case 0x00:// 00000000
		case 0x83:// 10000011
		if ( sensorPos < -4)
    18fc:	08 95       	ret
    18fe:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(-30,0);
    1902:	8c 3f       	cpi	r24, 0xFC	; 252
    1904:	34 f4       	brge	.+12     	; 0x1912 <runForwardLine+0x238>
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	82 ee       	ldi	r24, 0xE2	; 226
    190c:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    190e:	2d ce       	rjmp	.-934    	; 0x156a <handleAndSpeed>
		}
		else if ( sensorPos > 4)
    1910:	08 95       	ret
    1912:	85 30       	cpi	r24, 0x05	; 5
		{
			handleAndSpeed(30,0);
    1914:	0c f4       	brge	.+2      	; 0x1918 <runForwardLine+0x23e>
    1916:	17 c1       	rjmp	.+558    	; 0x1b46 <runForwardLine+0x46c>
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	8e e1       	ldi	r24, 0x1E	; 30
    191e:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1920:	24 ce       	rjmp	.-952    	; 0x156a <handleAndSpeed>
		}
		break;
		case 0x10:// 00010000
		case 0x38:// 00111000
		if ( sensorPos > 3)
    1922:	08 95       	ret
    1924:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1928:	84 30       	cpi	r24, 0x04	; 4
		{
			handleAndSpeed(30,0);
    192a:	34 f0       	brlt	.+12     	; 0x1938 <runForwardLine+0x25e>
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	8e e1       	ldi	r24, 0x1E	; 30
    1932:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1934:	1a ce       	rjmp	.-972    	; 0x156a <handleAndSpeed>
		}
		else
		handleAndSpeedMicro (-angle1,speedRun1);
    1936:	08 95       	ret
    1938:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <speedRun1>
    193c:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <speedRun1+0x1>
    1940:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <angle1>
    1944:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <angle1+0x1>
    1948:	91 95       	neg	r25
    194a:	81 95       	neg	r24
    194c:	91 09       	sbc	r25, r1
		curveFlag = 0;
    194e:	62 de       	rcall	.-828    	; 0x1614 <handleAndSpeedMicro>
    1950:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = -1;
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
		case 0x30:// 00110000
		case 0x78:// 01111000
		if ( sensorPos > 3)
    1960:	08 95       	ret
    1962:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	34 f0       	brlt	.+12     	; 0x1976 <runForwardLine+0x29c>
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	8e e1       	ldi	r24, 0x1E	; 30
    1970:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1972:	fb cd       	rjmp	.-1034   	; 0x156a <handleAndSpeed>
		}
		else
		handleAndSpeed(-angle2,speedRun2);
    1974:	08 95       	ret
    1976:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <speedRun2>
    197a:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <speedRun2+0x1>
    197e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <angle2>
    1982:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <angle2+0x1>
    1986:	91 95       	neg	r25
    1988:	81 95       	neg	r24
    198a:	91 09       	sbc	r25, r1
		curveFlag = 0;
    198c:	ee dd       	rcall	.-1060   	; 0x156a <handleAndSpeed>
    198e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = -2;
    1992:	8e ef       	ldi	r24, 0xFE	; 254
    1994:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
		case 0x20:// 00100000
		case 0x70:// 01110000
		if ( sensorPos > 3)
    199e:	08 95       	ret
    19a0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    19a4:	84 30       	cpi	r24, 0x04	; 4
    19a6:	34 f0       	brlt	.+12     	; 0x19b4 <runForwardLine+0x2da>
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	8e e1       	ldi	r24, 0x1E	; 30
    19ae:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19b0:	dc cd       	rjmp	.-1096   	; 0x156a <handleAndSpeed>
		}
		else if (brakeCurve > 11)
    19b2:	08 95       	ret
    19b4:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    19b8:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    19bc:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(-7);
    19be:	50 f0       	brcs	.+20     	; 0x19d4 <runForwardLine+0x2fa>
    19c0:	89 ef       	ldi	r24, 0xF9	; 249
    19c2:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    19c4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    19c8:	6c ee       	ldi	r22, 0xEC	; 236
    19ca:	7f ef       	ldi	r23, 0xFF	; 255
    19cc:	8c ee       	ldi	r24, 0xEC	; 236
    19ce:	9f ef       	ldi	r25, 0xFF	; 255
    19d0:	a9 d7       	rcall	.+3922   	; 0x2924 <speed>
		}
		else
		handleAndSpeed(-angle3,speedRun3);
    19d2:	0c c0       	rjmp	.+24     	; 0x19ec <runForwardLine+0x312>
    19d4:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <speedRun3>
    19d8:	70 91 4d 03 	lds	r23, 0x034D	; 0x80034d <speedRun3+0x1>
    19dc:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <angle3>
    19e0:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <angle3+0x1>
    19e4:	91 95       	neg	r25
    19e6:	81 95       	neg	r24
    19e8:	91 09       	sbc	r25, r1
		curveFlag = 1;
    19ea:	bf dd       	rcall	.-1154   	; 0x156a <handleAndSpeed>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = -3;
    19f2:	8d ef       	ldi	r24, 0xFD	; 253
    19f4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    19f8:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x60:// 01100000
		if ( sensorPos > 3)
    19fc:	08 95       	ret
    19fe:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1a02:	84 30       	cpi	r24, 0x04	; 4
    1a04:	34 f0       	brlt	.+12     	; 0x1a12 <runForwardLine+0x338>
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	8e e1       	ldi	r24, 0x1E	; 30
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a0e:	ad cd       	rjmp	.-1190   	; 0x156a <handleAndSpeed>
		}
		else if (brakeCurve > 11)
    1a10:	08 95       	ret
    1a12:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1a16:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
		{
			handle(-15);
    1a1a:	0c 97       	sbiw	r24, 0x0c	; 12
    1a1c:	50 f0       	brcs	.+20     	; 0x1a32 <runForwardLine+0x358>
    1a1e:	81 ef       	ldi	r24, 0xF1	; 241
    1a20:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    1a22:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1a26:	6c ee       	ldi	r22, 0xEC	; 236
    1a28:	7f ef       	ldi	r23, 0xFF	; 255
    1a2a:	8c ee       	ldi	r24, 0xEC	; 236
    1a2c:	9f ef       	ldi	r25, 0xFF	; 255
    1a2e:	7a d7       	rcall	.+3828   	; 0x2924 <speed>
		}
		else
		handleAndSpeed(-angle4,speedRun4);
    1a30:	0c c0       	rjmp	.+24     	; 0x1a4a <runForwardLine+0x370>
    1a32:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <speedRun4>
    1a36:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <speedRun4+0x1>
    1a3a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle4>
    1a3e:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle4+0x1>
    1a42:	91 95       	neg	r25
    1a44:	81 95       	neg	r24
    1a46:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1a48:	90 dd       	rcall	.-1248   	; 0x156a <handleAndSpeed>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = -4;
    1a50:	8c ef       	ldi	r24, 0xFC	; 252
    1a52:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
		break;
    1a56:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		case 0x40:// 01000000
		case 0xe0:// 11100000
		if ( sensorPos > 3)
    1a5a:	08 95       	ret
    1a5c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	34 f0       	brlt	.+12     	; 0x1a70 <runForwardLine+0x396>
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	8e e1       	ldi	r24, 0x1E	; 30
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a6c:	7e cd       	rjmp	.-1284   	; 0x156a <handleAndSpeed>
		}
		else if (brakeCurve > 11)
    1a6e:	08 95       	ret
    1a70:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1a74:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
		{
			handle(-15);
    1a78:	0c 97       	sbiw	r24, 0x0c	; 12
    1a7a:	50 f0       	brcs	.+20     	; 0x1a90 <runForwardLine+0x3b6>
    1a7c:	81 ef       	ldi	r24, 0xF1	; 241
    1a7e:	9f ef       	ldi	r25, 0xFF	; 255
			speed(0,0);
    1a80:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	4b d7       	rcall	.+3734   	; 0x2924 <speed>
		}
		else
		handleAndSpeed(-angle5,speedRun5);
    1a8e:	0c c0       	rjmp	.+24     	; 0x1aa8 <runForwardLine+0x3ce>
    1a90:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <speedRun5>
    1a94:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <speedRun5+0x1>
    1a98:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angle5>
    1a9c:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angle5+0x1>
    1aa0:	91 95       	neg	r25
    1aa2:	81 95       	neg	r24
    1aa4:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1aa6:	61 dd       	rcall	.-1342   	; 0x156a <handleAndSpeed>
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -5;
    1aaa:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
    1aae:	8b ef       	ldi	r24, 0xFB	; 251
		straightLine = 0;
    1ab0:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		break;
    1ab4:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		case 0xc0:// 11000000
		if ( sensorPos > 3)
    1ab8:	08 95       	ret
    1aba:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	34 f0       	brlt	.+12     	; 0x1ace <runForwardLine+0x3f4>
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	8e e1       	ldi	r24, 0x1E	; 30
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		else
		handleAndSpeed(-angle6,speedRun6);
    1aca:	4f cd       	rjmp	.-1378   	; 0x156a <handleAndSpeed>
    1acc:	08 95       	ret
    1ace:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <speedRun6>
    1ad2:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <speedRun6+0x1>
    1ad6:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <angle6>
    1ada:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <angle6+0x1>
    1ade:	91 95       	neg	r25
    1ae0:	81 95       	neg	r24
		curveFlag = 1;
    1ae2:	91 09       	sbc	r25, r1
    1ae4:	42 dd       	rcall	.-1404   	; 0x156a <handleAndSpeed>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -6;
    1ae8:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
    1aec:	8a ef       	ldi	r24, 0xFA	; 250
		straightLine = 0;
    1aee:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		break;
    1af2:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		case 0x80:// 10000000
		if ( sensorPos > 3)
    1af6:	08 95       	ret
    1af8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	34 f0       	brlt	.+12     	; 0x1b0c <runForwardLine+0x432>
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1b06:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle7,speedRun7);
    1b08:	30 cd       	rjmp	.-1440   	; 0x156a <handleAndSpeed>
    1b0a:	08 95       	ret
    1b0c:	60 91 4a 03 	lds	r22, 0x034A	; 0x80034a <speedRun7>
    1b10:	70 91 4b 03 	lds	r23, 0x034B	; 0x80034b <speedRun7+0x1>
    1b14:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <angle7>
    1b18:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <angle7+0x1>
    1b1c:	91 95       	neg	r25
    1b1e:	81 95       	neg	r24
    1b20:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1b22:	23 dd       	rcall	.-1466   	; 0x156a <handleAndSpeed>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = -6;
    1b2a:	8a ef       	ldi	r24, 0xFA	; 250
    1b2c:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    1b30:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x0f: break;
		case 0xf0: break;
		default:
		straightLine = 1;
    1b34:	08 95       	ret
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		speed(0,0);
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	ef c6       	rjmp	.+3550   	; 0x2924 <speed>
    1b46:	08 95       	ret

00001b48 <runForwardLine90>:
		break;
	}
}
void runForwardLine90 (int speedRun90)
{
    1b48:	bc 01       	movw	r22, r24
	switch(sensor) {
    1b4a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	81 3f       	cpi	r24, 0xF1	; 241
    1b52:	91 05       	cpc	r25, r1
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <runForwardLine90+0x10>
    1b56:	eb c1       	rjmp	.+982    	; 0x1f2e <runForwardLine90+0x3e6>
    1b58:	fc 01       	movw	r30, r24
    1b5a:	88 27       	eor	r24, r24
    1b5c:	e4 59       	subi	r30, 0x94	; 148
    1b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b60:	8f 4f       	sbci	r24, 0xFF	; 255
    1b62:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__tablejump2__>
		case 0x18:// 00011000
		case 0x3c:// 00111100
		handleAndSpeed(angle0,speedRun90);
    1b66:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <angle0>
    1b6a:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <angle0+0x1>
    1b6e:	fd dc       	rcall	.-1542   	; 0x156a <handleAndSpeed>
		curveFlag = 0;
    1b70:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = 0;
    1b74:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <sensorPos>
		straightLine = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
    1b7e:	08 95       	ret
		case 0x1C:// 00011100
		case 0x08:// 00001000
		if ( sensorPos < -3)
    1b80:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1b84:	8d 3f       	cpi	r24, 0xFD	; 253
    1b86:	34 f4       	brge	.+12     	; 0x1b94 <runForwardLine90+0x4c>
		{
			handleAndSpeed (-30,0);
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	82 ee       	ldi	r24, 0xE2	; 226
    1b8e:	9f ef       	ldi	r25, 0xFF	; 255
    1b90:	ec cc       	rjmp	.-1576   	; 0x156a <handleAndSpeed>
			break;
    1b92:	08 95       	ret
		}
		else
		handleAndSpeed(angle1,speedRun90);
    1b94:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <angle1>
    1b98:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <angle1+0x1>
    1b9c:	e6 dc       	rcall	.-1588   	; 0x156a <handleAndSpeed>
		curveFlag = 0;
    1b9e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 1;
    1ba8:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
    1bac:	08 95       	ret
		case 0x0c:// 00001100
		case 0x1e:// 00011110
		if ( sensorPos < -3)
    1bae:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1bb2:	8d 3f       	cpi	r24, 0xFD	; 253
    1bb4:	34 f4       	brge	.+12     	; 0x1bc2 <runForwardLine90+0x7a>
		{
			handleAndSpeed(-30,0);
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	82 ee       	ldi	r24, 0xE2	; 226
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	d5 cc       	rjmp	.-1622   	; 0x156a <handleAndSpeed>
			break;
    1bc0:	08 95       	ret
		}
		else
		handleAndSpeed(angle2,speedRun90);
    1bc2:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <angle2>
    1bc6:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <angle2+0x1>
    1bca:	cf dc       	rcall	.-1634   	; 0x156a <handleAndSpeed>
		curveFlag = 0;
    1bcc:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = 2;
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
    1bdc:	08 95       	ret
		case 0x04:// 00000100
		case 0x0e:// 00001110
		if ( sensorPos < -3)
    1bde:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1be2:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1be4:	34 f4       	brge	.+12     	; 0x1bf2 <runForwardLine90+0xaa>
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	82 ee       	ldi	r24, 0xE2	; 226
    1bec:	9f ef       	ldi	r25, 0xFF	; 255
    1bee:	bd cc       	rjmp	.-1670   	; 0x156a <handleAndSpeed>
			break;
    1bf0:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1bf2:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1bf6:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    1bfa:	0c 97       	sbiw	r24, 0x0c	; 12
    1bfc:	50 f0       	brcs	.+20     	; 0x1c12 <runForwardLine90+0xca>
		{
			handle(7);
    1bfe:	87 e0       	ldi	r24, 0x07	; 7
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(-20,-20);
    1c06:	6c ee       	ldi	r22, 0xEC	; 236
    1c08:	7f ef       	ldi	r23, 0xFF	; 255
    1c0a:	8c ee       	ldi	r24, 0xEC	; 236
    1c0c:	9f ef       	ldi	r25, 0xFF	; 255
    1c0e:	8a d6       	rcall	.+3348   	; 0x2924 <speed>
		}
		else
		handleAndSpeed(angle3,speedRun90);
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <runForwardLine90+0xd4>
    1c12:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <angle3>
    1c16:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <angle3+0x1>
    1c1a:	a7 dc       	rcall	.-1714   	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 3;
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    1c28:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
    1c2c:	08 95       	ret
		case 0x06:// 00000110
		if ( sensorPos < -3)
    1c2e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1c32:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1c34:	34 f4       	brge	.+12     	; 0x1c42 <runForwardLine90+0xfa>
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	82 ee       	ldi	r24, 0xE2	; 226
    1c3c:	9f ef       	ldi	r25, 0xFF	; 255
    1c3e:	95 cc       	rjmp	.-1750   	; 0x156a <handleAndSpeed>
			break;
    1c40:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1c42:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1c46:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    1c4a:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    1c4c:	50 f0       	brcs	.+20     	; 0x1c62 <runForwardLine90+0x11a>
    1c4e:	8f e0       	ldi	r24, 0x0F	; 15
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(-20,-20);
    1c56:	6c ee       	ldi	r22, 0xEC	; 236
    1c58:	7f ef       	ldi	r23, 0xFF	; 255
    1c5a:	8c ee       	ldi	r24, 0xEC	; 236
    1c5c:	9f ef       	ldi	r25, 0xFF	; 255
    1c5e:	62 d6       	rcall	.+3268   	; 0x2924 <speed>
		}
		else
		handleAndSpeed(angle4,speedRun90);
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <runForwardLine90+0x124>
    1c62:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle4>
    1c66:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle4+0x1>
    1c6a:	7f dc       	rcall	.-1794   	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 4;
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    1c78:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x02:// 00000010
		case 0x07:// 00000111
		if ( sensorPos < -3)
    1c7c:	08 95       	ret
    1c7e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
    1c82:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1c84:	34 f4       	brge	.+12     	; 0x1c92 <runForwardLine90+0x14a>
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	82 ee       	ldi	r24, 0xE2	; 226
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	6d cc       	rjmp	.-1830   	; 0x156a <handleAndSpeed>
			break;
    1c90:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1c92:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1c96:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    1c9a:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    1c9c:	50 f0       	brcs	.+20     	; 0x1cb2 <runForwardLine90+0x16a>
    1c9e:	8f e0       	ldi	r24, 0x0F	; 15
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
			speed(-20,-20);
    1ca2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1ca6:	6c ee       	ldi	r22, 0xEC	; 236
    1ca8:	7f ef       	ldi	r23, 0xFF	; 255
    1caa:	8c ee       	ldi	r24, 0xEC	; 236
    1cac:	9f ef       	ldi	r25, 0xFF	; 255
    1cae:	3a d6       	rcall	.+3188   	; 0x2924 <speed>
		}
		else
		handleAndSpeed(angle5,speedRun90);
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <runForwardLine90+0x174>
    1cb2:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angle5>
    1cb6:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angle5+0x1>
    1cba:	57 dc       	rcall	.-1874   	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 5;
    1cc2:	85 e0       	ldi	r24, 0x05	; 5
    1cc4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    1cc8:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x03:// 00000011
		if ( sensorPos < -3)
    1ccc:	08 95       	ret
    1cce:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(-30,0);
    1cd2:	8d 3f       	cpi	r24, 0xFD	; 253
    1cd4:	34 f4       	brge	.+12     	; 0x1ce2 <runForwardLine90+0x19a>
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	82 ee       	ldi	r24, 0xE2	; 226
    1cdc:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1cde:	45 cc       	rjmp	.-1910   	; 0x156a <handleAndSpeed>
		}
		else
		handleAndSpeed(angle6,speedRun90);
    1ce0:	08 95       	ret
    1ce2:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <angle6>
    1ce6:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <angle6+0x1>
    1cea:	3f dc       	rcall	.-1922   	; 0x156a <handleAndSpeed>
		curveFlag = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = 6;
    1cf2:	86 e0       	ldi	r24, 0x06	; 6
    1cf4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
		break;
    1cf8:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		case 0x01:// 00000001
		if ( sensorPos < -3)
    1cfc:	08 95       	ret
    1cfe:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(-30,0);
    1d02:	8d 3f       	cpi	r24, 0xFD	; 253
    1d04:	34 f4       	brge	.+12     	; 0x1d12 <runForwardLine90+0x1ca>
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	82 ee       	ldi	r24, 0xE2	; 226
    1d0c:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1d0e:	2d cc       	rjmp	.-1958   	; 0x156a <handleAndSpeed>
		}
		handleAndSpeed(angle7,speedRun90);
    1d10:	08 95       	ret
    1d12:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <angle7>
    1d16:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <angle7+0x1>
		curveFlag = 1;   //RYGB(0,0,0,0);
    1d1a:	27 dc       	rcall	.-1970   	; 0x156a <handleAndSpeed>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		straightLine = 0;
    1d22:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		sensorPos = 6;
    1d26:	86 e0       	ldi	r24, 0x06	; 6
    1d28:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		break;
		case 0x81:// 10000001
		case 0xc1:// 11000001
		case 0x00:// 00000000
		case 0x83:// 10000011
		if ( sensorPos < -4)
    1d2c:	08 95       	ret
    1d2e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(-30,0);
    1d32:	8c 3f       	cpi	r24, 0xFC	; 252
    1d34:	34 f4       	brge	.+12     	; 0x1d42 <runForwardLine90+0x1fa>
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	82 ee       	ldi	r24, 0xE2	; 226
			break;
    1d3c:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else if ( sensorPos > 4)
    1d3e:	15 cc       	rjmp	.-2006   	; 0x156a <handleAndSpeed>
    1d40:	08 95       	ret
    1d42:	85 30       	cpi	r24, 0x05	; 5
		{
			handleAndSpeed(30,0);
    1d44:	0c f4       	brge	.+2      	; 0x1d48 <runForwardLine90+0x200>
    1d46:	fb c0       	rjmp	.+502    	; 0x1f3e <runForwardLine90+0x3f6>
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
		}
		break;
		case 0x10:// 00010000
		case 0x38:// 00111000
		if ( sensorPos > 3)
    1d50:	0c cc       	rjmp	.-2024   	; 0x156a <handleAndSpeed>
    1d52:	08 95       	ret
    1d54:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1d58:	84 30       	cpi	r24, 0x04	; 4
    1d5a:	34 f0       	brlt	.+12     	; 0x1d68 <runForwardLine90+0x220>
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	8e e1       	ldi	r24, 0x1E	; 30
    1d62:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1d64:	02 cc       	rjmp	.-2044   	; 0x156a <handleAndSpeed>
		}
		else
		handleAndSpeedMicro (-angle1,speedRun90);
    1d66:	08 95       	ret
    1d68:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <angle1>
    1d6c:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <angle1+0x1>
    1d70:	91 95       	neg	r25
    1d72:	81 95       	neg	r24
    1d74:	91 09       	sbc	r25, r1
		curveFlag = 0;
    1d76:	4e dc       	rcall	.-1892   	; 0x1614 <handleAndSpeedMicro>
    1d78:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = -1;
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
		straightLine = 1;
    1d7e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1d84:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		case 0x30:// 00110000
		case 0x78:// 01111000
		if ( sensorPos > 3)
    1d88:	08 95       	ret
    1d8a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1d8e:	84 30       	cpi	r24, 0x04	; 4
    1d90:	34 f0       	brlt	.+12     	; 0x1d9e <runForwardLine90+0x256>
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	8e e1       	ldi	r24, 0x1E	; 30
    1d98:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1d9a:	e7 cb       	rjmp	.-2098   	; 0x156a <handleAndSpeed>
		}
		else
		handleAndSpeed(-angle2,speedRun90);
    1d9c:	08 95       	ret
    1d9e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <angle2>
    1da2:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <angle2+0x1>
    1da6:	91 95       	neg	r25
    1da8:	81 95       	neg	r24
    1daa:	91 09       	sbc	r25, r1
		curveFlag = 0;
    1dac:	de db       	rcall	.-2116   	; 0x156a <handleAndSpeed>
    1dae:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <curveFlag>
		sensorPos = -2;
    1db2:	8e ef       	ldi	r24, 0xFE	; 254
    1db4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		break;
		case 0x20:// 00100000
		case 0x70:// 01110000
		if ( sensorPos > 3)
    1dbe:	08 95       	ret
    1dc0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1dc4:	84 30       	cpi	r24, 0x04	; 4
    1dc6:	34 f0       	brlt	.+12     	; 0x1dd4 <runForwardLine90+0x28c>
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1dce:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    1dd0:	cc cb       	rjmp	.-2152   	; 0x156a <handleAndSpeed>
    1dd2:	08 95       	ret
    1dd4:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1dd8:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
		{
			handle(-7);
    1ddc:	0c 97       	sbiw	r24, 0x0c	; 12
    1dde:	50 f0       	brcs	.+20     	; 0x1df4 <runForwardLine90+0x2ac>
    1de0:	89 ef       	ldi	r24, 0xF9	; 249
    1de2:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    1de4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1de8:	6c ee       	ldi	r22, 0xEC	; 236
    1dea:	7f ef       	ldi	r23, 0xFF	; 255
    1dec:	8c ee       	ldi	r24, 0xEC	; 236
    1dee:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else
		handleAndSpeed(-angle3,speedRun90);
    1df0:	99 d5       	rcall	.+2866   	; 0x2924 <speed>
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <runForwardLine90+0x2bc>
    1df4:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <angle3>
    1df8:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <angle3+0x1>
    1dfc:	91 95       	neg	r25
    1dfe:	81 95       	neg	r24
    1e00:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1e02:	b3 db       	rcall	.-2202   	; 0x156a <handleAndSpeed>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = -3;
    1e0a:	8d ef       	ldi	r24, 0xFD	; 253
    1e0c:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
		break;
    1e10:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		case 0x60:// 01100000
		if ( sensorPos > 3)
    1e14:	08 95       	ret
    1e16:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	34 f0       	brlt	.+12     	; 0x1e2a <runForwardLine90+0x2e2>
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1e24:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    1e26:	a1 cb       	rjmp	.-2238   	; 0x156a <handleAndSpeed>
    1e28:	08 95       	ret
    1e2a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1e2e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
		{
			handle(-15);
    1e32:	0c 97       	sbiw	r24, 0x0c	; 12
    1e34:	50 f0       	brcs	.+20     	; 0x1e4a <runForwardLine90+0x302>
    1e36:	81 ef       	ldi	r24, 0xF1	; 241
    1e38:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    1e3a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1e3e:	6c ee       	ldi	r22, 0xEC	; 236
    1e40:	7f ef       	ldi	r23, 0xFF	; 255
    1e42:	8c ee       	ldi	r24, 0xEC	; 236
    1e44:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else
		handleAndSpeed(-angle4,speedRun90);
    1e46:	6e d5       	rcall	.+2780   	; 0x2924 <speed>
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <runForwardLine90+0x312>
    1e4a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle4>
    1e4e:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle4+0x1>
    1e52:	91 95       	neg	r25
    1e54:	81 95       	neg	r24
    1e56:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1e58:	88 db       	rcall	.-2288   	; 0x156a <handleAndSpeed>
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = -4;
    1e60:	8c ef       	ldi	r24, 0xFC	; 252
		straightLine = 0;
    1e62:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		break;
    1e66:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		case 0x40:// 01000000
		case 0xe0:// 11100000
		if ( sensorPos > 3)
    1e6a:	08 95       	ret
    1e6c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	34 f0       	brlt	.+12     	; 0x1e80 <runForwardLine90+0x338>
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    1e7c:	76 cb       	rjmp	.-2324   	; 0x156a <handleAndSpeed>
    1e7e:	08 95       	ret
    1e80:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    1e84:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
		{
			handle(-15);
    1e88:	0c 97       	sbiw	r24, 0x0c	; 12
    1e8a:	50 f0       	brcs	.+20     	; 0x1ea0 <runForwardLine90+0x358>
    1e8c:	81 ef       	ldi	r24, 0xF1	; 241
    1e8e:	9f ef       	ldi	r25, 0xFF	; 255
			speed(0,0);
    1e90:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle5,speedRun90);
    1e9c:	43 d5       	rcall	.+2694   	; 0x2924 <speed>
    1e9e:	08 c0       	rjmp	.+16     	; 0x1eb0 <runForwardLine90+0x368>
    1ea0:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angle5>
    1ea4:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angle5+0x1>
    1ea8:	91 95       	neg	r25
    1eaa:	81 95       	neg	r24
		curveFlag = 1;
    1eac:	91 09       	sbc	r25, r1
    1eae:	5d db       	rcall	.-2374   	; 0x156a <handleAndSpeed>
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -5;
    1eb2:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
    1eb6:	8b ef       	ldi	r24, 0xFB	; 251
		straightLine = 0;
    1eb8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		break;
    1ebc:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		case 0xc0:// 11000000
		if ( sensorPos > 3)
    1ec0:	08 95       	ret
    1ec2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1ec6:	84 30       	cpi	r24, 0x04	; 4
    1ec8:	34 f0       	brlt	.+12     	; 0x1ed6 <runForwardLine90+0x38e>
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle6,speedRun90);
    1ed2:	4b cb       	rjmp	.-2410   	; 0x156a <handleAndSpeed>
    1ed4:	08 95       	ret
    1ed6:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <angle6>
    1eda:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <angle6+0x1>
    1ede:	91 95       	neg	r25
    1ee0:	81 95       	neg	r24
		curveFlag = 1;
    1ee2:	91 09       	sbc	r25, r1
    1ee4:	42 db       	rcall	.-2428   	; 0x156a <handleAndSpeed>
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -6;
    1ee8:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
    1eec:	8a ef       	ldi	r24, 0xFA	; 250
		straightLine = 0;
    1eee:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		break;
		case 0x80:// 10000000
		if ( sensorPos > 3)
    1ef2:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
    1ef6:	08 95       	ret
    1ef8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <sensorPos>
		{
			handleAndSpeed(30,0);
    1efc:	84 30       	cpi	r24, 0x04	; 4
    1efe:	34 f0       	brlt	.+12     	; 0x1f0c <runForwardLine90+0x3c4>
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1f06:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle7,speedRun90);
    1f08:	30 cb       	rjmp	.-2464   	; 0x156a <handleAndSpeed>
    1f0a:	08 95       	ret
    1f0c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <angle7>
    1f10:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <angle7+0x1>
    1f14:	91 95       	neg	r25
    1f16:	81 95       	neg	r24
    1f18:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1f1a:	27 db       	rcall	.-2482   	; 0x156a <handleAndSpeed>
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <curveFlag>
		sensorPos = -6;
    1f22:	8a ef       	ldi	r24, 0xFA	; 250
    1f24:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <sensorPos>
		straightLine = 0;
    1f28:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
		break;
		case 0x0f: break;
		case 0xf0: break;
		default:
		straightLine = 1;
    1f2c:	08 95       	ret
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <straightLine>
		speed(0,0);
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	f3 c4       	rjmp	.+2534   	; 0x2924 <speed>
    1f3e:	08 95       	ret

00001f40 <brakeTheCar>:
		return 0;
	}
	else return 0;
}
void brakeTheCar(int time,int speedRun)
{
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	8b 01       	movw	r16, r22
	cnt2 = 0;
    1f4a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    1f4e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
	while (cnt2<time)
    1f52:	ec 01       	movw	r28, r24
    1f54:	89 2b       	or	r24, r25
    1f56:	49 f0       	breq	.+18     	; 0x1f6a <brakeTheCar+0x2a>
	{
		runForwardLine90(speedRun);
    1f58:	c8 01       	movw	r24, r16
    1f5a:	f6 dd       	rcall	.-1044   	; 0x1b48 <runForwardLine90>
	else return 0;
}
void brakeTheCar(int time,int speedRun)
{
	cnt2 = 0;
	while (cnt2<time)
    1f5c:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    1f60:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    1f64:	8c 17       	cp	r24, r28
    1f66:	9d 07       	cpc	r25, r29
    1f68:	b8 f3       	brcs	.-18     	; 0x1f58 <brakeTheCar+0x18>
	{
		runForwardLine90(speedRun);
	}
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	08 95       	ret

00001f74 <turn90>:
		break;
	}
}

int turn90(int speedRun)
{
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	6c 01       	movw	r12, r24
	int runCase2 = 19;
	cnt1 = 0;
    1f92:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    1f96:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
	cnt2 = 0;
    1f9a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    1f9e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
	RGB(1,0,1);
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
	}
}

int turn90(int speedRun)
{
	int runCase2 = 19;
    1fac:	c3 e1       	ldi	r28, 0x13	; 19
    1fae:	d0 e0       	ldi	r29, 0x00	; 0
			switch( line ) {
				case 2:
				handle(-30); 
				speed(speedSmall90,speedBig90); // speedRun --> speedBoostAfter90
				if(sensorMask(0xff) == 0x00){
					runCase2 = 31;
    1fb0:	0f 2e       	mov	r0, r31
    1fb2:	ff e1       	ldi	r31, 0x1F	; 31
    1fb4:	6f 2e       	mov	r6, r31
    1fb6:	f0 2d       	mov	r31, r0
    1fb8:	71 2c       	mov	r7, r1
					runCase2 = 24;
					cnt1 = 0;
					break;
					
					case 1: //RIGHT
					line = 1;
    1fba:	ee 24       	eor	r14, r14
    1fbc:	e3 94       	inc	r14
    1fbe:	f1 2c       	mov	r15, r1
					handle(30);
					//speed(0,0);
					brakeTheCar(timerBrake90,speedBrake90); // speed() --> brake the car()
					beep_long(100);
					runCase2 = 24;
    1fc0:	0f 2e       	mov	r0, r31
    1fc2:	f8 e1       	ldi	r31, 0x18	; 24
    1fc4:	8f 2e       	mov	r8, r31
    1fc6:	f0 2d       	mov	r31, r0
    1fc8:	91 2c       	mov	r9, r1
			if (LineCheck)
			{
				switch (LineCheck)
				{
					case 2: //LEFT
					line = 2;
    1fca:	02 e0       	ldi	r16, 0x02	; 2
    1fcc:	10 e0       	ldi	r17, 0x00	; 0
		switch (runCase2)
		{
			case 19:
			brakeTheCar(timerBrake90,speedBrake90);
			runForwardLine90(speedRun); // speedRun ---> speedRunForwardBeforeTurn90
			runCase2 = 23;
    1fce:	0f 2e       	mov	r0, r31
    1fd0:	f7 e1       	ldi	r31, 0x17	; 23
    1fd2:	af 2e       	mov	r10, r31
    1fd4:	f0 2d       	mov	r31, r0
    1fd6:	b1 2c       	mov	r11, r1
	cnt1 = 0;
	cnt2 = 0;
	RGB(1,0,1);
	int LineCheck = 0;
	while (1){
		switch (runCase2)
    1fd8:	fe 01       	movw	r30, r28
    1fda:	73 97       	sbiw	r30, 0x13	; 19
    1fdc:	ec 31       	cpi	r30, 0x1C	; 28
    1fde:	f1 05       	cpc	r31, r1
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <turn90+0x70>
    1fe2:	49 c1       	rjmp	.+658    	; 0x2276 <__stack+0x77>
    1fe4:	88 27       	eor	r24, r24
    1fe6:	e3 5a       	subi	r30, 0xA3	; 163
    1fe8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fea:	8f 4f       	sbci	r24, 0xFF	; 255
    1fec:	18 c7       	rjmp	.+3632   	; 0x2e1e <__tablejump2__>
		{
			case 19:
			brakeTheCar(timerBrake90,speedBrake90);
    1fee:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <speedBrake90>
    1ff2:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <speedBrake90+0x1>
    1ff6:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <timerBrake90>
    1ffa:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <timerBrake90+0x1>
    1ffe:	a0 df       	rcall	.-192    	; 0x1f40 <brakeTheCar>
			runForwardLine90(speedRun); // speedRun ---> speedRunForwardBeforeTurn90
    2000:	c6 01       	movw	r24, r12
    2002:	a2 dd       	rcall	.-1212   	; 0x1b48 <runForwardLine90>
    2004:	ca 2d       	mov	r28, r10
			runCase2 = 23;
    2006:	db 2d       	mov	r29, r11
    2008:	e7 cf       	rjmp	.-50     	; 0x1fd8 <turn90+0x64>
			break;
    200a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt1>
			case 23:
			if(cnt1 > 5000){
    200e:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <cnt1+0x1>
    2012:	89 38       	cpi	r24, 0x89	; 137
    2014:	93 41       	sbci	r25, 0x13	; 19
    2016:	08 f0       	brcs	.+2      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2018:	31 c1       	rjmp	.+610    	; 0x227c <__stack+0x7d>
				return 100;
				break;
			}
			LineCheck = checkCrossHalfLine();
    201a:	93 da       	rcall	.-2778   	; 0x1542 <checkCrossHalfLine>
    201c:	88 23       	and	r24, r24
			if (LineCheck)
    201e:	e1 f1       	breq	.+120    	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    2020:	81 30       	cpi	r24, 0x01	; 1
			{
				switch (LineCheck)
    2022:	f1 f0       	breq	.+60     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	c1 f6       	brne	.-80     	; 0x1fd8 <turn90+0x64>
    2028:	10 93 17 03 	sts	0x0317, r17	; 0x800317 <line+0x1>
				{
					case 2: //LEFT
					line = 2;
    202c:	00 93 16 03 	sts	0x0316, r16	; 0x800316 <line>
    2030:	82 ee       	ldi	r24, 0xE2	; 226
					handle (-30); // -45 --> -30
    2032:	9f ef       	ldi	r25, 0xFF	; 255
    2034:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2038:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <speedBrake90>
					//speed(0,0);
					brakeTheCar(timerBrake90,speedBrake90); // speed() --> brake the car()
    203c:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <speedBrake90+0x1>
    2040:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <timerBrake90>
    2044:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <timerBrake90+0x1>
    2048:	7b df       	rcall	.-266    	; 0x1f40 <brakeTheCar>
    204a:	84 e6       	ldi	r24, 0x64	; 100
					beep_long(100);
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2052:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
					runCase2 = 24;
					cnt1 = 0;
    2056:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
    205a:	c8 2d       	mov	r28, r8
					line = 2;
					handle (-30); // -45 --> -30
					//speed(0,0);
					brakeTheCar(timerBrake90,speedBrake90); // speed() --> brake the car()
					beep_long(100);
					runCase2 = 24;
    205c:	d9 2d       	mov	r29, r9
    205e:	bc cf       	rjmp	.-136    	; 0x1fd8 <turn90+0x64>
					cnt1 = 0;
					break;
    2060:	f0 92 17 03 	sts	0x0317, r15	; 0x800317 <line+0x1>
					
					case 1: //RIGHT
					line = 1;
    2064:	e0 92 16 03 	sts	0x0316, r14	; 0x800316 <line>
    2068:	8e e1       	ldi	r24, 0x1E	; 30
					handle(30);
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2070:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <speedBrake90>
					//speed(0,0);
					brakeTheCar(timerBrake90,speedBrake90); // speed() --> brake the car()
    2074:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <speedBrake90+0x1>
    2078:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <timerBrake90>
    207c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <timerBrake90+0x1>
    2080:	5f df       	rcall	.-322    	; 0x1f40 <brakeTheCar>
    2082:	84 e6       	ldi	r24, 0x64	; 100
					beep_long(100);
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    208a:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
					runCase2 = 24;
					cnt1 = 0;
    208e:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
					line = 1;
					handle(30);
					//speed(0,0);
					brakeTheCar(timerBrake90,speedBrake90); // speed() --> brake the car()
					beep_long(100);
					runCase2 = 24;
    2092:	c8 2d       	mov	r28, r8
    2094:	d9 2d       	mov	r29, r9
					cnt1 = 0;
					break;
    2096:	a0 cf       	rjmp	.-192    	; 0x1fd8 <turn90+0x64>
					default : break;
				}
			}
			else runForwardLine90(speedRun);
    2098:	c6 01       	movw	r24, r12
    209a:	56 dd       	rcall	.-1364   	; 0x1b48 <runForwardLine90>
    209c:	9d cf       	rjmp	.-198    	; 0x1fd8 <turn90+0x64>
    209e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <line>
			break;
			
			case 24:
			switch( line ) {
    20a2:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <line+0x1>
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	91 05       	cpc	r25, r1
    20aa:	d9 f0       	breq	.+54     	; 0x20e2 <__DATA_REGION_LENGTH__+0xe2>
    20ac:	02 97       	sbiw	r24, 0x02	; 2
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <__DATA_REGION_LENGTH__+0xb2>
    20b0:	93 cf       	rjmp	.-218    	; 0x1fd8 <turn90+0x64>
    20b2:	82 ee       	ldi	r24, 0xE2	; 226
				case 2:
				handle(-30); 
    20b4:	9f ef       	ldi	r25, 0xFF	; 255
    20b6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    20ba:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <speedBig90>
				speed(speedSmall90,speedBig90); // speedRun --> speedBoostAfter90
    20be:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <speedBig90+0x1>
    20c2:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <speedSmall90>
    20c6:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <speedSmall90+0x1>
    20ca:	2c d4       	rcall	.+2136   	; 0x2924 <speed>
    20cc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
				if(sensorMask(0xff) == 0x00){
    20d0:	81 11       	cpse	r24, r1
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20d4:	c6 2d       	mov	r28, r6
					runCase2 = 31;
    20d6:	d7 2d       	mov	r29, r7
    20d8:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
				}
				cnt1 = 0;
    20dc:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
    20e0:	7b cf       	rjmp	.-266    	; 0x1fd8 <turn90+0x64>
				break;
    20e2:	8e e1       	ldi	r24, 0x1E	; 30
				
				case 1:
				handle(30); // 45 --> 50
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    20ea:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <speedSmall90>
				speed(speedBig90,speedSmall90); // speedRun --> speedBoostAfter90
    20ee:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <speedSmall90+0x1>
    20f2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <speedBig90>
    20f6:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <speedBig90+0x1>
    20fa:	14 d4       	rcall	.+2088   	; 0x2924 <speed>
    20fc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
				if(sensorMask(0xff) == 0x00){
    2100:	81 11       	cpse	r24, r1
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <__DATA_REGION_LENGTH__+0x108>
    2104:	c9 e2       	ldi	r28, 0x29	; 41
					runCase2 = 41;
    2106:	d0 e0       	ldi	r29, 0x00	; 0
    2108:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
				}
				cnt1 = 0;
    210c:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
    2110:	63 cf       	rjmp	.-314    	; 0x1fd8 <turn90+0x64>
				break;
    2112:	40 e0       	ldi	r20, 0x00	; 0
				break;
			}
			break;
			
			case 31:
			RGB(1,0,0);
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
    211c:	82 ee       	ldi	r24, 0xE2	; 226
			handle (-30);  // -45 --> -50
    211e:	9f ef       	ldi	r25, 0xFF	; 255
    2120:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(speedSmall90,speedBig90); // speedRun --> speedBoostAfter90 ---> doi lai
    2124:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <speedBig90>
    2128:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <speedBig90+0x1>
    212c:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <speedSmall90>
    2130:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <speedSmall90+0x1>
    2134:	f7 d3       	rcall	.+2030   	; 0x2924 <speed>
    2136:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			while (sensorMask(0x10) == 0x00 ) // 0x3c --> 0x10
    213a:	84 fd       	sbrc	r24, 4
    213c:	0d c0       	rjmp	.+26     	; 0x2158 <__DATA_REGION_LENGTH__+0x158>
			{
				speed(speedSmall90,speedBig90);
    213e:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <speedBig90>
    2142:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <speedBig90+0x1>
    2146:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <speedSmall90>
    214a:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <speedSmall90+0x1>
    214e:	ea d3       	rcall	.+2004   	; 0x2924 <speed>
    2150:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			
			case 31:
			RGB(1,0,0);
			handle (-30);  // -45 --> -50
			speed(speedSmall90,speedBig90); // speedRun --> speedBoostAfter90 ---> doi lai
			while (sensorMask(0x10) == 0x00 ) // 0x3c --> 0x10
    2154:	84 ff       	sbrs	r24, 4
    2156:	f3 cf       	rjmp	.-26     	; 0x213e <__DATA_REGION_LENGTH__+0x13e>
    2158:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
			{
				speed(speedSmall90,speedBig90);
			}
			cnt1 = 0;
    215c:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
    2160:	ce e2       	ldi	r28, 0x2E	; 46
			runCase2 = 46;
    2162:	d0 e0       	ldi	r29, 0x00	; 0
    2164:	39 cf       	rjmp	.-398    	; 0x1fd8 <turn90+0x64>
			break;
    2166:	40 e0       	ldi	r20, 0x00	; 0
			//cnt3 = 0;
			//return 11;
			//break;
			
			case 41:
			RGB(1,0,0);
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
    2170:	8e e1       	ldi	r24, 0x1E	; 30
			handle(30); //45 --> 50
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedBig90,speedSmall90); // speedRun --> speedBoostAfter90 ---> doi lai
    2178:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <speedSmall90>
    217c:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <speedSmall90+0x1>
    2180:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <speedBig90>
    2184:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <speedBig90+0x1>
    2188:	cd d3       	rcall	.+1946   	; 0x2924 <speed>
    218a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			while (sensorMask (0x08) == 0x00)
    218e:	83 fd       	sbrc	r24, 3
    2190:	0d c0       	rjmp	.+26     	; 0x21ac <__DATA_REGION_LENGTH__+0x1ac>
			{
				speed(speedBig90,speedSmall90);
    2192:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <speedSmall90>
    2196:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <speedSmall90+0x1>
    219a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <speedBig90>
    219e:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <speedBig90+0x1>
    21a2:	c0 d3       	rcall	.+1920   	; 0x2924 <speed>
    21a4:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			
			case 41:
			RGB(1,0,0);
			handle(30); //45 --> 50
			speed (speedBig90,speedSmall90); // speedRun --> speedBoostAfter90 ---> doi lai
			while (sensorMask (0x08) == 0x00)
    21a8:	83 ff       	sbrs	r24, 3
    21aa:	f3 cf       	rjmp	.-26     	; 0x2192 <__DATA_REGION_LENGTH__+0x192>
    21ac:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
			{
				speed(speedBig90,speedSmall90);
			}
			cnt1 = 0;
    21b0:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
    21b4:	cd e2       	ldi	r28, 0x2D	; 45
			runCase2 = 45;
    21b6:	d0 e0       	ldi	r29, 0x00	; 0
    21b8:	0f cf       	rjmp	.-482    	; 0x1fd8 <turn90+0x64>
				runCase2 = 45;
			}
			break;*/
			
			case 45:
			RGB(1,0,1);
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (30);
    21c4:	8e e1       	ldi	r24, 0x1E	; 30
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	c6 01       	movw	r24, r12
    21d2:	a8 d3       	rcall	.+1872   	; 0x2924 <speed>
    21d4:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    21d8:	8c 73       	andi	r24, 0x3C	; 60
    21da:	09 f4       	brne	.+2      	; 0x21de <__DATA_REGION_LENGTH__+0x1de>
    21dc:	fd ce       	rjmp	.-518    	; 0x1fd8 <turn90+0x64>
    21de:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
			{
				cnt1 = 0;
    21e2:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
    21e6:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
				cnt2 = 0;
    21ea:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
    21ee:	ce e2       	ldi	r28, 0x2E	; 46
				runCase2 = 46;
    21f0:	d0 e0       	ldi	r29, 0x00	; 0
    21f2:	f2 ce       	rjmp	.-540    	; 0x1fd8 <turn90+0x64>
    21f4:	41 e0       	ldi	r20, 0x01	; 1
			}
			break;
			
			case 46:
			RGB(1,1,1);
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
    21fe:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
			cnt2 = 0;
    2202:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
    2206:	8c e2       	ldi	r24, 0x2C	; 44
			beep_long(300);
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			while(cnt2 < 200)
    220e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    2212:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    2216:	88 3c       	cpi	r24, 0xC8	; 200
    2218:	91 05       	cpc	r25, r1
    221a:	60 f4       	brcc	.+24     	; 0x2234 <__stack+0x35>
			{
				runForwardLine90(speedRunForwardBeforeTurn90);
    221c:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <speedRunForwardBeforeTurn90>
    2220:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <speedRunForwardBeforeTurn90+0x1>
    2224:	91 dc       	rcall	.-1758   	; 0x1b48 <runForwardLine90>
    2226:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
			
			case 46:
			RGB(1,1,1);
			cnt2 = 0;
			beep_long(300);
			while(cnt2 < 200)
    222a:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    222e:	88 3c       	cpi	r24, 0xC8	; 200
    2230:	91 05       	cpc	r25, r1
    2232:	a0 f3       	brcs	.-24     	; 0x221c <__stack+0x1d>
			{
				runForwardLine90(speedRunForwardBeforeTurn90);
			}
			cnt2 = 0;
    2234:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    2238:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
			while(cnt2 < timerBoostAfter90)
    223c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <timerBoostAfter90>
    2240:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <timerBoostAfter90+0x1>
    2244:	89 2b       	or	r24, r25
    2246:	81 f0       	breq	.+32     	; 0x2268 <__stack+0x69>
			{
				runForwardLine90(speedBoostAfter90);
    2248:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <speedBoostAfter90>
    224c:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <speedBoostAfter90+0x1>
    2250:	7b dc       	rcall	.-1802   	; 0x1b48 <runForwardLine90>
    2252:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <cnt2>
			while(cnt2 < 200)
			{
				runForwardLine90(speedRunForwardBeforeTurn90);
			}
			cnt2 = 0;
			while(cnt2 < timerBoostAfter90)
    2256:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <cnt2+0x1>
    225a:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <timerBoostAfter90>
    225e:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <timerBoostAfter90+0x1>
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	80 f3       	brcs	.-32     	; 0x2248 <__stack+0x49>
    2268:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <cnt3+0x1>
			{
				runForwardLine90(speedBoostAfter90);
			}
			cnt3 = 0;;
    226c:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <cnt3>
    2270:	8b e0       	ldi	r24, 0x0B	; 11
			return 11;
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <__stack+0x81>
    2276:	8b e0       	ldi	r24, 0x0B	; 11
			break;
			default:
			return 11;
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <__stack+0x81>
    227c:	84 e6       	ldi	r24, 0x64	; 100
			runForwardLine90(speedRun); // speedRun ---> speedRunForwardBeforeTurn90
			runCase2 = 23;
			break;
			case 23:
			if(cnt1 > 5000){
				return 100;
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	df 91       	pop	r29
			default:
			return 11;
			break;
		}
	}
}
    2282:	cf 91       	pop	r28
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	df 90       	pop	r13
    228e:	cf 90       	pop	r12
    2290:	bf 90       	pop	r11
    2292:	af 90       	pop	r10
    2294:	9f 90       	pop	r9
    2296:	8f 90       	pop	r8
    2298:	7f 90       	pop	r7
    229a:	6f 90       	pop	r6
    229c:	08 95       	ret

0000229e <leftLaneChange>:
    229e:	0f 93       	push	r16

int leftLaneChange (int speedRun){
    22a0:	1f 93       	push	r17
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	8c 01       	movw	r16, r24
	beep_long(100);
    22a8:	84 e6       	ldi	r24, 0x64	; 100
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	int runCase3 = 50;
	cnt1 = 0;
    22b0:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    22b4:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
	}
}

int leftLaneChange (int speedRun){
	beep_long(100);
	int runCase3 = 50;
    22b8:	c2 e3       	ldi	r28, 0x32	; 50
    22ba:	d0 e0       	ldi	r29, 0x00	; 0
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <leftLaneChange+0x24>
    22be:	c9 e3       	ldi	r28, 0x39	; 57
    22c0:	d0 e0       	ldi	r29, 0x00	; 0
	cnt1 = 0;
	while (1)
	{
		if (checkCrossLine())
    22c2:	37 d9       	rcall	.-3474   	; 0x1532 <checkCrossLine>
    22c4:	88 23       	and	r24, r24
    22c6:	39 f0       	breq	.+14     	; 0x22d6 <leftLaneChange+0x38>
		{
			cnt1 = 0;
    22c8:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    22cc:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
			return 21;
    22d0:	85 e1       	ldi	r24, 0x15	; 21
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	b6 c0       	rjmp	.+364    	; 0x2442 <leftLaneChange+0x1a4>
		}
		switch (runCase3)
    22d6:	c8 33       	cpi	r28, 0x38	; 56
    22d8:	d1 05       	cpc	r29, r1
    22da:	09 f4       	brne	.+2      	; 0x22de <leftLaneChange+0x40>
    22dc:	65 c0       	rjmp	.+202    	; 0x23a8 <leftLaneChange+0x10a>
    22de:	3c f4       	brge	.+14     	; 0x22ee <leftLaneChange+0x50>
    22e0:	c2 33       	cpi	r28, 0x32	; 50
    22e2:	d1 05       	cpc	r29, r1
    22e4:	21 f1       	breq	.+72     	; 0x232e <leftLaneChange+0x90>
    22e6:	c3 33       	cpi	r28, 0x33	; 51
    22e8:	d1 05       	cpc	r29, r1
    22ea:	c9 f1       	breq	.+114    	; 0x235e <leftLaneChange+0xc0>
    22ec:	a8 c0       	rjmp	.+336    	; 0x243e <leftLaneChange+0x1a0>
    22ee:	ca 33       	cpi	r28, 0x3A	; 58
    22f0:	d1 05       	cpc	r29, r1
    22f2:	29 f0       	breq	.+10     	; 0x22fe <leftLaneChange+0x60>
    22f4:	0c f4       	brge	.+2      	; 0x22f8 <leftLaneChange+0x5a>
    22f6:	67 c0       	rjmp	.+206    	; 0x23c6 <leftLaneChange+0x128>
    22f8:	eb 97       	sbiw	r28, 0x3b	; 59
    22fa:	51 f0       	breq	.+20     	; 0x2310 <leftLaneChange+0x72>
    22fc:	a0 c0       	rjmp	.+320    	; 0x243e <leftLaneChange+0x1a0>
				runCase3 = 58;
				break;
			}
			break;
			case 58:
			while(cnt2 < 200)
    22fe:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    2302:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    2306:	88 3c       	cpi	r24, 0xC8	; 200
    2308:	91 05       	cpc	r25, r1
    230a:	08 f4       	brcc	.+2      	; 0x230e <leftLaneChange+0x70>
    230c:	75 c0       	rjmp	.+234    	; 0x23f8 <leftLaneChange+0x15a>
    230e:	7d c0       	rjmp	.+250    	; 0x240a <leftLaneChange+0x16c>
			}
			cnt2 = 0;
			runCase3 = 59;
			break;
			case 59:
			while(cnt2 < timerBoostAfterChangeLanes)
    2310:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <timerBoostAfterChangeLanes>
    2314:	30 91 33 03 	lds	r19, 0x0333	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    2318:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    231c:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    2320:	82 17       	cp	r24, r18
    2322:	93 07       	cpc	r25, r19
    2324:	08 f4       	brcc	.+2      	; 0x2328 <leftLaneChange+0x8a>
    2326:	78 c0       	rjmp	.+240    	; 0x2418 <leftLaneChange+0x17a>
			{
				runForwardLine90(speedBoostAfterChangeLanes);
			}
			return 11;
    2328:	8b e0       	ldi	r24, 0x0B	; 11
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	8a c0       	rjmp	.+276    	; 0x2442 <leftLaneChange+0x1a4>
			return 21;
		}
		switch (runCase3)
		{
			case 50:
			if (cnt1 < 20)
    232e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt1>
    2332:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <cnt1+0x1>
    2336:	44 97       	sbiw	r24, 0x14	; 20
    2338:	60 f4       	brcc	.+24     	; 0x2352 <leftLaneChange+0xb4>
			{
				brakeTheCar(timerBrakeChangeLanes,speedBrakeChangeLanes); 
    233a:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <speedBrakeChangeLanes>
    233e:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <speedBrakeChangeLanes+0x1>
    2342:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <timerBrakeChangeLanes>
    2346:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <timerBrakeChangeLanes+0x1>
    234a:	fa dd       	rcall	.-1036   	; 0x1f40 <brakeTheCar>
				runCase3 = 51;
    234c:	c3 e3       	ldi	r28, 0x33	; 51
    234e:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    2350:	b8 cf       	rjmp	.-144    	; 0x22c2 <leftLaneChange+0x24>
			}
			//handleAndSpeed(-angle3,speedRun3);
			runForwardLine90(speedRunForwardBeforeChangeLine);
    2352:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <speedRunForwardBeforeChangeLine>
    2356:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <speedRunForwardBeforeChangeLine+0x1>
    235a:	f6 db       	rcall	.-2068   	; 0x1b48 <runForwardLine90>
			break;
    235c:	b2 cf       	rjmp	.-156    	; 0x22c2 <leftLaneChange+0x24>
			case 51:
			if (sensorMask (MASK4_4) == 0x00){
    235e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    2362:	81 11       	cpse	r24, r1
    2364:	10 c0       	rjmp	.+32     	; 0x2386 <leftLaneChange+0xe8>
				handleAndSpeed (-angleChangeLanes,speedRun); // ( 30 , 150 )
    2366:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <angleChangeLanes>
    236a:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <angleChangeLanes+0x1>
    236e:	b8 01       	movw	r22, r16
    2370:	91 95       	neg	r25
    2372:	81 95       	neg	r24
    2374:	91 09       	sbc	r25, r1
    2376:	f9 d8       	rcall	.-3598   	; 0x156a <handleAndSpeed>
				runCase3 = 56;
				cnt1 = 0;
    2378:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    237c:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
			runForwardLine90(speedRunForwardBeforeChangeLine);
			break;
			case 51:
			if (sensorMask (MASK4_4) == 0x00){
				handleAndSpeed (-angleChangeLanes,speedRun); // ( 30 , 150 )
				runCase3 = 56;
    2380:	c8 e3       	ldi	r28, 0x38	; 56
				cnt1 = 0;
				break;
    2382:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else
			{
				runForwardLine90(speedRun);
    2384:	9e cf       	rjmp	.-196    	; 0x22c2 <leftLaneChange+0x24>
    2386:	c8 01       	movw	r24, r16
    2388:	df db       	rcall	.-2114   	; 0x1b48 <runForwardLine90>
			}
			if (cnt1>3000)
    238a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt1>
    238e:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <cnt1+0x1>
    2392:	89 3b       	cpi	r24, 0xB9	; 185
    2394:	9b 40       	sbci	r25, 0x0B	; 11
    2396:	08 f4       	brcc	.+2      	; 0x239a <leftLaneChange+0xfc>
    2398:	94 cf       	rjmp	.-216    	; 0x22c2 <leftLaneChange+0x24>
			{
				cnt1 = 0;
    239a:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    239e:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				return 11;
    23a2:	8b e0       	ldi	r24, 0x0B	; 11
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	4d c0       	rjmp	.+154    	; 0x2442 <leftLaneChange+0x1a4>
			}
			break;
			case 56:
			if (sensorMask(0x60)!=0) //01100000
    23a8:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    23ac:	80 76       	andi	r24, 0x60	; 96
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <leftLaneChange+0x114>
    23b0:	88 cf       	rjmp	.-240    	; 0x22c2 <leftLaneChange+0x24>
			{
				cnt1 = 0;
    23b2:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    23b6:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				handleAndSpeed(angleChangeLanes,speedRun); // 190
    23ba:	b8 01       	movw	r22, r16
    23bc:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <angleChangeLanes>
    23c0:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <angleChangeLanes+0x1>
    23c4:	d2 d8       	rcall	.-3676   	; 0x156a <handleAndSpeed>
				runCase3 = 57;
			}
			else 
			break;
			case 57:
			cnt2 = 0;
    23c6:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    23ca:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
			if (sensorMask(MASK0_4)!=0)
    23ce:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    23d2:	8f 70       	andi	r24, 0x0F	; 15
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <leftLaneChange+0x13a>
    23d6:	73 cf       	rjmp	.-282    	; 0x22be <leftLaneChange+0x20>
			{
				cnt1 = 0;
    23d8:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    23dc:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				brakeTheCar(timerBrakeChangeLanes,speedBrakeChangeLanes); 
    23e0:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <speedBrakeChangeLanes>
    23e4:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <speedBrakeChangeLanes+0x1>
    23e8:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <timerBrakeChangeLanes>
    23ec:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <timerBrakeChangeLanes+0x1>
				runCase3 = 58;
    23f0:	a7 dd       	rcall	.-1202   	; 0x1f40 <brakeTheCar>
    23f2:	ca e3       	ldi	r28, 0x3A	; 58
				break;
    23f4:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
			case 58:
			while(cnt2 < 200)
			{
				runForwardLine90(speedRun);
    23f6:	65 cf       	rjmp	.-310    	; 0x22c2 <leftLaneChange+0x24>
    23f8:	c8 01       	movw	r24, r16
    23fa:	a6 db       	rcall	.-2228   	; 0x1b48 <runForwardLine90>
				runCase3 = 58;
				break;
			}
			break;
			case 58:
			while(cnt2 < 200)
    23fc:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    2400:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    2404:	88 3c       	cpi	r24, 0xC8	; 200
    2406:	91 05       	cpc	r25, r1
    2408:	b8 f3       	brcs	.-18     	; 0x23f8 <leftLaneChange+0x15a>
			{
				runForwardLine90(speedRun);
			}
			cnt2 = 0;
    240a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    240e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
			runCase3 = 59;
    2412:	cb e3       	ldi	r28, 0x3B	; 59
			break;
    2414:	d0 e0       	ldi	r29, 0x00	; 0
			case 59:
			while(cnt2 < timerBoostAfterChangeLanes)
			{
				runForwardLine90(speedBoostAfterChangeLanes);
    2416:	55 cf       	rjmp	.-342    	; 0x22c2 <leftLaneChange+0x24>
    2418:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <speedBoostAfterChangeLanes>
    241c:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    2420:	93 db       	rcall	.-2266   	; 0x1b48 <runForwardLine90>
			}
			cnt2 = 0;
			runCase3 = 59;
			break;
			case 59:
			while(cnt2 < timerBoostAfterChangeLanes)
    2422:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <cnt2>
    2426:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <cnt2+0x1>
    242a:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <timerBoostAfterChangeLanes>
    242e:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    2432:	28 17       	cp	r18, r24
    2434:	39 07       	cpc	r19, r25
    2436:	80 f3       	brcs	.-32     	; 0x2418 <leftLaneChange+0x17a>
			{
				runForwardLine90(speedBoostAfterChangeLanes);
			}
			return 11;
    2438:	8b e0       	ldi	r24, 0x0B	; 11
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <leftLaneChange+0x1a4>
			break;
			default:
			return 11;
    243e:	8b e0       	ldi	r24, 0x0B	; 11
    2440:	90 e0       	ldi	r25, 0x00	; 0

		}
	}
}
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	08 95       	ret

0000244c <rightLaneChange>:
int rightLaneChange(int speedRun)
{
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	8c 01       	movw	r16, r24
	beep_long(100);
    2456:	84 e6       	ldi	r24, 0x64	; 100
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	int runCase4 = 60;
    245e:	cc e3       	ldi	r28, 0x3C	; 60
    2460:	d0 e0       	ldi	r29, 0x00	; 0
	int cnt1  = 0;
	while (1)
	{
		if (checkCrossLine())
    2462:	67 d8       	rcall	.-3890   	; 0x1532 <checkCrossLine>
    2464:	81 11       	cpse	r24, r1
    2466:	96 c0       	rjmp	.+300    	; 0x2594 <rightLaneChange+0x148>
		{
			cnt1 = 0;
			return 21;
		}
		switch (runCase4)
    2468:	c2 34       	cpi	r28, 0x42	; 66
    246a:	d1 05       	cpc	r29, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <rightLaneChange+0x24>
    246e:	49 c0       	rjmp	.+146    	; 0x2502 <rightLaneChange+0xb6>
    2470:	3c f4       	brge	.+14     	; 0x2480 <rightLaneChange+0x34>
    2472:	cc 33       	cpi	r28, 0x3C	; 60
    2474:	d1 05       	cpc	r29, r1
    2476:	29 f1       	breq	.+74     	; 0x24c2 <rightLaneChange+0x76>
    2478:	cd 33       	cpi	r28, 0x3D	; 61
    247a:	d1 05       	cpc	r29, r1
    247c:	71 f1       	breq	.+92     	; 0x24da <rightLaneChange+0x8e>
    247e:	8d c0       	rjmp	.+282    	; 0x259a <rightLaneChange+0x14e>
    2480:	c4 34       	cpi	r28, 0x44	; 68
    2482:	d1 05       	cpc	r29, r1
    2484:	31 f0       	breq	.+12     	; 0x2492 <rightLaneChange+0x46>
    2486:	0c f4       	brge	.+2      	; 0x248a <rightLaneChange+0x3e>
    2488:	4d c0       	rjmp	.+154    	; 0x2524 <rightLaneChange+0xd8>
    248a:	c5 34       	cpi	r28, 0x45	; 69
    248c:	d1 05       	cpc	r29, r1
    248e:	51 f0       	breq	.+20     	; 0x24a4 <rightLaneChange+0x58>
    2490:	84 c0       	rjmp	.+264    	; 0x259a <rightLaneChange+0x14e>
				runCase4 = 68;
				break;
			}
			break;
			case 68:
			while(cnt2 < 200)
    2492:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    2496:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    249a:	88 3c       	cpi	r24, 0xC8	; 200
    249c:	91 05       	cpc	r25, r1
    249e:	08 f4       	brcc	.+2      	; 0x24a2 <rightLaneChange+0x56>
    24a0:	56 c0       	rjmp	.+172    	; 0x254e <rightLaneChange+0x102>
    24a2:	5e c0       	rjmp	.+188    	; 0x2560 <rightLaneChange+0x114>
			}
			runCase4 = 69;
			cnt2 = 0;
			break;
			case 69:
			while(cnt2 < timerBoostAfterChangeLanes)
    24a4:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <timerBoostAfterChangeLanes>
    24a8:	30 91 33 03 	lds	r19, 0x0333	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    24ac:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    24b0:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    24b4:	82 17       	cp	r24, r18
    24b6:	93 07       	cpc	r25, r19
    24b8:	08 f4       	brcc	.+2      	; 0x24bc <rightLaneChange+0x70>
    24ba:	59 c0       	rjmp	.+178    	; 0x256e <rightLaneChange+0x122>
			{
				runForwardLine90(speedBoostAfterChangeLanes);
			}
			return 11;
    24bc:	8b e0       	ldi	r24, 0x0B	; 11
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	6e c0       	rjmp	.+220    	; 0x259e <rightLaneChange+0x152>
		switch (runCase4)
		{
			case 60:
			if (cnt1 < 50)
			{
				brakeTheCar(timerBrakeChangeLanes,speedBrakeChangeLanes);
    24c2:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <speedBrakeChangeLanes>
    24c6:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <speedBrakeChangeLanes+0x1>
    24ca:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <timerBrakeChangeLanes>
    24ce:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <timerBrakeChangeLanes+0x1>
    24d2:	36 dd       	rcall	.-1428   	; 0x1f40 <brakeTheCar>
				runCase4 = 61;
    24d4:	cd e3       	ldi	r28, 0x3D	; 61
    24d6:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    24d8:	c4 cf       	rjmp	.-120    	; 0x2462 <rightLaneChange+0x16>
			}
			//handleAndSpeed(angle3,speedRun3); // moi them
			runForwardLine90(speedRunForwardBeforeChangeLine);
			break;
			case 61:
			if (sensorMask (MASK4_4) == 0x00){
    24da:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    24de:	81 11       	cpse	r24, r1
    24e0:	0d c0       	rjmp	.+26     	; 0x24fc <rightLaneChange+0xb0>
				handleAndSpeed (angleChangeLanes,speedRun);
    24e2:	b8 01       	movw	r22, r16
    24e4:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <angleChangeLanes>
    24e8:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <angleChangeLanes+0x1>
    24ec:	3e d8       	rcall	.-3972   	; 0x156a <handleAndSpeed>
				runCase4 = 66;
				cnt1 = 0;
				beep_long(100);
    24ee:	84 e6       	ldi	r24, 0x64	; 100
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			runForwardLine90(speedRunForwardBeforeChangeLine);
			break;
			case 61:
			if (sensorMask (MASK4_4) == 0x00){
				handleAndSpeed (angleChangeLanes,speedRun);
				runCase4 = 66;
    24f6:	c2 e4       	ldi	r28, 0x42	; 66
    24f8:	d0 e0       	ldi	r29, 0x00	; 0
				cnt1 = 0;
				beep_long(100);
				break;
    24fa:	b3 cf       	rjmp	.-154    	; 0x2462 <rightLaneChange+0x16>
			}
			else
			{
				runForwardLine90(speedRun);
    24fc:	c8 01       	movw	r24, r16
    24fe:	24 db       	rcall	.-2488   	; 0x1b48 <runForwardLine90>
    2500:	b0 cf       	rjmp	.-160    	; 0x2462 <rightLaneChange+0x16>
				
				return 11;
			}
			break;
			case 66:
			if (sensorMask(0x06)!=0) //00000110
    2502:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    2506:	86 70       	andi	r24, 0x06	; 6
    2508:	09 f4       	brne	.+2      	; 0x250c <rightLaneChange+0xc0>
    250a:	ab cf       	rjmp	.-170    	; 0x2462 <rightLaneChange+0x16>
			{
				cnt1 = 0;
				handleAndSpeed(-angleChangeLanes,speedRun);
    250c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <angleChangeLanes>
    2510:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <angleChangeLanes+0x1>
    2514:	b8 01       	movw	r22, r16
    2516:	91 95       	neg	r25
    2518:	81 95       	neg	r24
    251a:	91 09       	sbc	r25, r1
    251c:	26 d8       	rcall	.-4020   	; 0x156a <handleAndSpeed>
				runCase4 = 67;
    251e:	c3 e4       	ldi	r28, 0x43	; 67
    2520:	d0 e0       	ldi	r29, 0x00	; 0
    2522:	9f cf       	rjmp	.-194    	; 0x2462 <rightLaneChange+0x16>
			}
			break;
			case 67:
			cnt2 = 0;
    2524:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    2528:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
			if (sensorMask(MASK4_0)!=0)
    252c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    2530:	80 7f       	andi	r24, 0xF0	; 240
    2532:	09 f4       	brne	.+2      	; 0x2536 <rightLaneChange+0xea>
    2534:	96 cf       	rjmp	.-212    	; 0x2462 <rightLaneChange+0x16>
			{
				cnt1 = 0;
				brakeTheCar(timerBrakeChangeLanes,speedBrakeChangeLanes);
    2536:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <speedBrakeChangeLanes>
    253a:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <speedBrakeChangeLanes+0x1>
    253e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <timerBrakeChangeLanes>
    2542:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <timerBrakeChangeLanes+0x1>
    2546:	fc dc       	rcall	.-1544   	; 0x1f40 <brakeTheCar>
				runCase4 = 68;
    2548:	c4 e4       	ldi	r28, 0x44	; 68
				break;
    254a:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
			case 68:
			while(cnt2 < 200)
			{
				runForwardLine90(speedRun);
    254c:	8a cf       	rjmp	.-236    	; 0x2462 <rightLaneChange+0x16>
    254e:	c8 01       	movw	r24, r16
    2550:	fb da       	rcall	.-2570   	; 0x1b48 <runForwardLine90>
				runCase4 = 68;
				break;
			}
			break;
			case 68:
			while(cnt2 < 200)
    2552:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    2556:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    255a:	88 3c       	cpi	r24, 0xC8	; 200
    255c:	91 05       	cpc	r25, r1
    255e:	b8 f3       	brcs	.-18     	; 0x254e <rightLaneChange+0x102>
			{
				runForwardLine90(speedRun);
			}
			runCase4 = 69;
			cnt2 = 0;
    2560:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    2564:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
			case 68:
			while(cnt2 < 200)
			{
				runForwardLine90(speedRun);
			}
			runCase4 = 69;
    2568:	c5 e4       	ldi	r28, 0x45	; 69
    256a:	d0 e0       	ldi	r29, 0x00	; 0
			cnt2 = 0;
			break;
    256c:	7a cf       	rjmp	.-268    	; 0x2462 <rightLaneChange+0x16>
			case 69:
			while(cnt2 < timerBoostAfterChangeLanes)
			{
				runForwardLine90(speedBoostAfterChangeLanes);
    256e:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <speedBoostAfterChangeLanes>
    2572:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <speedBoostAfterChangeLanes+0x1>
    2576:	e8 da       	rcall	.-2608   	; 0x1b48 <runForwardLine90>
			}
			runCase4 = 69;
			cnt2 = 0;
			break;
			case 69:
			while(cnt2 < timerBoostAfterChangeLanes)
    2578:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <cnt2>
    257c:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <cnt2+0x1>
    2580:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <timerBoostAfterChangeLanes>
    2584:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <timerBoostAfterChangeLanes+0x1>
    2588:	28 17       	cp	r18, r24
    258a:	39 07       	cpc	r19, r25
    258c:	80 f3       	brcs	.-32     	; 0x256e <rightLaneChange+0x122>
			{
				runForwardLine90(speedBoostAfterChangeLanes);
			}
			return 11;
    258e:	8b e0       	ldi	r24, 0x0B	; 11
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	05 c0       	rjmp	.+10     	; 0x259e <rightLaneChange+0x152>
	while (1)
	{
		if (checkCrossLine())
		{
			cnt1 = 0;
			return 21;
    2594:	85 e1       	ldi	r24, 0x15	; 21
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 c0       	rjmp	.+4      	; 0x259e <rightLaneChange+0x152>
				runForwardLine90(speedBoostAfterChangeLanes);
			}
			return 11;
			break;
			default:
			return 11;
    259a:	8b e0       	ldi	r24, 0x0B	; 11
    259c:	90 e0       	ldi	r25, 0x00	; 0

		}
	}
}
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	08 95       	ret

000025a8 <run>:
	speedRun6 = speedRunForward*78/100;		angle6 = 13;	//75 -  12
	speedRun7 = speedRunForward*75/100;		angle7 = 17;	//70 -  15
}
void run(void)
{
	setup();
    25a8:	0e 94 61 07 	call	0xec2	; 0xec2 <setup>
	unsigned char runCase = 0;
    25ac:	c0 e0       	ldi	r28, 0x00	; 0
					runCase = 12;
					break;
					
					case HALF_RIGHT_LINE:
					cnt1 = 0;
					runCase = 13;
    25ae:	0d e0       	ldi	r16, 0x0D	; 13
				runCase = 21;
				cnt1 = 0;
				break;
			}
			else {					
				switch (checkCrossHalfLine())
    25b0:	1b e0       	ldi	r17, 0x0B	; 11
				{
					case HALF_LEFT_LINE:
					cnt1 = 0;
					runCase = 12;
    25b2:	dc e0       	ldi	r29, 0x0C	; 12
void run(void)
{
	setup();
	unsigned char runCase = 0;
	while( 1 ) {
		switch( runCase ) {
    25b4:	cb 30       	cpi	r28, 0x0B	; 11
    25b6:	09 f4       	brne	.+2      	; 0x25ba <run+0x12>
    25b8:	59 c0       	rjmp	.+178    	; 0x266c <run+0xc4>
    25ba:	38 f4       	brcc	.+14     	; 0x25ca <run+0x22>
    25bc:	c1 30       	cpi	r28, 0x01	; 1
    25be:	41 f1       	breq	.+80     	; 0x2610 <run+0x68>
    25c0:	80 f0       	brcs	.+32     	; 0x25e2 <run+0x3a>
    25c2:	c2 30       	cpi	r28, 0x02	; 2
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <run+0x20>
    25c6:	c8 c0       	rjmp	.+400    	; 0x2758 <run+0x1b0>
    25c8:	35 c0       	rjmp	.+106    	; 0x2634 <run+0x8c>
    25ca:	cd 30       	cpi	r28, 0x0D	; 13
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <run+0x28>
    25ce:	86 c0       	rjmp	.+268    	; 0x26dc <run+0x134>
    25d0:	08 f4       	brcc	.+2      	; 0x25d4 <run+0x2c>
    25d2:	6e c0       	rjmp	.+220    	; 0x26b0 <run+0x108>
    25d4:	c5 31       	cpi	r28, 0x15	; 21
    25d6:	09 f4       	brne	.+2      	; 0x25da <run+0x32>
    25d8:	97 c0       	rjmp	.+302    	; 0x2708 <run+0x160>
    25da:	c4 36       	cpi	r28, 0x64	; 100
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <run+0x38>
    25de:	bc c0       	rjmp	.+376    	; 0x2758 <run+0x1b0>
    25e0:	a4 c0       	rjmp	.+328    	; 0x272a <run+0x182>
			case 0:
			if((getGateSensor() == 1)){
    25e2:	0e 94 0f 05 	call	0xa1e	; 0xa1e <getGateSensor>
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	71 f4       	brne	.+28     	; 0x2606 <run+0x5e>
				runCase = 1;
				beep_long(100);
    25ea:	84 e6       	ldi	r24, 0x64	; 100
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25f2:	2f ef       	ldi	r18, 0xFF	; 255
    25f4:	89 e6       	ldi	r24, 0x69	; 105
    25f6:	98 e1       	ldi	r25, 0x18	; 24
    25f8:	21 50       	subi	r18, 0x01	; 1
    25fa:	80 40       	sbci	r24, 0x00	; 0
    25fc:	90 40       	sbci	r25, 0x00	; 0
    25fe:	e1 f7       	brne	.-8      	; 0x25f8 <run+0x50>
    2600:	00 c0       	rjmp	.+0      	; 0x2602 <run+0x5a>
    2602:	00 00       	nop
    2604:	05 c0       	rjmp	.+10     	; 0x2610 <run+0x68>
				_delay_ms(500);
				break;
			}
			if (SW4)
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    260c:	88 23       	and	r24, r24
    260e:	49 f3       	breq	.-46     	; 0x25e2 <run+0x3a>
				runCase = 1;
				break;
			}
			break;
			case 1:
			if ((getGateSensor() == 0) || SW4)
    2610:	0e 94 0f 05 	call	0xa1e	; 0xa1e <getGateSensor>
    2614:	88 23       	and	r24, r24
    2616:	29 f0       	breq	.+10     	; 0x2622 <run+0x7a>
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    261e:	88 23       	and	r24, r24
    2620:	b9 f3       	breq	.-18     	; 0x2610 <run+0x68>
			{
				runCase = 2;
				cnt1 = 0;
    2622:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    2626:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				cnt4 = 0;
    262a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <cnt4+0x1>
    262e:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <cnt4>
    2632:	06 c0       	rjmp	.+12     	; 0x2640 <run+0x98>
				break;
			}
			break;
			case 2:
			if( cnt1 < 1 ) {
    2634:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt1>
    2638:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <cnt1+0x1>
    263c:	89 2b       	or	r24, r25
    263e:	51 f4       	brne	.+20     	; 0x2654 <run+0xac>
				handle(0);
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(0,0);
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	69 d1       	rcall	.+722    	; 0x2924 <speed>
    2652:	f0 cf       	rjmp	.-32     	; 0x2634 <run+0x8c>
			}
			else {
				beep_long(100);
    2654:	84 e6       	ldi	r24, 0x64	; 100
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
				runCase = 11;
				cnt1 = 0;
    265c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    2660:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				cnt4 = 0;
    2664:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <cnt4+0x1>
    2668:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <cnt4>
			/*if(cnt4 > RunTimer){
				runCase = 100;
				cnt1 = 0;
				break;
			}*/
			if(checkCrossLine()) {      
    266c:	0e 94 99 0a 	call	0x1532	; 0x1532 <checkCrossLine>
    2670:	88 23       	and	r24, r24
    2672:	29 f0       	breq	.+10     	; 0x267e <run+0xd6>
				runCase = 21;
				cnt1 = 0;
    2674:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    2678:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				break;
    267c:	45 c0       	rjmp	.+138    	; 0x2708 <run+0x160>
			}
			else {					
				switch (checkCrossHalfLine())
    267e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <checkCrossHalfLine>
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	41 f0       	breq	.+16     	; 0x2696 <run+0xee>
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	61 f4       	brne	.+24     	; 0x26a2 <run+0xfa>
				{
					case HALF_LEFT_LINE:
					cnt1 = 0;
    268a:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    268e:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
					runCase = 12;
    2692:	cd 2f       	mov	r28, r29
					break;
    2694:	07 c0       	rjmp	.+14     	; 0x26a4 <run+0xfc>
					
					case HALF_RIGHT_LINE:
					cnt1 = 0;
    2696:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    269a:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
					runCase = 13;
    269e:	c0 2f       	mov	r28, r16
					break;
    26a0:	01 c0       	rjmp	.+2      	; 0x26a4 <run+0xfc>
				runCase = 21;
				cnt1 = 0;
				break;
			}
			else {					
				switch (checkCrossHalfLine())
    26a2:	c1 2f       	mov	r28, r17
					
					default :
					break;
				}
			}
			runForwardLine(speedRunForward);
    26a4:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <speedRunForward>
    26a8:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <speedRunForward+0x1>
    26ac:	16 d8       	rcall	.-4052   	; 0x16da <runForwardLine>
			break;
    26ae:	82 cf       	rjmp	.-252    	; 0x25b4 <run+0xc>
			case 12:
			/* Check of large turning to the right completion */
			if( checkCrossLine()) {   /* Cross line check even during turning */
    26b0:	0e 94 99 0a 	call	0x1532	; 0x1532 <checkCrossLine>
    26b4:	88 23       	and	r24, r24
    26b6:	29 f0       	breq	.+10     	; 0x26c2 <run+0x11a>
				runCase = 21;
				cnt1 = 0;
    26b8:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    26bc:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				break;
    26c0:	23 c0       	rjmp	.+70     	; 0x2708 <run+0x160>
			}
			runCase = leftLaneChange(speedChangeLanes);
    26c2:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <speedChangeLanes>
    26c6:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <speedChangeLanes+0x1>
    26ca:	e9 dd       	rcall	.-1070   	; 0x229e <leftLaneChange>
    26cc:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    26ce:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    26d2:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
			straightLine = 0;
    26d6:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
			break;
    26da:	6c cf       	rjmp	.-296    	; 0x25b4 <run+0xc>
			case 13:
			/* Check of large turning completion to the left */
			if( checkCrossLine() ) {   /* Cross line check even during large turn */
    26dc:	0e 94 99 0a 	call	0x1532	; 0x1532 <checkCrossLine>
    26e0:	88 23       	and	r24, r24
    26e2:	29 f0       	breq	.+10     	; 0x26ee <run+0x146>
				runCase = 21;
				cnt1 = 0;
    26e4:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    26e8:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
				break;
    26ec:	0d c0       	rjmp	.+26     	; 0x2708 <run+0x160>
			}
			runCase = rightLaneChange(speedChangeLanes);
    26ee:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <speedChangeLanes>
    26f2:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <speedChangeLanes+0x1>
    26f6:	aa de       	rcall	.-684    	; 0x244c <rightLaneChange>
    26f8:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    26fa:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    26fe:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
			straightLine = 0;
    2702:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
			break;
    2706:	56 cf       	rjmp	.-340    	; 0x25b4 <run+0xc>

			case 21:
			/* Process when first Cross line is detected */
			beep_long(100);
    2708:	84 e6       	ldi	r24, 0x64	; 100
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			runCase = turn90(speedTurn90);
    2710:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <speedTurn90>
    2714:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <speedTurn90+0x1>
    2718:	2d dc       	rcall	.-1958   	; 0x1f74 <turn90>
    271a:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    271c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    2720:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
			straightLine = 0;
    2724:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <straightLine>
			break;
    2728:	45 cf       	rjmp	.-374    	; 0x25b4 <run+0xc>
			
			case 100:
			if (cnt1<500)
    272a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt1>
    272e:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <cnt1+0x1>
    2732:	84 3f       	cpi	r24, 0xF4	; 244
    2734:	91 40       	sbci	r25, 0x01	; 1
    2736:	30 f4       	brcc	.+12     	; 0x2744 <run+0x19c>
			{
				speed(0,0);
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	f1 d0       	rcall	.+482    	; 0x2924 <speed>
    2742:	f3 cf       	rjmp	.-26     	; 0x272a <run+0x182>
			}
			else
			{
				speed(0,0);
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	70 e0       	ldi	r23, 0x00	; 0
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	eb d0       	rcall	.+470    	; 0x2924 <speed>
    274e:	80 e0       	ldi	r24, 0x00	; 0
				handle(0);
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2756:	e9 cf       	rjmp	.-46     	; 0x272a <run+0x182>
    2758:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
			}
			break;
			default:
			runCase = 11;
			cnt1 = 0;
    275c:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
    2760:	85 cf       	rjmp	.-246    	; 0x266c <run+0xc4>

00002762 <__vector_23>:
    2762:	1f 92       	push	r1
    2764:	0f 92       	push	r0
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	0f 92       	push	r0
    276a:	11 24       	eor	r1, r1
    276c:	0b b6       	in	r0, 0x3b	; 59
    276e:	0f 92       	push	r0
    2770:	2f 93       	push	r18
    2772:	3f 93       	push	r19
    2774:	4f 93       	push	r20
    2776:	5f 93       	push	r21
    2778:	6f 93       	push	r22
    277a:	7f 93       	push	r23
    277c:	8f 93       	push	r24
    277e:	9f 93       	push	r25
    2780:	af 93       	push	r26
    2782:	bf 93       	push	r27
    2784:	ef 93       	push	r30
    2786:	ff 93       	push	r31
    2788:	86 e0       	ldi	r24, 0x06	; 6
    278a:	86 bd       	out	0x26, r24	; 38
    278c:	e4 d2       	rcall	.+1480   	; 0x2d56 <virtual_timer>
    278e:	0e 94 87 03 	call	0x70e	; 0x70e <beep_mod>
    2792:	0e 94 d6 04 	call	0x9ac	; 0x9ac <update_input>
    2796:	0e 94 ef 02 	call	0x5de	; 0x5de <read_sensor>
    279a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    279e:	0e 94 36 07 	call	0xe6c	; 0xe6c <led_put>
    27a2:	ff 91       	pop	r31
    27a4:	ef 91       	pop	r30
    27a6:	bf 91       	pop	r27
    27a8:	af 91       	pop	r26
    27aa:	9f 91       	pop	r25
    27ac:	8f 91       	pop	r24
    27ae:	7f 91       	pop	r23
    27b0:	6f 91       	pop	r22
    27b2:	5f 91       	pop	r21
    27b4:	4f 91       	pop	r20
    27b6:	3f 91       	pop	r19
    27b8:	2f 91       	pop	r18
    27ba:	0f 90       	pop	r0
    27bc:	0b be       	out	0x3b, r0	; 59
    27be:	0f 90       	pop	r0
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	0f 90       	pop	r0
    27c4:	1f 90       	pop	r1
    27c6:	18 95       	reti

000027c8 <init>:
    27c8:	80 e8       	ldi	r24, 0x80	; 128
    27ca:	80 bf       	out	0x30, r24	; 48
    27cc:	0e 94 44 04 	call	0x888	; 0x888 <handle_init>
    27d0:	76 d0       	rcall	.+236    	; 0x28be <speed_init>
    27d2:	a8 d2       	rcall	.+1360   	; 0x2d24 <timer_init>
    27d4:	0e 94 9b 02 	call	0x536	; 0x536 <adc_init>
    27d8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <beep_init>
    27dc:	0e 94 28 07 	call	0xe50	; 0xe50 <led_init>
    27e0:	0e 94 b3 04 	call	0x966	; 0x966 <input_init>
    27e4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <encoder_init>
    27e8:	0e 94 8a 04 	call	0x914	; 0x914 <read_handle_center>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    27f4:	0e 94 75 03 	call	0x6ea	; 0x6ea <read_vcompare>
    27f8:	0c 94 59 05 	jmp	0xab2	; 0xab2 <LCD_Init>
    27fc:	08 95       	ret

000027fe <batteryCheck>:
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	0e 94 bd 02 	call	0x57a	; 0x57a <read_bat>
    2806:	ec 01       	movw	r28, r24
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
    2810:	84 e6       	ldi	r24, 0x64	; 100
    2812:	8c 9f       	mul	r24, r28
    2814:	90 01       	movw	r18, r0
    2816:	8d 9f       	mul	r24, r29
    2818:	30 0d       	add	r19, r0
    281a:	11 24       	eor	r1, r1
    281c:	36 95       	lsr	r19
    281e:	27 95       	ror	r18
    2820:	a1 ea       	ldi	r26, 0xA1	; 161
    2822:	bf eb       	ldi	r27, 0xBF	; 191
    2824:	04 d3       	rcall	.+1544   	; 0x2e2e <__umulhisi3>
    2826:	88 0f       	add	r24, r24
    2828:	89 2f       	mov	r24, r25
    282a:	88 1f       	adc	r24, r24
    282c:	99 0b       	sbc	r25, r25
    282e:	91 95       	neg	r25
    2830:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
    2834:	0d c0       	rjmp	.+26     	; 0x2850 <batteryCheck+0x52>
    2836:	84 e1       	ldi	r24, 0x14	; 20
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    283e:	2f ef       	ldi	r18, 0xFF	; 255
    2840:	81 ee       	ldi	r24, 0xE1	; 225
    2842:	94 e0       	ldi	r25, 0x04	; 4
    2844:	21 50       	subi	r18, 0x01	; 1
    2846:	80 40       	sbci	r24, 0x00	; 0
    2848:	90 40       	sbci	r25, 0x00	; 0
    284a:	e1 f7       	brne	.-8      	; 0x2844 <batteryCheck+0x46>
    284c:	00 c0       	rjmp	.+0      	; 0x284e <batteryCheck+0x50>
    284e:	00 00       	nop
    2850:	0e 94 bd 02 	call	0x57a	; 0x57a <read_bat>
    2854:	8c 32       	cpi	r24, 0x2C	; 44
    2856:	91 40       	sbci	r25, 0x01	; 1
    2858:	70 f3       	brcs	.-36     	; 0x2836 <batteryCheck+0x38>
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	08 95       	ret

00002860 <main>:
    2860:	b3 df       	rcall	.-154    	; 0x27c8 <init>
    2862:	78 94       	sei
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	70 e0       	ldi	r23, 0x00	; 0
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	5b d0       	rcall	.+182    	; 0x2924 <speed>
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <testing_flag>
    2874:	84 e1       	ldi	r24, 0x14	; 20
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
    2884:	84 e7       	ldi	r24, 0x74	; 116
    2886:	92 e0       	ldi	r25, 0x02	; 2
    2888:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_Puts>
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	82 e0       	ldi	r24, 0x02	; 2
    2890:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
    2894:	8c e7       	ldi	r24, 0x7C	; 124
    2896:	92 e0       	ldi	r25, 0x02	; 2
    2898:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_Puts>
    289c:	2f ef       	ldi	r18, 0xFF	; 255
    289e:	8d e3       	ldi	r24, 0x3D	; 61
    28a0:	99 e4       	ldi	r25, 0x49	; 73
    28a2:	21 50       	subi	r18, 0x01	; 1
    28a4:	80 40       	sbci	r24, 0x00	; 0
    28a6:	90 40       	sbci	r25, 0x00	; 0
    28a8:	e1 f7       	brne	.-8      	; 0x28a2 <main+0x42>
    28aa:	00 c0       	rjmp	.+0      	; 0x28ac <main+0x4c>
    28ac:	00 00       	nop
    28ae:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCD_Clr>
    28b2:	a5 df       	rcall	.-182    	; 0x27fe <batteryCheck>
    28b4:	72 d0       	rcall	.+228    	; 0x299a <test>
    28b6:	78 de       	rcall	.-784    	; 0x25a8 <run>
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	08 95       	ret

000028be <speed_init>:
/*  Description: configure hardware   */
/*               for PWM (speed)      */
/*               function             */
/*====================================*/
void speed_init(){
	DIR_DDR  |=  _BV(DIR_LEFT)|_BV(DIR_RIGHT)|_BV(DIR_STEERING);
    28be:	8d b1       	in	r24, 0x0d	; 13
    28c0:	84 6c       	ori	r24, 0xC4	; 196
    28c2:	8d b9       	out	0x0d, r24	; 13
	PWM_DDR  |=  _BV(PWM_LEFT)|_BV(PWM_RIGHT)|_BV(PWM_STEERING);
    28c4:	8d b1       	in	r24, 0x0d	; 13
    28c6:	88 63       	ori	r24, 0x38	; 56
    28c8:	8d b9       	out	0x0d, r24	; 13
	BRAKE_DDR  |=  _BV(BRAKE_RIGHT)|_BV(BRAKE_LEFT)|_BV(BRAKE_STEERING);
    28ca:	84 b1       	in	r24, 0x04	; 4
    28cc:	87 60       	ori	r24, 0x07	; 7
    28ce:	84 b9       	out	0x04, r24	; 4
	BRAKE_POUT  |=  _BV(BRAKE_RIGHT)|_BV(BRAKE_LEFT)|_BV(BRAKE_STEERING);
    28d0:	85 b1       	in	r24, 0x05	; 5
    28d2:	87 60       	ori	r24, 0x07	; 7
    28d4:	85 b9       	out	0x05, r24	; 5
	// Timer3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=(1<<COM3A1) | (0<<COM3A0) | (1<<COM3B1) | (0<<COM3B0) | (1<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (1<<WGM30);
    28d6:	89 ea       	ldi	r24, 0xA9	; 169
    28d8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	TCNT3H=0x00;
    28e2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
	TCNT3L=0x00;
    28e6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	ICR3H=0x00;
    28ea:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
	ICR3L=0x00;
    28ee:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	OCR3AH=0x00;
    28f2:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
	OCR3AL=0x00;
    28f6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	OCR3BH=0x00;
    28fa:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
	OCR3BL=0x00;
    28fe:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
	OCR3CH=0x00;
    2902:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
	OCR3CL=0x00;
    2906:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
    290a:	08 95       	ret

0000290c <set_left_dir>:
/*  Parameter: _dir                   */
/*  Description: setting direction for*/
/*             left motor             */
/*====================================*/
void set_left_dir(unsigned char _dir){
	if(_dir == FORWARD)
    290c:	81 30       	cpi	r24, 0x01	; 1
    290e:	11 f4       	brne	.+4      	; 0x2914 <set_left_dir+0x8>
		DIR_POUT |= _BV(DIR_LEFT);
    2910:	72 9a       	sbi	0x0e, 2	; 14
    2912:	08 95       	ret
	else
		DIR_POUT &= ~_BV(DIR_LEFT);
    2914:	72 98       	cbi	0x0e, 2	; 14
    2916:	08 95       	ret

00002918 <set_right_dir>:
/*  Parameter: _dir                   */
/*  Description: setting direction for*/
/*             right motor            */
/*====================================*/
void set_right_dir(unsigned char _dir){
	if(_dir == FORWARD)
    2918:	81 30       	cpi	r24, 0x01	; 1
    291a:	11 f4       	brne	.+4      	; 0x2920 <set_right_dir+0x8>
		DIR_POUT |= _BV(DIR_RIGHT);
    291c:	76 9a       	sbi	0x0e, 6	; 14
    291e:	08 95       	ret
	else
		DIR_POUT &= ~_BV(DIR_RIGHT);
    2920:	76 98       	cbi	0x0e, 6	; 14
    2922:	08 95       	ret

00002924 <speed>:
/*  Function name: speed              */
/*  Parameter:_left_speed,_right_speed*/
/*  Description: setting speed for    */
/*             left and right motor   */
/*====================================*/
void speed(int _left_speed  , int _right_speed ){
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	8c 01       	movw	r16, r24
    292e:	eb 01       	movw	r28, r22

	if(_left_speed >= 0){
    2930:	99 23       	and	r25, r25
    2932:	1c f0       	brlt	.+6      	; 0x293a <speed+0x16>
		set_left_dir(FORWARD);
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	ea df       	rcall	.-44     	; 0x290c <set_left_dir>
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <speed+0x20>
	}else{
		_left_speed = -_left_speed;
    293a:	11 95       	neg	r17
    293c:	01 95       	neg	r16
    293e:	11 09       	sbc	r17, r1
		set_left_dir(BACKWARD);
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	e4 df       	rcall	.-56     	; 0x290c <set_left_dir>
	}
	if(_right_speed >= 0){
    2944:	dd 23       	and	r29, r29
		set_right_dir(FORWARD);
    2946:	1c f0       	brlt	.+6      	; 0x294e <speed+0x2a>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	e6 df       	rcall	.-52     	; 0x2918 <set_right_dir>
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <speed+0x34>
	}else{
		_right_speed = -_right_speed;
    294e:	d1 95       	neg	r29
    2950:	c1 95       	neg	r28
		set_right_dir(BACKWARD);
    2952:	d1 09       	sbc	r29, r1
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	e0 df       	rcall	.-64     	; 0x2918 <set_right_dir>
    2958:	0f 3f       	cpi	r16, 0xFF	; 255
    295a:	11 05       	cpc	r17, r1
    295c:	19 f0       	breq	.+6      	; 0x2964 <speed+0x40>
    295e:	14 f0       	brlt	.+4      	; 0x2964 <speed+0x40>
    2960:	0f ef       	ldi	r16, 0xFF	; 255
    2962:	10 e0       	ldi	r17, 0x00	; 0
    2964:	cf 3f       	cpi	r28, 0xFF	; 255
    2966:	d1 05       	cpc	r29, r1
    2968:	19 f0       	breq	.+6      	; 0x2970 <speed+0x4c>
    296a:	14 f0       	brlt	.+4      	; 0x2970 <speed+0x4c>
    296c:	cf ef       	ldi	r28, 0xFF	; 255
    296e:	d0 e0       	ldi	r29, 0x00	; 0
	if(_left_speed < MIN_SPEED)  _left_speed = 0;
	
	if(_right_speed > MAX_SPEED)  _right_speed = MAX_SPEED;
	if(_right_speed < MIN_SPEED)  _right_speed = 0;

	LEFT_SPEED  = _left_speed;
    2970:	11 23       	and	r17, r17
    2972:	14 f4       	brge	.+4      	; 0x2978 <speed+0x54>
    2974:	00 e0       	ldi	r16, 0x00	; 0
    2976:	10 e0       	ldi	r17, 0x00	; 0
    2978:	10 93 99 00 	sts	0x0099, r17	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    297c:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	RIGHT_SPEED = _right_speed;
    2980:	dd 23       	and	r29, r29
    2982:	14 f4       	brge	.+4      	; 0x2988 <speed+0x64>
    2984:	c0 e0       	ldi	r28, 0x00	; 0
    2986:	d0 e0       	ldi	r29, 0x00	; 0
    2988:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    298c:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
}
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <test>:
/*  Description: to implement cases   */
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
			break;
			case 4://the RGB light turns blue
			RGB(0,1,1);
			LCD_Clr();
			LCD_Gotoxy(0,0);
			LCD_PutDec(sensor_value[7]);
    299e:	cc ed       	ldi	r28, 0xDC	; 220
    29a0:	d2 e0       	ldi	r29, 0x02	; 2
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
	while(testing_flag == 1){
    29a2:	b8 c1       	rjmp	.+880    	; 0x2d14 <test+0x37a>
		switch(get_dipsw()){
    29a4:	0e 94 0a 05 	call	0xa14	; 0xa14 <get_dipsw>
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	09 f4       	brne	.+2      	; 0x29ae <test+0x14>
    29ac:	91 c0       	rjmp	.+290    	; 0x2ad0 <test+0x136>
    29ae:	28 f4       	brcc	.+10     	; 0x29ba <test+0x20>
    29b0:	88 23       	and	r24, r24
    29b2:	61 f0       	breq	.+24     	; 0x29cc <test+0x32>
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	e9 f1       	breq	.+122    	; 0x2a32 <test+0x98>
    29b8:	79 c1       	rjmp	.+754    	; 0x2cac <test+0x312>
    29ba:	84 30       	cpi	r24, 0x04	; 4
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <test+0x26>
    29be:	f9 c0       	rjmp	.+498    	; 0x2bb2 <test+0x218>
    29c0:	08 f4       	brcc	.+2      	; 0x29c4 <test+0x2a>
    29c2:	e7 c0       	rjmp	.+462    	; 0x2b92 <test+0x1f8>
    29c4:	85 30       	cpi	r24, 0x05	; 5
    29c6:	09 f4       	brne	.+2      	; 0x29ca <test+0x30>
    29c8:	45 c1       	rjmp	.+650    	; 0x2c54 <test+0x2ba>
    29ca:	70 c1       	rjmp	.+736    	; 0x2cac <test+0x312>
			case 0:
			RGB(1,0,0); //the RGB light turns red
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/*************line sensor calibration************/
			if (SW1){	// press SW1 to update black value
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    29dc:	88 23       	and	r24, r24
    29de:	31 f0       	breq	.+12     	; 0x29ec <test+0x52>
				update_black();
    29e0:	0e 94 4f 03 	call	0x69e	; 0x69e <update_black>
				beep_long(20);
    29e4:	84 e1       	ldi	r24, 0x14	; 20
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW2){	// press SW2 to update white value
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    29f2:	88 23       	and	r24, r24
    29f4:	31 f0       	breq	.+12     	; 0x2a02 <test+0x68>
				update_white();
    29f6:	0e 94 29 03 	call	0x652	; 0x652 <update_white>
				beep_long(100);
    29fa:	84 e6       	ldi	r24, 0x64	; 100
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW3){	// press SW3 to save sensor value
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a08:	88 23       	and	r24, r24
    2a0a:	31 f0       	breq	.+12     	; 0x2a18 <test+0x7e>
				update_vcompare();
    2a0c:	0e 94 0a 03 	call	0x614	; 0x614 <update_vcompare>
				beep_long(300);
    2a10:	8c e2       	ldi	r24, 0x2C	; 44
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW4){	// press SW4 to save sensor value
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a1e:	88 23       	and	r24, r24
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <test+0x8a>
    2a22:	78 c1       	rjmp	.+752    	; 0x2d14 <test+0x37a>
				update_vcompare();
    2a24:	0e 94 0a 03 	call	0x614	; 0x614 <update_vcompare>
				beep_long(300);
    2a28:	8c e2       	ldi	r24, 0x2C	; 44
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2a30:	71 c1       	rjmp	.+738    	; 0x2d14 <test+0x37a>
			}
			break;
			case 1:
			RGB(0,1,0);//the RGB light turns green
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/************test DC motor***********/
			if (SW2){			// press KEY1 to run left motor  backward
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a42:	88 23       	and	r24, r24
    2a44:	61 f0       	breq	.+24     	; 0x2a5e <test+0xc4>
				speed(-250,0);
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	86 e0       	ldi	r24, 0x06	; 6
    2a4c:	9f ef       	ldi	r25, 0xFF	; 255
    2a4e:	6a df       	rcall	.-300    	; 0x2924 <speed>
    2a50:	8f e3       	ldi	r24, 0x3F	; 63
    2a52:	9c e9       	ldi	r25, 0x9C	; 156
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <test+0xba>
    2a58:	00 c0       	rjmp	.+0      	; 0x2a5a <test+0xc0>
    2a5a:	00 00       	nop
    2a5c:	5b c1       	rjmp	.+694    	; 0x2d14 <test+0x37a>
				_delay_ms(10);
				}else if(SW1){		// press KEY0 to run left motor forward
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a64:	88 23       	and	r24, r24
    2a66:	61 f0       	breq	.+24     	; 0x2a80 <test+0xe6>
				speed(250,0);
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	8a ef       	ldi	r24, 0xFA	; 250
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	59 df       	rcall	.-334    	; 0x2924 <speed>
    2a72:	8f e3       	ldi	r24, 0x3F	; 63
    2a74:	9c e9       	ldi	r25, 0x9C	; 156
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <test+0xdc>
    2a7a:	00 c0       	rjmp	.+0      	; 0x2a7c <test+0xe2>
    2a7c:	00 00       	nop
    2a7e:	4a c1       	rjmp	.+660    	; 0x2d14 <test+0x37a>
				_delay_ms(10);
				}else if(SW4){		// press KEY3 to run right motor backward
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a86:	88 23       	and	r24, r24
    2a88:	61 f0       	breq	.+24     	; 0x2aa2 <test+0x108>
				speed(0,-250);
    2a8a:	66 e0       	ldi	r22, 0x06	; 6
    2a8c:	7f ef       	ldi	r23, 0xFF	; 255
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	48 df       	rcall	.-368    	; 0x2924 <speed>
    2a94:	8f e3       	ldi	r24, 0x3F	; 63
    2a96:	9c e9       	ldi	r25, 0x9C	; 156
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <test+0xfe>
    2a9c:	00 c0       	rjmp	.+0      	; 0x2a9e <test+0x104>
    2a9e:	00 00       	nop
    2aa0:	39 c1       	rjmp	.+626    	; 0x2d14 <test+0x37a>
				_delay_ms(10);
				}else if(SW3){		// press KEY2 to run right motor forward
    2aa2:	82 e0       	ldi	r24, 0x02	; 2
    2aa4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2aa8:	88 23       	and	r24, r24
    2aaa:	61 f0       	breq	.+24     	; 0x2ac4 <test+0x12a>
				speed(0, 250);
    2aac:	6a ef       	ldi	r22, 0xFA	; 250
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	37 df       	rcall	.-402    	; 0x2924 <speed>
    2ab6:	8f e3       	ldi	r24, 0x3F	; 63
    2ab8:	9c e9       	ldi	r25, 0x9C	; 156
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <test+0x120>
    2abe:	00 c0       	rjmp	.+0      	; 0x2ac0 <test+0x126>
    2ac0:	00 00       	nop
    2ac2:	28 c1       	rjmp	.+592    	; 0x2d14 <test+0x37a>
				_delay_ms(10);
				}else{				// stop
				speed(0,0);
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	2b df       	rcall	.-426    	; 0x2924 <speed>
    2ace:	22 c1       	rjmp	.+580    	; 0x2d14 <test+0x37a>
			}
			
			break;
			case 2:
			RGB(0,0,1);//the RGB light turns blue
    2ad0:	41 e0       	ldi	r20, 0x01	; 1
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/************test RC servo***********/
			if (SW3){			// press SW3 to turn right
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2ae0:	88 23       	and	r24, r24
    2ae2:	b9 f0       	breq	.+46     	; 0x2b12 <test+0x178>
				handle_center -= 2;
    2ae4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <handle_center>
    2ae8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <handle_center+0x1>
    2aec:	02 97       	sbiw	r24, 0x02	; 2
    2aee:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
    2af2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
				handle(0);
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2afe:	9f ef       	ldi	r25, 0xFF	; 255
    2b00:	20 e7       	ldi	r18, 0x70	; 112
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	91 50       	subi	r25, 0x01	; 1
    2b06:	20 40       	sbci	r18, 0x00	; 0
    2b08:	80 40       	sbci	r24, 0x00	; 0
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <test+0x16a>
    2b0c:	00 c0       	rjmp	.+0      	; 0x2b0e <test+0x174>
    2b0e:	00 00       	nop
    2b10:	01 c1       	rjmp	.+514    	; 0x2d14 <test+0x37a>
				_delay_ms(50);
				}else if(SW2){	// press SW2 to turn left
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b18:	88 23       	and	r24, r24
    2b1a:	b9 f0       	breq	.+46     	; 0x2b4a <test+0x1b0>
				handle_center += 2;
    2b1c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <handle_center>
    2b20:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <handle_center+0x1>
    2b24:	02 96       	adiw	r24, 0x02	; 2
    2b26:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
    2b2a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
				handle(0);
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2b36:	9f ef       	ldi	r25, 0xFF	; 255
    2b38:	20 e7       	ldi	r18, 0x70	; 112
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	91 50       	subi	r25, 0x01	; 1
    2b3e:	20 40       	sbci	r18, 0x00	; 0
    2b40:	80 40       	sbci	r24, 0x00	; 0
    2b42:	e1 f7       	brne	.-8      	; 0x2b3c <test+0x1a2>
    2b44:	00 c0       	rjmp	.+0      	; 0x2b46 <test+0x1ac>
    2b46:	00 00       	nop
    2b48:	e5 c0       	rjmp	.+458    	; 0x2d14 <test+0x37a>
				_delay_ms(50);
			}
			else if (SW1||SW4)
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b50:	81 11       	cpse	r24, r1
    2b52:	06 c0       	rjmp	.+12     	; 0x2b60 <test+0x1c6>
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <test+0x1c6>
    2b5e:	da c0       	rjmp	.+436    	; 0x2d14 <test+0x37a>
			{
				save_handle_center();
    2b60:	0e 94 81 04 	call	0x902	; 0x902 <save_handle_center>
    2b64:	9f ef       	ldi	r25, 0xFF	; 255
    2b66:	23 ed       	ldi	r18, 0xD3	; 211
    2b68:	80 e3       	ldi	r24, 0x30	; 48
    2b6a:	91 50       	subi	r25, 0x01	; 1
    2b6c:	20 40       	sbci	r18, 0x00	; 0
    2b6e:	80 40       	sbci	r24, 0x00	; 0
    2b70:	e1 f7       	brne	.-8      	; 0x2b6a <test+0x1d0>
    2b72:	00 c0       	rjmp	.+0      	; 0x2b74 <test+0x1da>
    2b74:	00 00       	nop
				_delay_ms(1000);
				beep_long(200);
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2b7e:	9f ef       	ldi	r25, 0xFF	; 255
    2b80:	23 ec       	ldi	r18, 0xC3	; 195
    2b82:	89 e0       	ldi	r24, 0x09	; 9
    2b84:	91 50       	subi	r25, 0x01	; 1
    2b86:	20 40       	sbci	r18, 0x00	; 0
    2b88:	80 40       	sbci	r24, 0x00	; 0
    2b8a:	e1 f7       	brne	.-8      	; 0x2b84 <test+0x1ea>
    2b8c:	00 c0       	rjmp	.+0      	; 0x2b8e <test+0x1f4>
    2b8e:	00 00       	nop
    2b90:	c1 c0       	rjmp	.+386    	; 0x2d14 <test+0x37a>
				_delay_ms(200);
			}
			break;
			case 3://test encoder
			RGB(1,1,0);//the RGB light turns yellow
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	61 e0       	ldi	r22, 0x01	; 1
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			LCD_Gotoxy(0,0);
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(distance1);
    2ba4:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <distance1>
    2ba8:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <distance1+0x1>
    2bac:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			/************test Encoder***********/
			break;
    2bb0:	b1 c0       	rjmp	.+354    	; 0x2d14 <test+0x37a>
			case 4://the RGB light turns blue
			RGB(0,1,1);
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			LCD_Clr();
    2bbc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCD_Clr>
			LCD_Gotoxy(0,0);
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[7]);
    2bc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bca:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bcc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(4,0);
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	84 e0       	ldi	r24, 0x04	; 4
    2bd4:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[6]);
    2bd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bda:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bdc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(8,0);
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	88 e0       	ldi	r24, 0x08	; 8
    2be4:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[5]);
    2be8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bea:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(12,0);
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	8c e0       	ldi	r24, 0x0C	; 12
    2bf4:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[4]);
    2bf8:	88 85       	ldd	r24, Y+8	; 0x08
    2bfa:	99 85       	ldd	r25, Y+9	; 0x09
    2bfc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(0,1);
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[3]);
    2c08:	8e 81       	ldd	r24, Y+6	; 0x06
    2c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(4,1);
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	84 e0       	ldi	r24, 0x04	; 4
    2c14:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[2]);
    2c18:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c1c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(8,1);
    2c20:	61 e0       	ldi	r22, 0x01	; 1
    2c22:	88 e0       	ldi	r24, 0x08	; 8
    2c24:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[1]);
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(12,1);
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	8c e0       	ldi	r24, 0x0C	; 12
    2c34:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[0]);
    2c38:	88 81       	ld	r24, Y
    2c3a:	99 81       	ldd	r25, Y+1	; 0x01
    2c3c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
    2c40:	9f ef       	ldi	r25, 0xFF	; 255
    2c42:	21 ee       	ldi	r18, 0xE1	; 225
    2c44:	84 e0       	ldi	r24, 0x04	; 4
    2c46:	91 50       	subi	r25, 0x01	; 1
    2c48:	20 40       	sbci	r18, 0x00	; 0
    2c4a:	80 40       	sbci	r24, 0x00	; 0
    2c4c:	e1 f7       	brne	.-8      	; 0x2c46 <test+0x2ac>
    2c4e:	00 c0       	rjmp	.+0      	; 0x2c50 <test+0x2b6>
    2c50:	00 00       	nop
    2c52:	60 c0       	rjmp	.+192    	; 0x2d14 <test+0x37a>
			_delay_ms(100);
			//RYGB(0,100,0,0);
			break;
			case 5:
			RGB(1,0,1);//the RGB light turns purple
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	60 e0       	ldi	r22, 0x00	; 0
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			if (SW3){			// press SW3 to turn right
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2c64:	88 23       	and	r24, r24
    2c66:	71 f0       	breq	.+28     	; 0x2c84 <test+0x2ea>
				
				handle(35);
    2c68:	83 e2       	ldi	r24, 0x23	; 35
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2c70:	9f ef       	ldi	r25, 0xFF	; 255
    2c72:	20 e7       	ldi	r18, 0x70	; 112
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	91 50       	subi	r25, 0x01	; 1
    2c78:	20 40       	sbci	r18, 0x00	; 0
    2c7a:	80 40       	sbci	r24, 0x00	; 0
    2c7c:	e1 f7       	brne	.-8      	; 0x2c76 <test+0x2dc>
    2c7e:	00 c0       	rjmp	.+0      	; 0x2c80 <test+0x2e6>
    2c80:	00 00       	nop
    2c82:	48 c0       	rjmp	.+144    	; 0x2d14 <test+0x37a>
				_delay_ms(50);
				}else if(SW2){	// press SW2 to turn left
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2c8a:	88 23       	and	r24, r24
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <test+0x2f6>
    2c8e:	42 c0       	rjmp	.+132    	; 0x2d14 <test+0x37a>
				
				handle(-35);
    2c90:	8d ed       	ldi	r24, 0xDD	; 221
    2c92:	9f ef       	ldi	r25, 0xFF	; 255
    2c94:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2c98:	9f e7       	ldi	r25, 0x7F	; 127
    2c9a:	22 e3       	ldi	r18, 0x32	; 50
    2c9c:	82 e0       	ldi	r24, 0x02	; 2
    2c9e:	91 50       	subi	r25, 0x01	; 1
    2ca0:	20 40       	sbci	r18, 0x00	; 0
    2ca2:	80 40       	sbci	r24, 0x00	; 0
    2ca4:	e1 f7       	brne	.-8      	; 0x2c9e <test+0x304>
    2ca6:	00 c0       	rjmp	.+0      	; 0x2ca8 <test+0x30e>
    2ca8:	00 00       	nop
    2caa:	34 c0       	rjmp	.+104    	; 0x2d14 <test+0x37a>
				_delay_ms(45);
			}
			
			break;
			default:// go to run.c
			RGB(0,0,0);
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			if (SW1)
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2cbc:	88 23       	and	r24, r24
    2cbe:	39 f0       	breq	.+14     	; 0x2cce <test+0x334>
			{
				
				testing_flag = 0;
    2cc0:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2cc4:	88 ec       	ldi	r24, 0xC8	; 200
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2ccc:	23 c0       	rjmp	.+70     	; 0x2d14 <test+0x37a>
			}
			else if(SW4)
    2cce:	83 e0       	ldi	r24, 0x03	; 3
    2cd0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2cd4:	88 23       	and	r24, r24
    2cd6:	39 f0       	breq	.+14     	; 0x2ce6 <test+0x34c>
			{
				testing_flag = 0;
    2cd8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2cdc:	88 ec       	ldi	r24, 0xC8	; 200
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2ce4:	17 c0       	rjmp	.+46     	; 0x2d14 <test+0x37a>
			}
			else if (SW2)
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2cec:	88 23       	and	r24, r24
    2cee:	39 f0       	breq	.+14     	; 0x2cfe <test+0x364>
			{
				
				testing_flag = 0;
    2cf0:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2cf4:	88 ec       	ldi	r24, 0xC8	; 200
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2cfc:	0b c0       	rjmp	.+22     	; 0x2d14 <test+0x37a>
			}
			else if(SW3)
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
    2d00:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d04:	88 23       	and	r24, r24
    2d06:	31 f0       	breq	.+12     	; 0x2d14 <test+0x37a>
			{
				testing_flag = 0;
    2d08:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2d0c:	88 ec       	ldi	r24, 0xC8	; 200
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
	while(testing_flag == 1){
    2d14:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <testing_flag>
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <test+0x384>
    2d1c:	43 ce       	rjmp	.-890    	; 0x29a4 <test+0xa>
			
			break;
			
		}
	}
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	08 95       	ret

00002d24 <timer_init>:
/*  Description: configure hardware   */
/*               for timer function   */
/*====================================*/
void timer_init()
{	
	cnt1 = cnt2 = cnt3 = cnt4 = 0;
    2d24:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <cnt4+0x1>
    2d28:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <cnt4>
    2d2c:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <cnt3+0x1>
    2d30:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <cnt3>
    2d34:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt2+0x1>
    2d38:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt2>
    2d3c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <cnt1+0x1>
    2d40:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt1>
// Clock value: 250.000 kHz
// Mode: Normal top=0xFF
// OC0A output: Disconnected
// OC0B output: Disconnected
// Timer Period: 1 ms
TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
    2d44:	14 bc       	out	0x24, r1	; 36
TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	85 bd       	out	0x25, r24	; 37
TCNT0=0x06;
    2d4a:	86 e0       	ldi	r24, 0x06	; 6
    2d4c:	86 bd       	out	0x26, r24	; 38
TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
    2d54:	08 95       	ret

00002d56 <virtual_timer>:
/*  Description: virtual timer        */
/*           virtual delay to use in  */
/*           algorithm                */ 
/*====================================*/
void virtual_timer(){
	cnt1 ++;
    2d56:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt1>
    2d5a:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <cnt1+0x1>
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <cnt1+0x1>
    2d64:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <cnt1>
	cnt2 ++;
    2d68:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <cnt2>
    2d6c:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <cnt2+0x1>
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <cnt2+0x1>
    2d76:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <cnt2>
	cnt4 ++;
    2d7a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <cnt4>
    2d7e:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <cnt4+0x1>
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <cnt4+0x1>
    2d88:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <cnt4>
	if (curveFlag == 0)
    2d8c:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <curveFlag>
    2d90:	81 11       	cpse	r24, r1
    2d92:	0a c0       	rjmp	.+20     	; 0x2da8 <virtual_timer+0x52>
	{
		cnt3++;
    2d94:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <cnt3>
    2d98:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <cnt3+0x1>
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <cnt3+0x1>
    2da2:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <cnt3>
    2da6:	15 c0       	rjmp	.+42     	; 0x2dd2 <virtual_timer+0x7c>
	}
	else if (curveFlag == 1)		
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	99 f4       	brne	.+38     	; 0x2dd2 <virtual_timer+0x7c>
	{
		cnt3 = 0;
    2dac:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <cnt3+0x1>
    2db0:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <cnt3>
		brakeCurve--;	
    2db4:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <brakeCurve>
    2db8:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <brakeCurve+0x1>
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
		if (brakeCurve < 10)
    2dbe:	8a 30       	cpi	r24, 0x0A	; 10
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	a8 f4       	brcc	.+42     	; 0x2dee <virtual_timer+0x98>
		{
			brakeCurve = 10;
    2dc4:	8a e0       	ldi	r24, 0x0A	; 10
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <brakeCurve+0x1>
    2dcc:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <brakeCurve>
    2dd0:	08 95       	ret
		}	
	}
	if (cnt3 > 300)
    2dd2:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <cnt3>
    2dd6:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <cnt3+0x1>
    2dda:	8d 32       	cpi	r24, 0x2D	; 45
    2ddc:	91 40       	sbci	r25, 0x01	; 1
    2dde:	58 f0       	brcs	.+22     	; 0x2df6 <virtual_timer+0xa0>
	{
		brakeCurve = 81;
    2de0:	81 e5       	ldi	r24, 0x51	; 81
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <brakeCurve+0x1>
    2de8:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <brakeCurve>
// 	{
// 		velocity = distance2;
// 		cnt3 = 0;
// 		distance2 =  0;
// 	}
}
    2dec:	08 95       	ret
		cnt3++;
	}
	else if (curveFlag == 1)		
	{
		cnt3 = 0;
		brakeCurve--;	
    2dee:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <brakeCurve+0x1>
    2df2:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <brakeCurve>
    2df6:	08 95       	ret

00002df8 <__divmodhi4>:
    2df8:	97 fb       	bst	r25, 7
    2dfa:	07 2e       	mov	r0, r23
    2dfc:	16 f4       	brtc	.+4      	; 0x2e02 <__divmodhi4+0xa>
    2dfe:	00 94       	com	r0
    2e00:	06 d0       	rcall	.+12     	; 0x2e0e <__divmodhi4_neg1>
    2e02:	77 fd       	sbrc	r23, 7
    2e04:	08 d0       	rcall	.+16     	; 0x2e16 <__divmodhi4_neg2>
    2e06:	22 d0       	rcall	.+68     	; 0x2e4c <__udivmodhi4>
    2e08:	07 fc       	sbrc	r0, 7
    2e0a:	05 d0       	rcall	.+10     	; 0x2e16 <__divmodhi4_neg2>
    2e0c:	3e f4       	brtc	.+14     	; 0x2e1c <__divmodhi4_exit>

00002e0e <__divmodhi4_neg1>:
    2e0e:	90 95       	com	r25
    2e10:	81 95       	neg	r24
    2e12:	9f 4f       	sbci	r25, 0xFF	; 255
    2e14:	08 95       	ret

00002e16 <__divmodhi4_neg2>:
    2e16:	70 95       	com	r23
    2e18:	61 95       	neg	r22
    2e1a:	7f 4f       	sbci	r23, 0xFF	; 255

00002e1c <__divmodhi4_exit>:
    2e1c:	08 95       	ret

00002e1e <__tablejump2__>:
    2e1e:	ee 0f       	add	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	88 1f       	adc	r24, r24
    2e24:	8b bf       	out	0x3b, r24	; 59
    2e26:	07 90       	elpm	r0, Z+
    2e28:	f6 91       	elpm	r31, Z
    2e2a:	e0 2d       	mov	r30, r0
    2e2c:	19 94       	eijmp

00002e2e <__umulhisi3>:
    2e2e:	a2 9f       	mul	r26, r18
    2e30:	b0 01       	movw	r22, r0
    2e32:	b3 9f       	mul	r27, r19
    2e34:	c0 01       	movw	r24, r0
    2e36:	a3 9f       	mul	r26, r19
    2e38:	70 0d       	add	r23, r0
    2e3a:	81 1d       	adc	r24, r1
    2e3c:	11 24       	eor	r1, r1
    2e3e:	91 1d       	adc	r25, r1
    2e40:	b2 9f       	mul	r27, r18
    2e42:	70 0d       	add	r23, r0
    2e44:	81 1d       	adc	r24, r1
    2e46:	11 24       	eor	r1, r1
    2e48:	91 1d       	adc	r25, r1
    2e4a:	08 95       	ret

00002e4c <__udivmodhi4>:
    2e4c:	aa 1b       	sub	r26, r26
    2e4e:	bb 1b       	sub	r27, r27
    2e50:	51 e1       	ldi	r21, 0x11	; 17
    2e52:	07 c0       	rjmp	.+14     	; 0x2e62 <__udivmodhi4_ep>

00002e54 <__udivmodhi4_loop>:
    2e54:	aa 1f       	adc	r26, r26
    2e56:	bb 1f       	adc	r27, r27
    2e58:	a6 17       	cp	r26, r22
    2e5a:	b7 07       	cpc	r27, r23
    2e5c:	10 f0       	brcs	.+4      	; 0x2e62 <__udivmodhi4_ep>
    2e5e:	a6 1b       	sub	r26, r22
    2e60:	b7 0b       	sbc	r27, r23

00002e62 <__udivmodhi4_ep>:
    2e62:	88 1f       	adc	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	5a 95       	dec	r21
    2e68:	a9 f7       	brne	.-22     	; 0x2e54 <__udivmodhi4_loop>
    2e6a:	80 95       	com	r24
    2e6c:	90 95       	com	r25
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	08 95       	ret

00002e74 <malloc>:
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	91 05       	cpc	r25, r1
    2e80:	10 f4       	brcc	.+4      	; 0x2e86 <malloc+0x12>
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <__flp>
    2e8a:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <__flp+0x1>
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	a0 e0       	ldi	r26, 0x00	; 0
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	30 97       	sbiw	r30, 0x00	; 0
    2e98:	19 f1       	breq	.+70     	; 0x2ee0 <malloc+0x6c>
    2e9a:	40 81       	ld	r20, Z
    2e9c:	51 81       	ldd	r21, Z+1	; 0x01
    2e9e:	02 81       	ldd	r16, Z+2	; 0x02
    2ea0:	13 81       	ldd	r17, Z+3	; 0x03
    2ea2:	48 17       	cp	r20, r24
    2ea4:	59 07       	cpc	r21, r25
    2ea6:	c8 f0       	brcs	.+50     	; 0x2eda <malloc+0x66>
    2ea8:	84 17       	cp	r24, r20
    2eaa:	95 07       	cpc	r25, r21
    2eac:	69 f4       	brne	.+26     	; 0x2ec8 <malloc+0x54>
    2eae:	10 97       	sbiw	r26, 0x00	; 0
    2eb0:	31 f0       	breq	.+12     	; 0x2ebe <malloc+0x4a>
    2eb2:	12 96       	adiw	r26, 0x02	; 2
    2eb4:	0c 93       	st	X, r16
    2eb6:	12 97       	sbiw	r26, 0x02	; 2
    2eb8:	13 96       	adiw	r26, 0x03	; 3
    2eba:	1c 93       	st	X, r17
    2ebc:	27 c0       	rjmp	.+78     	; 0x2f0c <malloc+0x98>
    2ebe:	00 93 5f 03 	sts	0x035F, r16	; 0x80035f <__flp>
    2ec2:	10 93 60 03 	sts	0x0360, r17	; 0x800360 <__flp+0x1>
    2ec6:	22 c0       	rjmp	.+68     	; 0x2f0c <malloc+0x98>
    2ec8:	21 15       	cp	r18, r1
    2eca:	31 05       	cpc	r19, r1
    2ecc:	19 f0       	breq	.+6      	; 0x2ed4 <malloc+0x60>
    2ece:	42 17       	cp	r20, r18
    2ed0:	53 07       	cpc	r21, r19
    2ed2:	18 f4       	brcc	.+6      	; 0x2eda <malloc+0x66>
    2ed4:	9a 01       	movw	r18, r20
    2ed6:	bd 01       	movw	r22, r26
    2ed8:	ef 01       	movw	r28, r30
    2eda:	df 01       	movw	r26, r30
    2edc:	f8 01       	movw	r30, r16
    2ede:	db cf       	rjmp	.-74     	; 0x2e96 <malloc+0x22>
    2ee0:	21 15       	cp	r18, r1
    2ee2:	31 05       	cpc	r19, r1
    2ee4:	f9 f0       	breq	.+62     	; 0x2f24 <malloc+0xb0>
    2ee6:	28 1b       	sub	r18, r24
    2ee8:	39 0b       	sbc	r19, r25
    2eea:	24 30       	cpi	r18, 0x04	; 4
    2eec:	31 05       	cpc	r19, r1
    2eee:	80 f4       	brcc	.+32     	; 0x2f10 <malloc+0x9c>
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef4:	61 15       	cp	r22, r1
    2ef6:	71 05       	cpc	r23, r1
    2ef8:	21 f0       	breq	.+8      	; 0x2f02 <malloc+0x8e>
    2efa:	fb 01       	movw	r30, r22
    2efc:	93 83       	std	Z+3, r25	; 0x03
    2efe:	82 83       	std	Z+2, r24	; 0x02
    2f00:	04 c0       	rjmp	.+8      	; 0x2f0a <malloc+0x96>
    2f02:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <__flp+0x1>
    2f06:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <__flp>
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	32 96       	adiw	r30, 0x02	; 2
    2f0e:	44 c0       	rjmp	.+136    	; 0x2f98 <malloc+0x124>
    2f10:	fe 01       	movw	r30, r28
    2f12:	e2 0f       	add	r30, r18
    2f14:	f3 1f       	adc	r31, r19
    2f16:	81 93       	st	Z+, r24
    2f18:	91 93       	st	Z+, r25
    2f1a:	22 50       	subi	r18, 0x02	; 2
    2f1c:	31 09       	sbc	r19, r1
    2f1e:	39 83       	std	Y+1, r19	; 0x01
    2f20:	28 83       	st	Y, r18
    2f22:	3a c0       	rjmp	.+116    	; 0x2f98 <malloc+0x124>
    2f24:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <__brkval>
    2f28:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <__brkval+0x1>
    2f2c:	23 2b       	or	r18, r19
    2f2e:	41 f4       	brne	.+16     	; 0x2f40 <malloc+0xcc>
    2f30:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2f34:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2f38:	30 93 5e 03 	sts	0x035E, r19	; 0x80035e <__brkval+0x1>
    2f3c:	20 93 5d 03 	sts	0x035D, r18	; 0x80035d <__brkval>
    2f40:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2f44:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2f48:	21 15       	cp	r18, r1
    2f4a:	31 05       	cpc	r19, r1
    2f4c:	41 f4       	brne	.+16     	; 0x2f5e <malloc+0xea>
    2f4e:	2d b7       	in	r18, 0x3d	; 61
    2f50:	3e b7       	in	r19, 0x3e	; 62
    2f52:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2f56:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2f5a:	24 1b       	sub	r18, r20
    2f5c:	35 0b       	sbc	r19, r21
    2f5e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <__brkval>
    2f62:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <__brkval+0x1>
    2f66:	e2 17       	cp	r30, r18
    2f68:	f3 07       	cpc	r31, r19
    2f6a:	a0 f4       	brcc	.+40     	; 0x2f94 <malloc+0x120>
    2f6c:	2e 1b       	sub	r18, r30
    2f6e:	3f 0b       	sbc	r19, r31
    2f70:	28 17       	cp	r18, r24
    2f72:	39 07       	cpc	r19, r25
    2f74:	78 f0       	brcs	.+30     	; 0x2f94 <malloc+0x120>
    2f76:	ac 01       	movw	r20, r24
    2f78:	4e 5f       	subi	r20, 0xFE	; 254
    2f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7c:	24 17       	cp	r18, r20
    2f7e:	35 07       	cpc	r19, r21
    2f80:	48 f0       	brcs	.+18     	; 0x2f94 <malloc+0x120>
    2f82:	4e 0f       	add	r20, r30
    2f84:	5f 1f       	adc	r21, r31
    2f86:	50 93 5e 03 	sts	0x035E, r21	; 0x80035e <__brkval+0x1>
    2f8a:	40 93 5d 03 	sts	0x035D, r20	; 0x80035d <__brkval>
    2f8e:	81 93       	st	Z+, r24
    2f90:	91 93       	st	Z+, r25
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <malloc+0x124>
    2f94:	e0 e0       	ldi	r30, 0x00	; 0
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	cf 01       	movw	r24, r30
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	1f 91       	pop	r17
    2fa0:	0f 91       	pop	r16
    2fa2:	08 95       	ret

00002fa4 <free>:
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	09 f4       	brne	.+2      	; 0x2fae <free+0xa>
    2fac:	81 c0       	rjmp	.+258    	; 0x30b0 <free+0x10c>
    2fae:	fc 01       	movw	r30, r24
    2fb0:	32 97       	sbiw	r30, 0x02	; 2
    2fb2:	13 82       	std	Z+3, r1	; 0x03
    2fb4:	12 82       	std	Z+2, r1	; 0x02
    2fb6:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <__flp>
    2fba:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <__flp+0x1>
    2fbe:	10 97       	sbiw	r26, 0x00	; 0
    2fc0:	81 f4       	brne	.+32     	; 0x2fe2 <free+0x3e>
    2fc2:	20 81       	ld	r18, Z
    2fc4:	31 81       	ldd	r19, Z+1	; 0x01
    2fc6:	82 0f       	add	r24, r18
    2fc8:	93 1f       	adc	r25, r19
    2fca:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <__brkval>
    2fce:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <__brkval+0x1>
    2fd2:	28 17       	cp	r18, r24
    2fd4:	39 07       	cpc	r19, r25
    2fd6:	51 f5       	brne	.+84     	; 0x302c <free+0x88>
    2fd8:	f0 93 5e 03 	sts	0x035E, r31	; 0x80035e <__brkval+0x1>
    2fdc:	e0 93 5d 03 	sts	0x035D, r30	; 0x80035d <__brkval>
    2fe0:	67 c0       	rjmp	.+206    	; 0x30b0 <free+0x10c>
    2fe2:	ed 01       	movw	r28, r26
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	ce 17       	cp	r28, r30
    2fea:	df 07       	cpc	r29, r31
    2fec:	40 f4       	brcc	.+16     	; 0x2ffe <free+0x5a>
    2fee:	4a 81       	ldd	r20, Y+2	; 0x02
    2ff0:	5b 81       	ldd	r21, Y+3	; 0x03
    2ff2:	9e 01       	movw	r18, r28
    2ff4:	41 15       	cp	r20, r1
    2ff6:	51 05       	cpc	r21, r1
    2ff8:	f1 f0       	breq	.+60     	; 0x3036 <free+0x92>
    2ffa:	ea 01       	movw	r28, r20
    2ffc:	f5 cf       	rjmp	.-22     	; 0x2fe8 <free+0x44>
    2ffe:	d3 83       	std	Z+3, r29	; 0x03
    3000:	c2 83       	std	Z+2, r28	; 0x02
    3002:	40 81       	ld	r20, Z
    3004:	51 81       	ldd	r21, Z+1	; 0x01
    3006:	84 0f       	add	r24, r20
    3008:	95 1f       	adc	r25, r21
    300a:	c8 17       	cp	r28, r24
    300c:	d9 07       	cpc	r29, r25
    300e:	59 f4       	brne	.+22     	; 0x3026 <free+0x82>
    3010:	88 81       	ld	r24, Y
    3012:	99 81       	ldd	r25, Y+1	; 0x01
    3014:	84 0f       	add	r24, r20
    3016:	95 1f       	adc	r25, r21
    3018:	02 96       	adiw	r24, 0x02	; 2
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	80 83       	st	Z, r24
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	9b 81       	ldd	r25, Y+3	; 0x03
    3022:	93 83       	std	Z+3, r25	; 0x03
    3024:	82 83       	std	Z+2, r24	; 0x02
    3026:	21 15       	cp	r18, r1
    3028:	31 05       	cpc	r19, r1
    302a:	29 f4       	brne	.+10     	; 0x3036 <free+0x92>
    302c:	f0 93 60 03 	sts	0x0360, r31	; 0x800360 <__flp+0x1>
    3030:	e0 93 5f 03 	sts	0x035F, r30	; 0x80035f <__flp>
    3034:	3d c0       	rjmp	.+122    	; 0x30b0 <free+0x10c>
    3036:	e9 01       	movw	r28, r18
    3038:	fb 83       	std	Y+3, r31	; 0x03
    303a:	ea 83       	std	Y+2, r30	; 0x02
    303c:	49 91       	ld	r20, Y+
    303e:	59 91       	ld	r21, Y+
    3040:	c4 0f       	add	r28, r20
    3042:	d5 1f       	adc	r29, r21
    3044:	ec 17       	cp	r30, r28
    3046:	fd 07       	cpc	r31, r29
    3048:	61 f4       	brne	.+24     	; 0x3062 <free+0xbe>
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	84 0f       	add	r24, r20
    3050:	95 1f       	adc	r25, r21
    3052:	02 96       	adiw	r24, 0x02	; 2
    3054:	e9 01       	movw	r28, r18
    3056:	99 83       	std	Y+1, r25	; 0x01
    3058:	88 83       	st	Y, r24
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	9b 83       	std	Y+3, r25	; 0x03
    3060:	8a 83       	std	Y+2, r24	; 0x02
    3062:	e0 e0       	ldi	r30, 0x00	; 0
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	12 96       	adiw	r26, 0x02	; 2
    3068:	8d 91       	ld	r24, X+
    306a:	9c 91       	ld	r25, X
    306c:	13 97       	sbiw	r26, 0x03	; 3
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	19 f0       	breq	.+6      	; 0x3078 <free+0xd4>
    3072:	fd 01       	movw	r30, r26
    3074:	dc 01       	movw	r26, r24
    3076:	f7 cf       	rjmp	.-18     	; 0x3066 <free+0xc2>
    3078:	8d 91       	ld	r24, X+
    307a:	9c 91       	ld	r25, X
    307c:	11 97       	sbiw	r26, 0x01	; 1
    307e:	9d 01       	movw	r18, r26
    3080:	2e 5f       	subi	r18, 0xFE	; 254
    3082:	3f 4f       	sbci	r19, 0xFF	; 255
    3084:	82 0f       	add	r24, r18
    3086:	93 1f       	adc	r25, r19
    3088:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <__brkval>
    308c:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <__brkval+0x1>
    3090:	28 17       	cp	r18, r24
    3092:	39 07       	cpc	r19, r25
    3094:	69 f4       	brne	.+26     	; 0x30b0 <free+0x10c>
    3096:	30 97       	sbiw	r30, 0x00	; 0
    3098:	29 f4       	brne	.+10     	; 0x30a4 <free+0x100>
    309a:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <__flp+0x1>
    309e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <__flp>
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <free+0x104>
    30a4:	13 82       	std	Z+3, r1	; 0x03
    30a6:	12 82       	std	Z+2, r1	; 0x02
    30a8:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <__brkval+0x1>
    30ac:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <__brkval>
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <_exit>:
    30b6:	f8 94       	cli

000030b8 <__stop_program>:
    30b8:	ff cf       	rjmp	.-2      	; 0x30b8 <__stop_program>

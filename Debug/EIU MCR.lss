
EIU MCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  00003190  00003224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  00800288  00800288  000032ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005361  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001991  00000000  00000000  00008a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000031a4  00000000  00000000  0000a3be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  0000d564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e96  00000000  00000000  0000dd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a21  00000000  00000000  0000ec06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00011627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c2       	rjmp	.+1264   	; 0x4f2 <__ctors_end>
       2:	00 00       	nop
       4:	97 c2       	rjmp	.+1326   	; 0x534 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c2       	rjmp	.+1322   	; 0x534 <__bad_interrupt>
       a:	00 00       	nop
       c:	0f c4       	rjmp	.+2078   	; 0x82c <__vector_3>
       e:	00 00       	nop
      10:	24 c4       	rjmp	.+2120   	; 0x85a <__vector_4>
      12:	00 00       	nop
      14:	8f c2       	rjmp	.+1310   	; 0x534 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c2       	rjmp	.+1306   	; 0x534 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c2       	rjmp	.+1302   	; 0x534 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c2       	rjmp	.+1298   	; 0x534 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c2       	rjmp	.+1294   	; 0x534 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c2       	rjmp	.+1290   	; 0x534 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c2       	rjmp	.+1286   	; 0x534 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c2       	rjmp	.+1282   	; 0x534 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c2       	rjmp	.+1278   	; 0x534 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c2       	rjmp	.+1274   	; 0x534 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c2       	rjmp	.+1270   	; 0x534 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c2       	rjmp	.+1266   	; 0x534 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c2       	rjmp	.+1262   	; 0x534 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c2       	rjmp	.+1258   	; 0x534 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c2       	rjmp	.+1254   	; 0x534 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c2       	rjmp	.+1250   	; 0x534 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c2       	rjmp	.+1246   	; 0x534 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c2       	rjmp	.+1242   	; 0x534 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_23>
      60:	69 c2       	rjmp	.+1234   	; 0x534 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c2       	rjmp	.+1230   	; 0x534 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c2       	rjmp	.+1226   	; 0x534 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c2       	rjmp	.+1222   	; 0x534 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c2       	rjmp	.+1218   	; 0x534 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c2       	rjmp	.+1214   	; 0x534 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c2       	rjmp	.+1210   	; 0x534 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c2       	rjmp	.+1206   	; 0x534 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c2       	rjmp	.+1202   	; 0x534 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c2       	rjmp	.+1198   	; 0x534 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c2       	rjmp	.+1194   	; 0x534 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c2       	rjmp	.+1190   	; 0x534 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c2       	rjmp	.+1186   	; 0x534 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c2       	rjmp	.+1182   	; 0x534 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c2       	rjmp	.+1178   	; 0x534 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c2       	rjmp	.+1174   	; 0x534 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c2       	rjmp	.+1170   	; 0x534 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c2       	rjmp	.+1166   	; 0x534 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c2       	rjmp	.+1162   	; 0x534 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c2       	rjmp	.+1158   	; 0x534 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c2       	rjmp	.+1154   	; 0x534 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c2       	rjmp	.+1150   	; 0x534 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c2       	rjmp	.+1146   	; 0x534 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c2       	rjmp	.+1142   	; 0x534 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c2       	rjmp	.+1138   	; 0x534 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c2       	rjmp	.+1134   	; 0x534 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c2       	rjmp	.+1130   	; 0x534 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c2       	rjmp	.+1126   	; 0x534 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c2       	rjmp	.+1122   	; 0x534 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c2       	rjmp	.+1118   	; 0x534 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c2       	rjmp	.+1114   	; 0x534 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c2       	rjmp	.+1110   	; 0x534 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c2       	rjmp	.+1106   	; 0x534 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8b 07       	cpc	r24, r27
      e6:	c8 07       	cpc	r28, r24
      e8:	03 08       	sbc	r0, r3
      ea:	40 08       	sbc	r4, r0
      ec:	7d 08       	sbc	r7, r13
      ee:	ba 08       	sbc	r11, r10
      f0:	f7 08       	sbc	r15, r7
      f2:	34 09       	sbc	r19, r4
      f4:	7b 09       	sbc	r23, r11
      f6:	51 0c       	add	r5, r1
      f8:	35 0c       	add	r3, r5
      fa:	ed 0b       	sbc	r30, r29
      fc:	19 0c       	add	r1, r9
      fe:	95 0b       	sbc	r25, r21
     100:	6f 0d       	add	r22, r15
     102:	c1 0b       	sbc	r28, r17
     104:	ed 0b       	sbc	r30, r29
     106:	5e 0b       	sbc	r21, r30
     108:	6f 0d       	add	r22, r15
     10a:	6f 0d       	add	r22, r15
     10c:	6f 0d       	add	r22, r15
     10e:	79 0b       	sbc	r23, r25
     110:	6f 0d       	add	r22, r15
     112:	95 0b       	sbc	r25, r21
     114:	77 0d       	add	r23, r7
     116:	64 0c       	add	r6, r4
     118:	6f 0d       	add	r22, r15
     11a:	6f 0d       	add	r22, r15
     11c:	6f 0d       	add	r22, r15
     11e:	6f 0d       	add	r22, r15
     120:	6f 0d       	add	r22, r15
     122:	6f 0d       	add	r22, r15
     124:	6f 0d       	add	r22, r15
     126:	4d 0b       	sbc	r20, r29
     128:	6f 0d       	add	r22, r15
     12a:	6f 0d       	add	r22, r15
     12c:	6f 0d       	add	r22, r15
     12e:	5e 0b       	sbc	r21, r30
     130:	6f 0d       	add	r22, r15
     132:	79 0b       	sbc	r23, r25
     134:	6f 0d       	add	r22, r15
     136:	a2 0c       	add	r10, r2
     138:	6f 0d       	add	r22, r15
     13a:	6f 0d       	add	r22, r15
     13c:	6f 0d       	add	r22, r15
     13e:	6f 0d       	add	r22, r15
     140:	6f 0d       	add	r22, r15
     142:	6f 0d       	add	r22, r15
     144:	6f 0d       	add	r22, r15
     146:	6f 0d       	add	r22, r15
     148:	6f 0d       	add	r22, r15
     14a:	6f 0d       	add	r22, r15
     14c:	6f 0d       	add	r22, r15
     14e:	6f 0d       	add	r22, r15
     150:	6f 0d       	add	r22, r15
     152:	6f 0d       	add	r22, r15
     154:	6f 0d       	add	r22, r15
     156:	83 0c       	add	r8, r3
     158:	6f 0d       	add	r22, r15
     15a:	6f 0d       	add	r22, r15
     15c:	6f 0d       	add	r22, r15
     15e:	6f 0d       	add	r22, r15
     160:	6f 0d       	add	r22, r15
     162:	6f 0d       	add	r22, r15
     164:	6f 0d       	add	r22, r15
     166:	64 0c       	add	r6, r4
     168:	6f 0d       	add	r22, r15
     16a:	6f 0d       	add	r22, r15
     16c:	6f 0d       	add	r22, r15
     16e:	4d 0b       	sbc	r20, r29
     170:	6f 0d       	add	r22, r15
     172:	6f 0d       	add	r22, r15
     174:	6f 0d       	add	r22, r15
     176:	02 0d       	add	r16, r2
     178:	6f 0d       	add	r22, r15
     17a:	6f 0d       	add	r22, r15
     17c:	6f 0d       	add	r22, r15
     17e:	6f 0d       	add	r22, r15
     180:	6f 0d       	add	r22, r15
     182:	6f 0d       	add	r22, r15
     184:	6f 0d       	add	r22, r15
     186:	6f 0d       	add	r22, r15
     188:	6f 0d       	add	r22, r15
     18a:	6f 0d       	add	r22, r15
     18c:	6f 0d       	add	r22, r15
     18e:	6f 0d       	add	r22, r15
     190:	6f 0d       	add	r22, r15
     192:	6f 0d       	add	r22, r15
     194:	6f 0d       	add	r22, r15
     196:	6f 0d       	add	r22, r15
     198:	6f 0d       	add	r22, r15
     19a:	6f 0d       	add	r22, r15
     19c:	6f 0d       	add	r22, r15
     19e:	6f 0d       	add	r22, r15
     1a0:	6f 0d       	add	r22, r15
     1a2:	6f 0d       	add	r22, r15
     1a4:	6f 0d       	add	r22, r15
     1a6:	6f 0d       	add	r22, r15
     1a8:	6f 0d       	add	r22, r15
     1aa:	6f 0d       	add	r22, r15
     1ac:	6f 0d       	add	r22, r15
     1ae:	6f 0d       	add	r22, r15
     1b0:	6f 0d       	add	r22, r15
     1b2:	6f 0d       	add	r22, r15
     1b4:	6f 0d       	add	r22, r15
     1b6:	d2 0c       	add	r13, r2
     1b8:	6f 0d       	add	r22, r15
     1ba:	6f 0d       	add	r22, r15
     1bc:	6f 0d       	add	r22, r15
     1be:	6f 0d       	add	r22, r15
     1c0:	6f 0d       	add	r22, r15
     1c2:	6f 0d       	add	r22, r15
     1c4:	6f 0d       	add	r22, r15
     1c6:	6f 0d       	add	r22, r15
     1c8:	6f 0d       	add	r22, r15
     1ca:	6f 0d       	add	r22, r15
     1cc:	6f 0d       	add	r22, r15
     1ce:	6f 0d       	add	r22, r15
     1d0:	6f 0d       	add	r22, r15
     1d2:	6f 0d       	add	r22, r15
     1d4:	6f 0d       	add	r22, r15
     1d6:	a2 0c       	add	r10, r2
     1d8:	6f 0d       	add	r22, r15
     1da:	6f 0d       	add	r22, r15
     1dc:	6f 0d       	add	r22, r15
     1de:	6f 0d       	add	r22, r15
     1e0:	6f 0d       	add	r22, r15
     1e2:	6f 0d       	add	r22, r15
     1e4:	6f 0d       	add	r22, r15
     1e6:	83 0c       	add	r8, r3
     1e8:	6f 0d       	add	r22, r15
     1ea:	6f 0d       	add	r22, r15
     1ec:	6f 0d       	add	r22, r15
     1ee:	6f 0d       	add	r22, r15
     1f0:	6f 0d       	add	r22, r15
     1f2:	6f 0d       	add	r22, r15
     1f4:	6f 0d       	add	r22, r15
     1f6:	50 0d       	add	r21, r0
     1f8:	51 0c       	add	r5, r1
     1fa:	6f 0d       	add	r22, r15
     1fc:	51 0c       	add	r5, r1
     1fe:	6f 0d       	add	r22, r15
     200:	6f 0d       	add	r22, r15
     202:	6f 0d       	add	r22, r15
     204:	6f 0d       	add	r22, r15
     206:	6f 0d       	add	r22, r15
     208:	6f 0d       	add	r22, r15
     20a:	6f 0d       	add	r22, r15
     20c:	6f 0d       	add	r22, r15
     20e:	6f 0d       	add	r22, r15
     210:	6f 0d       	add	r22, r15
     212:	6f 0d       	add	r22, r15
     214:	6f 0d       	add	r22, r15
     216:	6f 0d       	add	r22, r15
     218:	6f 0d       	add	r22, r15
     21a:	6f 0d       	add	r22, r15
     21c:	6f 0d       	add	r22, r15
     21e:	6f 0d       	add	r22, r15
     220:	6f 0d       	add	r22, r15
     222:	6f 0d       	add	r22, r15
     224:	6f 0d       	add	r22, r15
     226:	6f 0d       	add	r22, r15
     228:	6f 0d       	add	r22, r15
     22a:	6f 0d       	add	r22, r15
     22c:	6f 0d       	add	r22, r15
     22e:	6f 0d       	add	r22, r15
     230:	6f 0d       	add	r22, r15
     232:	6f 0d       	add	r22, r15
     234:	6f 0d       	add	r22, r15
     236:	6f 0d       	add	r22, r15
     238:	6f 0d       	add	r22, r15
     23a:	6f 0d       	add	r22, r15
     23c:	6f 0d       	add	r22, r15
     23e:	6f 0d       	add	r22, r15
     240:	6f 0d       	add	r22, r15
     242:	6f 0d       	add	r22, r15
     244:	6f 0d       	add	r22, r15
     246:	6f 0d       	add	r22, r15
     248:	6f 0d       	add	r22, r15
     24a:	6f 0d       	add	r22, r15
     24c:	6f 0d       	add	r22, r15
     24e:	6f 0d       	add	r22, r15
     250:	6f 0d       	add	r22, r15
     252:	6f 0d       	add	r22, r15
     254:	6f 0d       	add	r22, r15
     256:	6f 0d       	add	r22, r15
     258:	6f 0d       	add	r22, r15
     25a:	6f 0d       	add	r22, r15
     25c:	6f 0d       	add	r22, r15
     25e:	6f 0d       	add	r22, r15
     260:	6f 0d       	add	r22, r15
     262:	6f 0d       	add	r22, r15
     264:	6f 0d       	add	r22, r15
     266:	6f 0d       	add	r22, r15
     268:	6f 0d       	add	r22, r15
     26a:	6f 0d       	add	r22, r15
     26c:	6f 0d       	add	r22, r15
     26e:	6f 0d       	add	r22, r15
     270:	6f 0d       	add	r22, r15
     272:	6f 0d       	add	r22, r15
     274:	6f 0d       	add	r22, r15
     276:	31 0d       	add	r19, r1
     278:	51 0c       	add	r5, r1
     27a:	6f 0d       	add	r22, r15
     27c:	6f 0d       	add	r22, r15
     27e:	6f 0d       	add	r22, r15
     280:	6f 0d       	add	r22, r15
     282:	6f 0d       	add	r22, r15
     284:	6f 0d       	add	r22, r15
     286:	6f 0d       	add	r22, r15
     288:	6f 0d       	add	r22, r15
     28a:	6f 0d       	add	r22, r15
     28c:	6f 0d       	add	r22, r15
     28e:	6f 0d       	add	r22, r15
     290:	6f 0d       	add	r22, r15
     292:	6f 0d       	add	r22, r15
     294:	6f 0d       	add	r22, r15
     296:	6f 0d       	add	r22, r15
     298:	6f 0d       	add	r22, r15
     29a:	6f 0d       	add	r22, r15
     29c:	6f 0d       	add	r22, r15
     29e:	6f 0d       	add	r22, r15
     2a0:	6f 0d       	add	r22, r15
     2a2:	6f 0d       	add	r22, r15
     2a4:	6f 0d       	add	r22, r15
     2a6:	6f 0d       	add	r22, r15
     2a8:	6f 0d       	add	r22, r15
     2aa:	6f 0d       	add	r22, r15
     2ac:	6f 0d       	add	r22, r15
     2ae:	6f 0d       	add	r22, r15
     2b0:	6f 0d       	add	r22, r15
     2b2:	6f 0d       	add	r22, r15
     2b4:	6f 0d       	add	r22, r15
     2b6:	02 0d       	add	r16, r2
     2b8:	6f 0d       	add	r22, r15
     2ba:	6f 0d       	add	r22, r15
     2bc:	6f 0d       	add	r22, r15
     2be:	6f 0d       	add	r22, r15
     2c0:	6f 0d       	add	r22, r15
     2c2:	6f 0d       	add	r22, r15
     2c4:	6f 0d       	add	r22, r15
     2c6:	6f 0d       	add	r22, r15
     2c8:	6f 0d       	add	r22, r15
     2ca:	6f 0d       	add	r22, r15
     2cc:	6f 0d       	add	r22, r15
     2ce:	6f 0d       	add	r22, r15
     2d0:	6f 0d       	add	r22, r15
     2d2:	6f 0d       	add	r22, r15
     2d4:	6f 0d       	add	r22, r15
     2d6:	77 0d       	add	r23, r7
     2d8:	13 10       	cpse	r1, r3
     2da:	fb 0f       	add	r31, r27
     2dc:	bb 0f       	add	r27, r27
     2de:	e3 0f       	add	r30, r19
     2e0:	6b 0f       	add	r22, r27
     2e2:	13 11       	cpse	r17, r3
     2e4:	93 0f       	add	r25, r19
     2e6:	bb 0f       	add	r27, r27
     2e8:	3c 0f       	add	r19, r28
     2ea:	13 11       	cpse	r17, r3
     2ec:	13 11       	cpse	r17, r3
     2ee:	13 11       	cpse	r17, r3
     2f0:	53 0f       	add	r21, r19
     2f2:	13 11       	cpse	r17, r3
     2f4:	6b 0f       	add	r22, r27
     2f6:	1b 11       	cpse	r17, r11
     2f8:	26 10       	cpse	r2, r6
     2fa:	13 11       	cpse	r17, r3
     2fc:	13 11       	cpse	r17, r3
     2fe:	13 11       	cpse	r17, r3
     300:	13 11       	cpse	r17, r3
     302:	13 11       	cpse	r17, r3
     304:	13 11       	cpse	r17, r3
     306:	13 11       	cpse	r17, r3
     308:	2f 0f       	add	r18, r31
     30a:	13 11       	cpse	r17, r3
     30c:	13 11       	cpse	r17, r3
     30e:	13 11       	cpse	r17, r3
     310:	3c 0f       	add	r19, r28
     312:	13 11       	cpse	r17, r3
     314:	53 0f       	add	r21, r19
     316:	13 11       	cpse	r17, r3
     318:	5c 10       	cpse	r5, r12
     31a:	13 11       	cpse	r17, r3
     31c:	13 11       	cpse	r17, r3
     31e:	13 11       	cpse	r17, r3
     320:	13 11       	cpse	r17, r3
     322:	13 11       	cpse	r17, r3
     324:	13 11       	cpse	r17, r3
     326:	13 11       	cpse	r17, r3
     328:	13 11       	cpse	r17, r3
     32a:	13 11       	cpse	r17, r3
     32c:	13 11       	cpse	r17, r3
     32e:	13 11       	cpse	r17, r3
     330:	13 11       	cpse	r17, r3
     332:	13 11       	cpse	r17, r3
     334:	13 11       	cpse	r17, r3
     336:	13 11       	cpse	r17, r3
     338:	41 10       	cpse	r4, r1
     33a:	13 11       	cpse	r17, r3
     33c:	13 11       	cpse	r17, r3
     33e:	13 11       	cpse	r17, r3
     340:	13 11       	cpse	r17, r3
     342:	13 11       	cpse	r17, r3
     344:	13 11       	cpse	r17, r3
     346:	13 11       	cpse	r17, r3
     348:	26 10       	cpse	r2, r6
     34a:	13 11       	cpse	r17, r3
     34c:	13 11       	cpse	r17, r3
     34e:	13 11       	cpse	r17, r3
     350:	2f 0f       	add	r18, r31
     352:	13 11       	cpse	r17, r3
     354:	13 11       	cpse	r17, r3
     356:	13 11       	cpse	r17, r3
     358:	b2 10       	cpse	r11, r2
     35a:	13 11       	cpse	r17, r3
     35c:	13 11       	cpse	r17, r3
     35e:	13 11       	cpse	r17, r3
     360:	13 11       	cpse	r17, r3
     362:	13 11       	cpse	r17, r3
     364:	13 11       	cpse	r17, r3
     366:	13 11       	cpse	r17, r3
     368:	13 11       	cpse	r17, r3
     36a:	13 11       	cpse	r17, r3
     36c:	13 11       	cpse	r17, r3
     36e:	13 11       	cpse	r17, r3
     370:	13 11       	cpse	r17, r3
     372:	13 11       	cpse	r17, r3
     374:	13 11       	cpse	r17, r3
     376:	13 11       	cpse	r17, r3
     378:	13 11       	cpse	r17, r3
     37a:	13 11       	cpse	r17, r3
     37c:	13 11       	cpse	r17, r3
     37e:	13 11       	cpse	r17, r3
     380:	13 11       	cpse	r17, r3
     382:	13 11       	cpse	r17, r3
     384:	13 11       	cpse	r17, r3
     386:	13 11       	cpse	r17, r3
     388:	13 11       	cpse	r17, r3
     38a:	13 11       	cpse	r17, r3
     38c:	13 11       	cpse	r17, r3
     38e:	13 11       	cpse	r17, r3
     390:	13 11       	cpse	r17, r3
     392:	13 11       	cpse	r17, r3
     394:	13 11       	cpse	r17, r3
     396:	13 11       	cpse	r17, r3
     398:	87 10       	cpse	r8, r7
     39a:	13 11       	cpse	r17, r3
     39c:	13 11       	cpse	r17, r3
     39e:	13 11       	cpse	r17, r3
     3a0:	13 11       	cpse	r17, r3
     3a2:	13 11       	cpse	r17, r3
     3a4:	13 11       	cpse	r17, r3
     3a6:	13 11       	cpse	r17, r3
     3a8:	13 11       	cpse	r17, r3
     3aa:	13 11       	cpse	r17, r3
     3ac:	13 11       	cpse	r17, r3
     3ae:	13 11       	cpse	r17, r3
     3b0:	13 11       	cpse	r17, r3
     3b2:	13 11       	cpse	r17, r3
     3b4:	13 11       	cpse	r17, r3
     3b6:	13 11       	cpse	r17, r3
     3b8:	5c 10       	cpse	r5, r12
     3ba:	13 11       	cpse	r17, r3
     3bc:	13 11       	cpse	r17, r3
     3be:	13 11       	cpse	r17, r3
     3c0:	13 11       	cpse	r17, r3
     3c2:	13 11       	cpse	r17, r3
     3c4:	13 11       	cpse	r17, r3
     3c6:	13 11       	cpse	r17, r3
     3c8:	41 10       	cpse	r4, r1
     3ca:	13 11       	cpse	r17, r3
     3cc:	13 11       	cpse	r17, r3
     3ce:	13 11       	cpse	r17, r3
     3d0:	13 11       	cpse	r17, r3
     3d2:	13 11       	cpse	r17, r3
     3d4:	13 11       	cpse	r17, r3
     3d6:	13 11       	cpse	r17, r3
     3d8:	f8 10       	cpse	r15, r8
     3da:	13 10       	cpse	r1, r3
     3dc:	13 11       	cpse	r17, r3
     3de:	13 10       	cpse	r1, r3
     3e0:	13 11       	cpse	r17, r3
     3e2:	13 11       	cpse	r17, r3
     3e4:	13 11       	cpse	r17, r3
     3e6:	13 11       	cpse	r17, r3
     3e8:	13 11       	cpse	r17, r3
     3ea:	13 11       	cpse	r17, r3
     3ec:	13 11       	cpse	r17, r3
     3ee:	13 11       	cpse	r17, r3
     3f0:	13 11       	cpse	r17, r3
     3f2:	13 11       	cpse	r17, r3
     3f4:	13 11       	cpse	r17, r3
     3f6:	13 11       	cpse	r17, r3
     3f8:	13 11       	cpse	r17, r3
     3fa:	13 11       	cpse	r17, r3
     3fc:	13 11       	cpse	r17, r3
     3fe:	13 11       	cpse	r17, r3
     400:	13 11       	cpse	r17, r3
     402:	13 11       	cpse	r17, r3
     404:	13 11       	cpse	r17, r3
     406:	13 11       	cpse	r17, r3
     408:	13 11       	cpse	r17, r3
     40a:	13 11       	cpse	r17, r3
     40c:	13 11       	cpse	r17, r3
     40e:	13 11       	cpse	r17, r3
     410:	13 11       	cpse	r17, r3
     412:	13 11       	cpse	r17, r3
     414:	13 11       	cpse	r17, r3
     416:	13 11       	cpse	r17, r3
     418:	13 11       	cpse	r17, r3
     41a:	13 11       	cpse	r17, r3
     41c:	13 11       	cpse	r17, r3
     41e:	13 11       	cpse	r17, r3
     420:	13 11       	cpse	r17, r3
     422:	13 11       	cpse	r17, r3
     424:	13 11       	cpse	r17, r3
     426:	13 11       	cpse	r17, r3
     428:	13 11       	cpse	r17, r3
     42a:	13 11       	cpse	r17, r3
     42c:	13 11       	cpse	r17, r3
     42e:	13 11       	cpse	r17, r3
     430:	13 11       	cpse	r17, r3
     432:	13 11       	cpse	r17, r3
     434:	13 11       	cpse	r17, r3
     436:	13 11       	cpse	r17, r3
     438:	13 11       	cpse	r17, r3
     43a:	13 11       	cpse	r17, r3
     43c:	13 11       	cpse	r17, r3
     43e:	13 11       	cpse	r17, r3
     440:	13 11       	cpse	r17, r3
     442:	13 11       	cpse	r17, r3
     444:	13 11       	cpse	r17, r3
     446:	13 11       	cpse	r17, r3
     448:	13 11       	cpse	r17, r3
     44a:	13 11       	cpse	r17, r3
     44c:	13 11       	cpse	r17, r3
     44e:	13 11       	cpse	r17, r3
     450:	13 11       	cpse	r17, r3
     452:	13 11       	cpse	r17, r3
     454:	13 11       	cpse	r17, r3
     456:	13 11       	cpse	r17, r3
     458:	dd 10       	cpse	r13, r13
     45a:	13 10       	cpse	r1, r3
     45c:	13 11       	cpse	r17, r3
     45e:	13 11       	cpse	r17, r3
     460:	13 11       	cpse	r17, r3
     462:	13 11       	cpse	r17, r3
     464:	13 11       	cpse	r17, r3
     466:	13 11       	cpse	r17, r3
     468:	13 11       	cpse	r17, r3
     46a:	13 11       	cpse	r17, r3
     46c:	13 11       	cpse	r17, r3
     46e:	13 11       	cpse	r17, r3
     470:	13 11       	cpse	r17, r3
     472:	13 11       	cpse	r17, r3
     474:	13 11       	cpse	r17, r3
     476:	13 11       	cpse	r17, r3
     478:	13 11       	cpse	r17, r3
     47a:	13 11       	cpse	r17, r3
     47c:	13 11       	cpse	r17, r3
     47e:	13 11       	cpse	r17, r3
     480:	13 11       	cpse	r17, r3
     482:	13 11       	cpse	r17, r3
     484:	13 11       	cpse	r17, r3
     486:	13 11       	cpse	r17, r3
     488:	13 11       	cpse	r17, r3
     48a:	13 11       	cpse	r17, r3
     48c:	13 11       	cpse	r17, r3
     48e:	13 11       	cpse	r17, r3
     490:	13 11       	cpse	r17, r3
     492:	13 11       	cpse	r17, r3
     494:	13 11       	cpse	r17, r3
     496:	13 11       	cpse	r17, r3
     498:	b2 10       	cpse	r11, r2
     49a:	13 11       	cpse	r17, r3
     49c:	13 11       	cpse	r17, r3
     49e:	13 11       	cpse	r17, r3
     4a0:	13 11       	cpse	r17, r3
     4a2:	13 11       	cpse	r17, r3
     4a4:	13 11       	cpse	r17, r3
     4a6:	13 11       	cpse	r17, r3
     4a8:	13 11       	cpse	r17, r3
     4aa:	13 11       	cpse	r17, r3
     4ac:	13 11       	cpse	r17, r3
     4ae:	13 11       	cpse	r17, r3
     4b0:	13 11       	cpse	r17, r3
     4b2:	13 11       	cpse	r17, r3
     4b4:	13 11       	cpse	r17, r3
     4b6:	13 11       	cpse	r17, r3
     4b8:	1b 11       	cpse	r17, r11
     4ba:	5b 11       	cpse	r21, r11
     4bc:	18 13       	cpse	r17, r24
     4be:	18 13       	cpse	r17, r24
     4c0:	18 13       	cpse	r17, r24
     4c2:	69 11       	cpse	r22, r9
     4c4:	a9 11       	cpse	r26, r9
     4c6:	18 13       	cpse	r17, r24
     4c8:	18 13       	cpse	r17, r24
     4ca:	18 13       	cpse	r17, r24
     4cc:	18 13       	cpse	r17, r24
     4ce:	18 13       	cpse	r17, r24
     4d0:	18 13       	cpse	r17, r24
     4d2:	d9 11       	cpse	r29, r9
     4d4:	fb 11       	cpse	r31, r11
     4d6:	0c 12       	cpse	r0, r28
     4d8:	1c 12       	cpse	r1, r28
     4da:	34 12       	cpse	r3, r20
     4dc:	18 13       	cpse	r17, r24
     4de:	18 13       	cpse	r17, r24
     4e0:	18 13       	cpse	r17, r24
     4e2:	18 13       	cpse	r17, r24
     4e4:	18 13       	cpse	r17, r24
     4e6:	51 12       	cpse	r5, r17
     4e8:	75 12       	cpse	r7, r21
     4ea:	8b 12       	cpse	r8, r27
     4ec:	a0 12       	cpse	r10, r16
     4ee:	bd 12       	cpse	r11, r29
     4f0:	da 12       	cpse	r13, r26

000004f2 <__ctors_end>:
     4f2:	11 24       	eor	r1, r1
     4f4:	1f be       	out	0x3f, r1	; 63
     4f6:	cf ef       	ldi	r28, 0xFF	; 255
     4f8:	d1 e2       	ldi	r29, 0x21	; 33
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	00 e0       	ldi	r16, 0x00	; 0
     500:	0c bf       	out	0x3c, r16	; 60

00000502 <__do_copy_data>:
     502:	12 e0       	ldi	r17, 0x02	; 2
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b2 e0       	ldi	r27, 0x02	; 2
     508:	e0 e9       	ldi	r30, 0x90	; 144
     50a:	f1 e3       	ldi	r31, 0x31	; 49
     50c:	00 e0       	ldi	r16, 0x00	; 0
     50e:	0b bf       	out	0x3b, r16	; 59
     510:	02 c0       	rjmp	.+4      	; 0x516 <__do_copy_data+0x14>
     512:	07 90       	elpm	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	a8 38       	cpi	r26, 0x88	; 136
     518:	b1 07       	cpc	r27, r17
     51a:	d9 f7       	brne	.-10     	; 0x512 <__do_copy_data+0x10>

0000051c <__do_clear_bss>:
     51c:	23 e0       	ldi	r18, 0x03	; 3
     51e:	a8 e8       	ldi	r26, 0x88	; 136
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	01 c0       	rjmp	.+2      	; 0x526 <.do_clear_bss_start>

00000524 <.do_clear_bss_loop>:
     524:	1d 92       	st	X+, r1

00000526 <.do_clear_bss_start>:
     526:	a7 35       	cpi	r26, 0x57	; 87
     528:	b2 07       	cpc	r27, r18
     52a:	e1 f7       	brne	.-8      	; 0x524 <.do_clear_bss_loop>
     52c:	0e 94 9b 14 	call	0x2936	; 0x2936 <main>
     530:	0c 94 c6 18 	jmp	0x318c	; 0x318c <_exit>

00000534 <__bad_interrupt>:
     534:	65 cd       	rjmp	.-1334   	; 0x0 <__vectors>

00000536 <adc_init>:
/*				 color is BLACK       */
/*				or WHITE			  */
/*====================================*/
void save_sensor(unsigned char color)
{
	isUpdate = 0;
     536:	80 e4       	ldi	r24, 0x40	; 64
     538:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     53c:	84 e8       	ldi	r24, 0x84	; 132
     53e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     542:	8c e2       	ldi	r24, 0x2C	; 44
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <compareValue+0x1>
     54a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <compareValue>
     54e:	08 95       	ret

00000550 <read_adc>:
     550:	80 64       	ori	r24, 0x40	; 64
     552:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     556:	ea e7       	ldi	r30, 0x7A	; 122
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	80 64       	ori	r24, 0x40	; 64
     55e:	80 83       	st	Z, r24
     560:	80 81       	ld	r24, Z
     562:	84 ff       	sbrs	r24, 4
     564:	fd cf       	rjmp	.-6      	; 0x560 <read_adc+0x10>
     566:	ea e7       	ldi	r30, 0x7A	; 122
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	80 83       	st	Z, r24
     570:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     574:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     578:	08 95       	ret

0000057a <read_bat>:
     57a:	80 e4       	ldi	r24, 0x40	; 64
     57c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     580:	eb e7       	ldi	r30, 0x7B	; 123
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	88 60       	ori	r24, 0x08	; 8
     588:	80 83       	st	Z, r24
     58a:	ea e7       	ldi	r30, 0x7A	; 122
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	80 64       	ori	r24, 0x40	; 64
     592:	80 83       	st	Z, r24
     594:	80 81       	ld	r24, Z
     596:	84 ff       	sbrs	r24, 4
     598:	fd cf       	rjmp	.-6      	; 0x594 <read_bat+0x1a>
     59a:	ea e7       	ldi	r30, 0x7A	; 122
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 61       	ori	r24, 0x10	; 16
     5a2:	80 83       	st	Z, r24
     5a4:	eb e7       	ldi	r30, 0x7B	; 123
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	87 7f       	andi	r24, 0xF7	; 247
     5ac:	80 83       	st	Z, r24
     5ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     5b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     5b6:	08 95       	ret

000005b8 <read_volt>:
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	0c ee       	ldi	r16, 0xEC	; 236
     5c0:	12 e0       	ldi	r17, 0x02	; 2
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	8c 2f       	mov	r24, r28
     5c6:	c4 df       	rcall	.-120    	; 0x550 <read_adc>
     5c8:	f8 01       	movw	r30, r16
     5ca:	92 93       	st	-Z, r25
     5cc:	82 93       	st	-Z, r24
     5ce:	8f 01       	movw	r16, r30
     5d0:	cf 5f       	subi	r28, 0xFF	; 255
     5d2:	c8 30       	cpi	r28, 0x08	; 8
     5d4:	b9 f7       	brne	.-18     	; 0x5c4 <read_volt+0xc>
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <read_sensor>:
     5de:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     5e2:	81 11       	cpse	r24, r1
     5e4:	16 c0       	rjmp	.+44     	; 0x612 <read_sensor+0x34>
     5e6:	e8 df       	rcall	.-48     	; 0x5b8 <read_volt>
     5e8:	ec ed       	ldi	r30, 0xDC	; 220
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	a9 e8       	ldi	r26, 0x89	; 137
     5ee:	b2 e0       	ldi	r27, 0x02	; 2
     5f0:	6c ee       	ldi	r22, 0xEC	; 236
     5f2:	72 e0       	ldi	r23, 0x02	; 2
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	88 0f       	add	r24, r24
     5f8:	41 91       	ld	r20, Z+
     5fa:	51 91       	ld	r21, Z+
     5fc:	2d 91       	ld	r18, X+
     5fe:	3d 91       	ld	r19, X+
     600:	24 17       	cp	r18, r20
     602:	35 07       	cpc	r19, r21
     604:	08 f4       	brcc	.+2      	; 0x608 <read_sensor+0x2a>
     606:	81 60       	ori	r24, 0x01	; 1
     608:	e6 17       	cp	r30, r22
     60a:	f7 07       	cpc	r31, r23
     60c:	a1 f7       	brne	.-24     	; 0x5f6 <read_sensor+0x18>
     60e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <sensor>
     612:	08 95       	ret

00000614 <update_vcompare>:
/*  Parameter: null                   */
/*  Description: update value of      */
/*               v_compare[8] and save*/
/*               in eeprom of MCU     */
/*====================================*/
void update_vcompare(){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	e9 ea       	ldi	r30, 0xA9	; 169
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	c9 eb       	ldi	r28, 0xB9	; 185
     61e:	d2 e0       	ldi	r29, 0x02	; 2
     620:	a9 e8       	ldi	r26, 0x89	; 137
     622:	b2 e0       	ldi	r27, 0x02	; 2
     624:	49 eb       	ldi	r20, 0xB9	; 185
     626:	52 e0       	ldi	r21, 0x02	; 2
	int i;
	for (i=0; i<8; i++)
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
     628:	21 91       	ld	r18, Z+
     62a:	31 91       	ld	r19, Z+
     62c:	89 91       	ld	r24, Y+
     62e:	99 91       	ld	r25, Y+
     630:	82 0f       	add	r24, r18
     632:	93 1f       	adc	r25, r19
     634:	96 95       	lsr	r25
     636:	87 95       	ror	r24
     638:	8d 93       	st	X+, r24
     63a:	9d 93       	st	X+, r25
/*               v_compare[8] and save*/
/*               in eeprom of MCU     */
/*====================================*/
void update_vcompare(){
	int i;
	for (i=0; i<8; i++)
     63c:	e4 17       	cp	r30, r20
     63e:	f5 07       	cpc	r31, r21
     640:	99 f7       	brne	.-26     	; 0x628 <update_vcompare+0x14>
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
	}
	eeprom_writestr(V_COMPARE_POS, v_compare, 16);
     642:	40 e1       	ldi	r20, 0x10	; 16
     644:	69 e8       	ldi	r22, 0x89	; 137
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	88 e1       	ldi	r24, 0x18	; 24
     64a:	8c d0       	rcall	.+280    	; 0x764 <eeprom_writestr>
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <update_white>:

void update_white(){
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec ed       	ldi	r30, 0xDC	; 220
     658:	f2 e0       	ldi	r31, 0x02	; 2
     65a:	a9 eb       	ldi	r26, 0xB9	; 185
     65c:	b2 e0       	ldi	r27, 0x02	; 2
     65e:	2c ee       	ldi	r18, 0xEC	; 236
     660:	32 e0       	ldi	r19, 0x02	; 2
     662:	ed 01       	movw	r28, r26
	int i;
	for (i=0; i<8; i++)
	{
		minOfMaxSensorValue[i] = sensor_value[i];
     664:	81 91       	ld	r24, Z+
     666:	91 91       	ld	r25, Z+
     668:	89 93       	st	Y+, r24
     66a:	99 93       	st	Y+, r25
	eeprom_writestr(V_COMPARE_POS, v_compare, 16);
}

void update_white(){
	int i;
	for (i=0; i<8; i++)
     66c:	e2 17       	cp	r30, r18
     66e:	f3 07       	cpc	r31, r19
     670:	c9 f7       	brne	.-14     	; 0x664 <update_white+0x12>
     672:	e9 ea       	ldi	r30, 0xA9	; 169
     674:	f2 e0       	ldi	r31, 0x02	; 2
     676:	c9 e8       	ldi	r28, 0x89	; 137
     678:	d2 e0       	ldi	r29, 0x02	; 2
     67a:	49 eb       	ldi	r20, 0xB9	; 185
     67c:	52 e0       	ldi	r21, 0x02	; 2
	{
		minOfMaxSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
     67e:	21 91       	ld	r18, Z+
     680:	31 91       	ld	r19, Z+
     682:	8d 91       	ld	r24, X+
     684:	9d 91       	ld	r25, X+
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	89 93       	st	Y+, r24
     690:	99 93       	st	Y+, r25
	int i;
	for (i=0; i<8; i++)
	{
		minOfMaxSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
     692:	e4 17       	cp	r30, r20
     694:	f5 07       	cpc	r31, r21
     696:	99 f7       	brne	.-26     	; 0x67e <update_white+0x2c>
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
	}
	
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <update_black>:
void update_black(){
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ac ed       	ldi	r26, 0xDC	; 220
     6a4:	b2 e0       	ldi	r27, 0x02	; 2
     6a6:	e9 ea       	ldi	r30, 0xA9	; 169
     6a8:	f2 e0       	ldi	r31, 0x02	; 2
     6aa:	2c ee       	ldi	r18, 0xEC	; 236
     6ac:	32 e0       	ldi	r19, 0x02	; 2
     6ae:	ef 01       	movw	r28, r30
	int i;
	for (i=0; i<8; i++)
	{
		maxOfMinSensorValue[i] = sensor_value[i];
     6b0:	8d 91       	ld	r24, X+
     6b2:	9d 91       	ld	r25, X+
     6b4:	89 93       	st	Y+, r24
     6b6:	99 93       	st	Y+, r25
	}
	
}
void update_black(){
	int i;
	for (i=0; i<8; i++)
     6b8:	a2 17       	cp	r26, r18
     6ba:	b3 07       	cpc	r27, r19
     6bc:	c9 f7       	brne	.-14     	; 0x6b0 <update_black+0x12>
     6be:	c9 eb       	ldi	r28, 0xB9	; 185
     6c0:	d2 e0       	ldi	r29, 0x02	; 2
     6c2:	a9 e8       	ldi	r26, 0x89	; 137
     6c4:	b2 e0       	ldi	r27, 0x02	; 2
     6c6:	49 eb       	ldi	r20, 0xB9	; 185
     6c8:	52 e0       	ldi	r21, 0x02	; 2
	{
		maxOfMinSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
     6ca:	21 91       	ld	r18, Z+
     6cc:	31 91       	ld	r19, Z+
     6ce:	89 91       	ld	r24, Y+
     6d0:	99 91       	ld	r25, Y+
     6d2:	82 0f       	add	r24, r18
     6d4:	93 1f       	adc	r25, r19
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	8d 93       	st	X+, r24
     6dc:	9d 93       	st	X+, r25
	int i;
	for (i=0; i<8; i++)
	{
		maxOfMinSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
     6de:	e4 17       	cp	r30, r20
     6e0:	f5 07       	cpc	r31, r21
     6e2:	99 f7       	brne	.-26     	; 0x6ca <update_black+0x2c>
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
	}
	
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <read_vcompare>:
/*  Parameter: null                   */
/*  Description: read v_compare[8]    */
/*               from eeprom          */
/*====================================*/
void read_vcompare(){
	eeprom_readstr(V_COMPARE_POS, v_compare, 16);
     6ea:	40 e1       	ldi	r20, 0x10	; 16
     6ec:	69 e8       	ldi	r22, 0x89	; 137
     6ee:	72 e0       	ldi	r23, 0x02	; 2
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	60 c0       	rjmp	.+192    	; 0x7b4 <eeprom_readstr>
     6f4:	08 95       	ret

000006f6 <beep_init>:
/*  Parameter: null                   */
/*  Description: configure hardware   */
/*               for beep speaker     */
/*====================================*/
void beep_init(){
	BEEP_DDR |= _BV(BEEP_PIN);
     6f6:	24 9a       	sbi	0x04, 4	; 4
	beep_cn = 0;
     6f8:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <beep_cn+0x1>
     6fc:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <beep_cn>
	beep_flag = 0;
     700:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <beep_flag>
     704:	08 95       	ret

00000706 <beep_on>:
/*  Function name: beep_on            */
/*  Parameter: null                   */
/*  Description: speaker on          */
/*====================================*/
void beep_on(){
	BEEP_PORT |= _BV(BEEP_PIN);
     706:	2c 9a       	sbi	0x05, 4	; 5
     708:	08 95       	ret

0000070a <beep_off>:
/*  Function name: beep_off           */
/*  Parameter: null                   */
/*  Description: speaker off          */
/*====================================*/
void beep_off(){
	BEEP_PORT &= ~_BV(BEEP_PIN);
     70a:	2c 98       	cbi	0x05, 4	; 5
     70c:	08 95       	ret

0000070e <beep_mod>:
/*				 This function is	  */
/*				called by interrupt	  */
/* 				timer				  */
/*====================================*/
void beep_mod(){
	if(beep_flag){
     70e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <beep_flag>
     712:	88 23       	and	r24, r24
     714:	71 f0       	breq	.+28     	; 0x732 <beep_mod+0x24>
		beep_cn--;
     716:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <beep_cn>
     71a:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <beep_cn+0x1>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <beep_cn+0x1>
     724:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <beep_cn>
		if(beep_cn==0){
     728:	89 2b       	or	r24, r25
     72a:	19 f4       	brne	.+6      	; 0x732 <beep_mod+0x24>
			beep_flag = 0;
     72c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <beep_flag>
			beep_off();
     730:	ec cf       	rjmp	.-40     	; 0x70a <beep_off>
     732:	08 95       	ret

00000734 <beep_long>:
/*  Parameter: timer                  */
/*  Description: speaker on during    */
/*               "_timer"             */
/*====================================*/
void beep_long(unsigned int _timer){
	beep_cn = _timer/TIMER_DIV;
     734:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <beep_cn+0x1>
     738:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <beep_cn>
	beep_flag = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <beep_flag>
	beep_on();
     742:	e1 cf       	rjmp	.-62     	; 0x706 <beep_on>
     744:	08 95       	ret

00000746 <eeprom_writebyte>:
/*  Parameter: uiAddress,ucData       */
/*  Description : write ucData into   */
/*              eeprom at uiAddress   */
/*====================================*/
void eeprom_writebyte(unsigned char uiAddress, unsigned char ucData){
	while(EECR & _BV(EEPE)); 	//Wait for completion of previous write
     746:	f9 99       	sbic	0x1f, 1	; 31
     748:	fe cf       	rjmp	.-4      	; 0x746 <eeprom_writebyte>
	EEAR = uiAddress;			//Set up address and data registers
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	92 bd       	out	0x22, r25	; 34
     74e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     750:	60 bd       	out	0x20, r22	; 32
	SREG = SREG & DISABLE_INT;			//disable interrup
     752:	8f b7       	in	r24, 0x3f	; 63
     754:	8f 77       	andi	r24, 0x7F	; 127
     756:	8f bf       	out	0x3f, r24	; 63

	asm volatile("sbi %0,%1" :: "I" (_SFR_IO_ADDR(EECR)) , "I" (2));
     758:	fa 9a       	sbi	0x1f, 2	; 31
	asm volatile("sbi %0,%1" :: "I" (_SFR_IO_ADDR(EECR)) , "I" (1));
     75a:	f9 9a       	sbi	0x1f, 1	; 31

	SREG = SREG | ENABLE_INT;			//re-enable interrupt
     75c:	8f b7       	in	r24, 0x3f	; 63
     75e:	80 68       	ori	r24, 0x80	; 128
     760:	8f bf       	out	0x3f, r24	; 63
     762:	08 95       	ret

00000764 <eeprom_writestr>:
/*  Description : write string from   */
/*           *ucData_buff with length */
/*           is "len" into eeprom     */
/*           from uiAddress_start     */
/*====================================*/
void eeprom_writestr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
	unsigned char i__;
	if(!ucData_buff)return;
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	71 f0       	breq	.+28     	; 0x78e <eeprom_writestr+0x2a>
	for(i__=0;i__<ucData_len;i__++){
     772:	44 23       	and	r20, r20
     774:	61 f0       	breq	.+24     	; 0x78e <eeprom_writestr+0x2a>
     776:	c8 2f       	mov	r28, r24
     778:	8b 01       	movw	r16, r22
     77a:	d4 2f       	mov	r29, r20
     77c:	d8 0f       	add	r29, r24
		eeprom_writebyte(uiAddress_start + i__, ucData_buff[i__]);
     77e:	f8 01       	movw	r30, r16
     780:	61 91       	ld	r22, Z+
     782:	8f 01       	movw	r16, r30
     784:	8c 2f       	mov	r24, r28
     786:	df df       	rcall	.-66     	; 0x746 <eeprom_writebyte>
     788:	cf 5f       	subi	r28, 0xFF	; 255
/*           from uiAddress_start     */
/*====================================*/
void eeprom_writestr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
	unsigned char i__;
	if(!ucData_buff)return;
	for(i__=0;i__<ucData_len;i__++){
     78a:	cd 13       	cpse	r28, r29
     78c:	f8 cf       	rjmp	.-16     	; 0x77e <eeprom_writestr+0x1a>
		eeprom_writebyte(uiAddress_start + i__, ucData_buff[i__]);
	}
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <eeprom_readbyte>:
/*  Parameter: uiAddress,ucData       */
/*  Description : read ucData form    */
/*              eeprom at uiAddress   */
/*====================================*/
unsigned char eeprom_readbyte(unsigned char uiAddress){
	while(EECR & _BV(EEPE)); 	//Wait for completion of previous write
     798:	f9 99       	sbic	0x1f, 1	; 31
     79a:	fe cf       	rjmp	.-4      	; 0x798 <eeprom_readbyte>
	SREG = SREG & 0x7f;			//disable interrup
     79c:	9f b7       	in	r25, 0x3f	; 63
     79e:	9f 77       	andi	r25, 0x7F	; 127
     7a0:	9f bf       	out	0x3f, r25	; 63
	EEAR = uiAddress;			//Set up address register
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	92 bd       	out	0x22, r25	; 34
     7a6:	81 bd       	out	0x21, r24	; 33
	EECR |= _BV(EERE);			//Start eeprom read by writing EERE
     7a8:	f8 9a       	sbi	0x1f, 0	; 31
	SREG = SREG | 0x80;			//re-enable interrupt
     7aa:	8f b7       	in	r24, 0x3f	; 63
     7ac:	80 68       	ori	r24, 0x80	; 128
     7ae:	8f bf       	out	0x3f, r24	; 63
	return EEDR;				//Return data from data register
     7b0:	80 b5       	in	r24, 0x20	; 32
}
     7b2:	08 95       	ret

000007b4 <eeprom_readstr>:
/*  Description : read string from    */
/*           *ucData_buff with length */
/*           is "len" from eeprom     */
/*           at uiAddress_start       */
/*====================================*/
void eeprom_readstr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	c8 2f       	mov	r28, r24
     7be:	d4 2f       	mov	r29, r20
	unsigned char i__;
	if(!ucData_buff)
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <eeprom_readstr+0x20>
		ucData_buff = malloc(ucData_len);
     7c6:	84 2f       	mov	r24, r20
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <malloc>
     7ce:	bc 01       	movw	r22, r24
	if(!ucData_buff)return;
     7d0:	89 2b       	or	r24, r25
     7d2:	61 f0       	breq	.+24     	; 0x7ec <eeprom_readstr+0x38>
	for(i__=0;i__<ucData_len;i__++){
     7d4:	dd 23       	and	r29, r29
     7d6:	51 f0       	breq	.+20     	; 0x7ec <eeprom_readstr+0x38>
     7d8:	8b 01       	movw	r16, r22
     7da:	dc 0f       	add	r29, r28
		*ucData_buff++ = eeprom_readbyte(uiAddress_start + i__);
     7dc:	8c 2f       	mov	r24, r28
     7de:	dc df       	rcall	.-72     	; 0x798 <eeprom_readbyte>
     7e0:	f8 01       	movw	r30, r16
     7e2:	81 93       	st	Z+, r24
     7e4:	8f 01       	movw	r16, r30
     7e6:	cf 5f       	subi	r28, 0xFF	; 255
void eeprom_readstr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
	unsigned char i__;
	if(!ucData_buff)
		ucData_buff = malloc(ucData_len);
	if(!ucData_buff)return;
	for(i__=0;i__<ucData_len;i__++){
     7e8:	cd 13       	cpse	r28, r29
     7ea:	f8 cf       	rjmp	.-16     	; 0x7dc <eeprom_readstr+0x28>
		*ucData_buff++ = eeprom_readbyte(uiAddress_start + i__);
	}
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <encoder_init>:
}

void reset_distance()
{
	distance1 = 0;
	distance2 = 0;
     7f6:	80 ea       	ldi	r24, 0xA0	; 160
     7f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     7fc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     800:	8c e0       	ldi	r24, 0x0C	; 12
     802:	8d bb       	out	0x1d, r24	; 29
     804:	8c bb       	out	0x1c, r24	; 28
     806:	8a b1       	in	r24, 0x0a	; 10
     808:	83 7f       	andi	r24, 0xF3	; 243
     80a:	8a b9       	out	0x0a, r24	; 10
     80c:	8e b1       	in	r24, 0x0e	; 14
     80e:	8c 60       	ori	r24, 0x0C	; 12
     810:	8e b9       	out	0x0e, r24	; 14
     812:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <distance1+0x1>
     816:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <distance1>
     81a:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <vantoc1>
     81e:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <distance2+0x1>
     822:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <distance2>
     826:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <vantoc2>
     82a:	08 95       	ret

0000082c <__vector_3>:
}

//External interrupt 6 service routine
ISR(INT2_vect)
{		
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
		distance1 ++;
     83a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <distance1>
     83e:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <distance1+0x1>
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <distance1+0x1>
     848:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <distance1>

}
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_4>:
//External interrupt 7 service routine
ISR(INT3_vect)
{
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25

		distance2 ++;
     868:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <distance2>
     86c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <distance2+0x1>
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <distance2+0x1>
     876:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <distance2>
}
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <handle_init>:
/*                  Servo motor       */
/*====================================*/
unsigned int handle_center = 1500;
void handle_init(){

	DDRB  |=  _BV(PB5);
     888:	25 9a       	sbi	0x04, 5	; 4
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
     88a:	80 e8       	ldi	r24, 0x80	; 128
     88c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
     890:	82 e1       	ldi	r24, 0x12	; 18
     892:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
TCNT1H=0x00;
     896:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
TCNT1L=0x00;
     89a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
ICR1H=0x13;
     89e:	83 e1       	ldi	r24, 0x13	; 19
     8a0:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
ICR1L=0x88;
     8a4:	88 e8       	ldi	r24, 0x88	; 136
     8a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
OCR1AH=0x05;
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
OCR1AL=0xDC;
     8b0:	8c ed       	ldi	r24, 0xDC	; 220
     8b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
OCR1BH=0x00;
     8b6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
OCR1BL=0x00;
     8ba:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
OCR1CH=0x00;
     8be:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
OCR1CL=0x00;
     8c2:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
     8c6:	08 95       	ret

000008c8 <handle>:
/*  Parameter: _angle                 */
/*  Description: used to control Servo*/
/*               to turn to "_angle"  */
/*====================================*/
void handle(int _angle){
	RC_ANGLE = handle_center - HANDLE_STEP * _angle;
     8c8:	26 ef       	ldi	r18, 0xF6	; 246
     8ca:	ac 01       	movw	r20, r24
     8cc:	24 03       	mulsu	r18, r20
     8ce:	c0 01       	movw	r24, r0
     8d0:	25 9f       	mul	r18, r21
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     8da:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     8e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     8ea:	08 95       	ret

000008ec <handleMicro>:
}
void handleMicro(int _angle){
	RC_ANGLE = handle_center - _angle;
     8ec:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     8f0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     8f4:	28 1b       	sub	r18, r24
     8f6:	39 0b       	sbc	r19, r25
     8f8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     8fc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     900:	08 95       	ret

00000902 <save_handle_center>:
}
void save_handle_center ()
{
	eeprom_writebyte (HANDLE_CENTER_POS, 	handle_center);			//low byte
     902:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <handle_center>
     906:	88 e2       	ldi	r24, 0x28	; 40
     908:	1e df       	rcall	.-452    	; 0x746 <eeprom_writebyte>
	eeprom_writebyte (HANDLE_CENTER_POS+1, 	handle_center>>8);		//hight byte
     90a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <handle_center+0x1>
     90e:	89 e2       	ldi	r24, 0x29	; 41
     910:	1a cf       	rjmp	.-460    	; 0x746 <eeprom_writebyte>
     912:	08 95       	ret

00000914 <read_handle_center>:
}
void read_handle_center ()
{
	handle_center = eeprom_readbyte (HANDLE_CENTER_POS+1);
     914:	89 e2       	ldi	r24, 0x29	; 41
     916:	40 df       	rcall	.-384    	; 0x798 <eeprom_readbyte>
	handle_center <<= 8;
     918:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <handle_center>
     91c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <handle_center+0x1>
	handle_center = handle_center + eeprom_readbyte (HANDLE_CENTER_POS);
     920:	88 e2       	ldi	r24, 0x28	; 40
     922:	3a df       	rcall	.-396    	; 0x798 <eeprom_readbyte>
     924:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     928:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     92c:	a9 01       	movw	r20, r18
     92e:	48 0f       	add	r20, r24
     930:	51 1d       	adc	r21, r1
     932:	ca 01       	movw	r24, r20
     934:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <handle_center+0x1>
     938:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <handle_center>
	if (handle_center < 700)
     93c:	8c 3b       	cpi	r24, 0xBC	; 188
     93e:	52 e0       	ldi	r21, 0x02	; 2
     940:	95 07       	cpc	r25, r21
     942:	38 f4       	brcc	.+14     	; 0x952 <read_handle_center+0x3e>
		handle_center = 1500;
     944:	8c ed       	ldi	r24, 0xDC	; 220
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
     94c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
     950:	08 95       	ret
	if (handle_center > 2300)
     952:	8d 3f       	cpi	r24, 0xFD	; 253
     954:	98 40       	sbci	r25, 0x08	; 8
     956:	30 f0       	brcs	.+12     	; 0x964 <read_handle_center+0x50>
		handle_center = 1500;
     958:	8c ed       	ldi	r24, 0xDC	; 220
     95a:	95 e0       	ldi	r25, 0x05	; 5
     95c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
     960:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
     964:	08 95       	ret

00000966 <input_init>:
/*               for input function   */
/*              2. Dipswitch, push    */
/*                 button             */
/*====================================*/
void input_init(){
	BUTTON_DIR  &= ~(_BV(KEY0_PIN) | _BV(KEY1_PIN) | _BV(KEY2_PIN) | _BV(KEY3_PIN));
     966:	a1 e0       	ldi	r26, 0x01	; 1
     968:	b1 e0       	ldi	r27, 0x01	; 1
     96a:	8c 91       	ld	r24, X
     96c:	80 7f       	andi	r24, 0xF0	; 240
     96e:	8c 93       	st	X, r24
	BUTTON_PORT |= _BV(KEY0_PIN) | _BV(KEY1_PIN) | _BV(KEY2_PIN) | _BV(KEY3_PIN);			// 4 push button on MCU Circuit
     970:	e2 e0       	ldi	r30, 0x02	; 2
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	80 81       	ld	r24, Z
     976:	8f 60       	ori	r24, 0x0F	; 15
     978:	80 83       	st	Z, r24
	DIPSW_DIR  &= ~(_BV(SW0_PIN) | _BV(SW1_PIN) | _BV(SW2_PIN) | _BV(SW3_PIN));
     97a:	8c 91       	ld	r24, X
     97c:	8f 70       	andi	r24, 0x0F	; 15
     97e:	8c 93       	st	X, r24
	DIPSW_PORT |= _BV(SW0_PIN) | _BV(SW1_PIN) | _BV(SW2_PIN) | _BV(SW3_PIN);				// dip switch 4 on MCU Circuit
     980:	80 81       	ld	r24, Z
     982:	80 6f       	ori	r24, 0xF0	; 240
     984:	80 83       	st	Z, r24
	//DDRE  &= ~_BV(PE2);
//	DDRE  &= ~_BV(GATE_SENSOR_PIN);
//	PORTE |= _BV(GATE_SENSOR_PIN);		// sensor to recognize gate
	

	key1 = key2 = key0 = key_input = 0x0f;
     986:	8f e0       	ldi	r24, 0x0F	; 15
     988:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <key_input>
     98c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <key0>
     990:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <key2>
     994:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <key1>
	dipsw1 = dipsw2 = dipsw0 = dipsw_input = 0xf0;
     998:	80 ef       	ldi	r24, 0xF0	; 240
     99a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <dipsw_input>
     99e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <dipsw0>
     9a2:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <dipsw2>
     9a6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <dipsw1>
     9aa:	08 95       	ret

000009ac <update_input>:
/*             button                 */
/*====================================*/
void update_input(){
	unsigned char _temp;

	key2 = key1;
     9ac:	40 91 fd 02 	lds	r20, 0x02FD	; 0x8002fd <key1>
     9b0:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <key2>
	key1 = key0;
     9b4:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <key0>
     9b8:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <key1>
	dipsw2  = dipsw1;
     9bc:	50 91 f9 02 	lds	r21, 0x02F9	; 0x8002f9 <dipsw1>
     9c0:	50 93 ff 02 	sts	0x02FF, r21	; 0x8002ff <dipsw2>
	dipsw1  = dipsw0;
     9c4:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <dipsw0>
     9c8:	20 93 f9 02 	sts	0x02F9, r18	; 0x8002f9 <dipsw1>

	_temp = PINH;
     9cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
	dipsw0  = _temp & SW_MASK;
     9d0:	38 2f       	mov	r19, r24
     9d2:	30 7f       	andi	r19, 0xF0	; 240
     9d4:	30 93 f8 02 	sts	0x02F8, r19	; 0x8002f8 <dipsw0>
	key0 = _temp & KEY_MASK;
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <key0>

	if((dipsw0==dipsw1)&&(dipsw1==dipsw2))
     9de:	23 13       	cpse	r18, r19
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <update_input+0x3e>
     9e2:	52 13       	cpse	r21, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <update_input+0x3e>
		dipsw_input = dipsw0;
     9e6:	50 93 01 03 	sts	0x0301, r21	; 0x800301 <dipsw_input>

  	if ((key0 == key1) && (key1 == key2)){
     9ea:	98 13       	cpse	r25, r24
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <update_input+0x4a>
     9ee:	49 13       	cpse	r20, r25
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <update_input+0x4a>
		key_input = key0;
     9f2:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <key_input>
     9f6:	08 95       	ret

000009f8 <get_key>:
/*  Description: get state of push    */
/*         button on MCU circuit      */
/*		   _key_id is KEY0, KEY1, KEY2*/
/*			or KEY3					  */
/*====================================*/
unsigned char get_key(unsigned char _key_id){
     9f8:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <key_input>
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	a9 01       	movw	r20, r18
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <get_key+0xe>
     a02:	55 95       	asr	r21
     a04:	47 95       	ror	r20
     a06:	8a 95       	dec	r24
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <get_key+0xa>
     a0a:	ca 01       	movw	r24, r20
     a0c:	51 e0       	ldi	r21, 0x01	; 1
     a0e:	85 27       	eor	r24, r21
	if(key_input & _BV(_key_id))
		return 0;
	return 1;
}
     a10:	81 70       	andi	r24, 0x01	; 1
     a12:	08 95       	ret

00000a14 <get_dipsw>:
/*  Return value: unsigned char       */
/*  Description: get state of         */
/*                          dipswitch */
/*====================================*/
unsigned char get_dipsw(){
	return (dipsw_input>>4);
     a14:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <dipsw_input>
}
     a18:	82 95       	swap	r24
     a1a:	8f 70       	andi	r24, 0x0F	; 15
     a1c:	08 95       	ret

00000a1e <getGateSensor>:
/*               sensor               */
/*====================================*/
unsigned char getGateSensor(){
	
	return gatesensorMaskut;
}
     a1e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <gatesensorMaskut>
     a22:	08 95       	ret

00000a24 <LCD_Enable>:
//	LCD_PutDec(minute);
	LCD_PutChar(':');
	LCD_PutD(((second)%100/10));
	LCD_PutD((((second)%100)%10));
//	LCD_PutDec(second);
}
     a24:	47 9a       	sbi	0x08, 7	; 8
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	8a 95       	dec	r24
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <LCD_Enable+0x4>
     a2c:	47 98       	cbi	0x08, 7	; 8
     a2e:	87 e5       	ldi	r24, 0x57	; 87
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <LCD_Enable+0xe>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <LCD_Enable+0x14>
     a38:	00 00       	nop
     a3a:	08 95       	ret

00000a3c <LCD_Send4Bit>:
     a3c:	98 b1       	in	r25, 0x08	; 8
     a3e:	8f 70       	andi	r24, 0x0F	; 15
     a40:	90 7f       	andi	r25, 0xF0	; 240
     a42:	89 2b       	or	r24, r25
     a44:	88 b9       	out	0x08, r24	; 8
     a46:	08 95       	ret

00000a48 <LCD_SendData>:
     a48:	cf 93       	push	r28
     a4a:	c8 2f       	mov	r28, r24
     a4c:	82 95       	swap	r24
     a4e:	8f 70       	andi	r24, 0x0F	; 15
     a50:	f5 df       	rcall	.-22     	; 0xa3c <LCD_Send4Bit>
     a52:	e8 df       	rcall	.-48     	; 0xa24 <LCD_Enable>
     a54:	8c 2f       	mov	r24, r28
     a56:	f2 df       	rcall	.-28     	; 0xa3c <LCD_Send4Bit>
     a58:	e5 df       	rcall	.-54     	; 0xa24 <LCD_Enable>
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <LCD_SendCommand>:
     a5e:	cf 93       	push	r28
     a60:	c8 2f       	mov	r28, r24
     a62:	45 98       	cbi	0x08, 5	; 8
     a64:	82 95       	swap	r24
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	e9 df       	rcall	.-46     	; 0xa3c <LCD_Send4Bit>
     a6a:	dc df       	rcall	.-72     	; 0xa24 <LCD_Enable>
     a6c:	8c 2f       	mov	r24, r28
     a6e:	e6 df       	rcall	.-52     	; 0xa3c <LCD_Send4Bit>
     a70:	d9 df       	rcall	.-78     	; 0xa24 <LCD_Enable>
     a72:	45 9a       	sbi	0x08, 5	; 8
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <LCD_Gotoxy>:
     a78:	45 98       	cbi	0x08, 5	; 8
     a7a:	61 11       	cpse	r22, r1
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <LCD_Gotoxy+0xa>
     a7e:	80 58       	subi	r24, 0x80	; 128
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <LCD_Gotoxy+0xc>
     a82:	80 54       	subi	r24, 0x40	; 64
     a84:	ef ed       	ldi	r30, 0xDF	; 223
     a86:	fe e2       	ldi	r31, 0x2E	; 46
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <LCD_Gotoxy+0x10>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <LCD_Gotoxy+0x16>
     a8e:	00 00       	nop
     a90:	e6 df       	rcall	.-52     	; 0xa5e <LCD_SendCommand>
     a92:	8f e9       	ldi	r24, 0x9F	; 159
     a94:	9f e0       	ldi	r25, 0x0F	; 15
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <LCD_Gotoxy+0x1e>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCD_Gotoxy+0x24>
     a9c:	00 00       	nop
     a9e:	08 95       	ret

00000aa0 <LCD_Clr>:
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	dd df       	rcall	.-70     	; 0xa5e <LCD_SendCommand>
     aa4:	8f e3       	ldi	r24, 0x3F	; 63
     aa6:	9c e9       	ldi	r25, 0x9C	; 156
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCD_Clr+0x8>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <LCD_Clr+0xe>
     aae:	00 00       	nop
     ab0:	08 95       	ret

00000ab2 <LCD_Init>:
     ab2:	87 b1       	in	r24, 0x07	; 7
     ab4:	8f 60       	ori	r24, 0x0F	; 15
     ab6:	87 b9       	out	0x07, r24	; 7
     ab8:	87 b1       	in	r24, 0x07	; 7
     aba:	80 6a       	ori	r24, 0xA0	; 160
     abc:	87 b9       	out	0x07, r24	; 7
     abe:	3e 9a       	sbi	0x07, 6	; 7
     ac0:	88 b1       	in	r24, 0x08	; 8
     ac2:	80 7f       	andi	r24, 0xF0	; 240
     ac4:	88 b9       	out	0x08, r24	; 8
     ac6:	2f ef       	ldi	r18, 0xFF	; 255
     ac8:	89 ef       	ldi	r24, 0xF9	; 249
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	21 50       	subi	r18, 0x01	; 1
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <LCD_Init+0x1a>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <LCD_Init+0x24>
     ad6:	00 00       	nop
     ad8:	45 98       	cbi	0x08, 5	; 8
     ada:	8f e1       	ldi	r24, 0x1F	; 31
     adc:	9e e4       	ldi	r25, 0x4E	; 78
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <LCD_Init+0x2c>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <LCD_Init+0x32>
     ae4:	00 00       	nop
     ae6:	46 98       	cbi	0x08, 6	; 8
     ae8:	8f e1       	ldi	r24, 0x1F	; 31
     aea:	9e e4       	ldi	r25, 0x4E	; 78
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <LCD_Init+0x3a>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <LCD_Init+0x40>
     af2:	00 00       	nop
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	b3 df       	rcall	.-154    	; 0xa5e <LCD_SendCommand>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	9c e9       	ldi	r25, 0x9C	; 156
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <LCD_Init+0x4a>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <LCD_Init+0x50>
     b02:	00 00       	nop
     b04:	8f df       	rcall	.-226    	; 0xa24 <LCD_Enable>
     b06:	8f e3       	ldi	r24, 0x3F	; 63
     b08:	9c e9       	ldi	r25, 0x9C	; 156
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <LCD_Init+0x58>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <LCD_Init+0x5e>
     b10:	00 00       	nop
     b12:	88 df       	rcall	.-240    	; 0xa24 <LCD_Enable>
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	9c e9       	ldi	r25, 0x9C	; 156
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <LCD_Init+0x66>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <LCD_Init+0x6c>
     b1e:	00 00       	nop
     b20:	81 df       	rcall	.-254    	; 0xa24 <LCD_Enable>
     b22:	8f e3       	ldi	r24, 0x3F	; 63
     b24:	9c e9       	ldi	r25, 0x9C	; 156
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <LCD_Init+0x74>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <LCD_Init+0x7a>
     b2c:	00 00       	nop
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	96 df       	rcall	.-212    	; 0xa5e <LCD_SendCommand>
     b32:	8f e3       	ldi	r24, 0x3F	; 63
     b34:	9c e9       	ldi	r25, 0x9C	; 156
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_Init+0x84>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <LCD_Init+0x8a>
     b3c:	00 00       	nop
     b3e:	88 e2       	ldi	r24, 0x28	; 40
     b40:	83 df       	rcall	.-250    	; 0xa48 <LCD_SendData>
     b42:	8f e3       	ldi	r24, 0x3F	; 63
     b44:	9c e9       	ldi	r25, 0x9C	; 156
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <LCD_Init+0x94>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <LCD_Init+0x9a>
     b4c:	00 00       	nop
     b4e:	8c e0       	ldi	r24, 0x0C	; 12
     b50:	86 df       	rcall	.-244    	; 0xa5e <LCD_SendCommand>
     b52:	8f e3       	ldi	r24, 0x3F	; 63
     b54:	9c e9       	ldi	r25, 0x9C	; 156
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <LCD_Init+0xa4>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <LCD_Init+0xaa>
     b5c:	00 00       	nop
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	7e df       	rcall	.-260    	; 0xa5e <LCD_SendCommand>
     b62:	8f e3       	ldi	r24, 0x3F	; 63
     b64:	9c e9       	ldi	r25, 0x9C	; 156
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <LCD_Init+0xb4>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <LCD_Init+0xba>
     b6c:	00 00       	nop
     b6e:	98 df       	rcall	.-208    	; 0xaa0 <LCD_Clr>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	81 cf       	rjmp	.-254    	; 0xa78 <LCD_Gotoxy>
     b76:	08 95       	ret

00000b78 <LCD_PutD>:
     b78:	80 5d       	subi	r24, 0xD0	; 208
     b7a:	66 cf       	rjmp	.-308    	; 0xa48 <LCD_SendData>
     b7c:	08 95       	ret

00000b7e <LCD_Puts>:
// 		s++;
// 	}
// }

void LCD_Puts(char *s)
{
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	ec 01       	movw	r28, r24
	LCD_RS_PORT |= _BV(LCD_RS);
     b84:	45 9a       	sbi	0x08, 5	; 8
	while(*s)
     b86:	88 81       	ld	r24, Y
     b88:	88 23       	and	r24, r24
     b8a:	29 f0       	breq	.+10     	; 0xb96 <LCD_Puts+0x18>
     b8c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_SendData(*s);
     b8e:	5c df       	rcall	.-328    	; 0xa48 <LCD_SendData>
// }

void LCD_Puts(char *s)
{
	LCD_RS_PORT |= _BV(LCD_RS);
	while(*s)
     b90:	89 91       	ld	r24, Y+
     b92:	81 11       	cpse	r24, r1
     b94:	fc cf       	rjmp	.-8      	; 0xb8e <LCD_Puts+0x10>
	{
		LCD_SendData(*s);
		s=s+1;
	}
	LCD_RS_PORT &= ~_BV(LCD_RS);
     b96:	45 98       	cbi	0x08, 5	; 8
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <LCD_PutDec>:
			
		}
}

void LCD_PutDec(unsigned int Data)
{
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ac 01       	movw	r20, r24
	if (Data < 10)
     ba8:	8a 30       	cpi	r24, 0x0A	; 10
     baa:	91 05       	cpc	r25, r1
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <LCD_PutDec+0x12>
     bae:	69 c0       	rjmp	.+210    	; 0xc82 <LCD_PutDec+0xe4>
	{
		LCD_PutD((((Data%10000)%1000)%100)%10);
     bb0:	9c 01       	movw	r18, r24
     bb2:	32 95       	swap	r19
     bb4:	22 95       	swap	r18
     bb6:	2f 70       	andi	r18, 0x0F	; 15
     bb8:	23 27       	eor	r18, r19
     bba:	3f 70       	andi	r19, 0x0F	; 15
     bbc:	23 27       	eor	r18, r19
     bbe:	a7 e4       	ldi	r26, 0x47	; 71
     bc0:	b3 e0       	ldi	r27, 0x03	; 3
     bc2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	60 e1       	ldi	r22, 0x10	; 16
     bd4:	77 e2       	ldi	r23, 0x27	; 39
     bd6:	86 9f       	mul	r24, r22
     bd8:	90 01       	movw	r18, r0
     bda:	87 9f       	mul	r24, r23
     bdc:	30 0d       	add	r19, r0
     bde:	96 9f       	mul	r25, r22
     be0:	30 0d       	add	r19, r0
     be2:	11 24       	eor	r1, r1
     be4:	42 1b       	sub	r20, r18
     be6:	53 0b       	sbc	r21, r19
     be8:	9a 01       	movw	r18, r20
     bea:	36 95       	lsr	r19
     bec:	27 95       	ror	r18
     bee:	36 95       	lsr	r19
     bf0:	27 95       	ror	r18
     bf2:	36 95       	lsr	r19
     bf4:	27 95       	ror	r18
     bf6:	a5 ec       	ldi	r26, 0xC5	; 197
     bf8:	b0 e2       	ldi	r27, 0x20	; 32
     bfa:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     bfe:	92 95       	swap	r25
     c00:	82 95       	swap	r24
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	89 27       	eor	r24, r25
     c06:	9f 70       	andi	r25, 0x0F	; 15
     c08:	89 27       	eor	r24, r25
     c0a:	68 ee       	ldi	r22, 0xE8	; 232
     c0c:	73 e0       	ldi	r23, 0x03	; 3
     c0e:	86 9f       	mul	r24, r22
     c10:	90 01       	movw	r18, r0
     c12:	87 9f       	mul	r24, r23
     c14:	30 0d       	add	r19, r0
     c16:	96 9f       	mul	r25, r22
     c18:	30 0d       	add	r19, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	42 1b       	sub	r20, r18
     c1e:	53 0b       	sbc	r21, r19
     c20:	9a 01       	movw	r18, r20
     c22:	36 95       	lsr	r19
     c24:	27 95       	ror	r18
     c26:	36 95       	lsr	r19
     c28:	27 95       	ror	r18
     c2a:	ab e7       	ldi	r26, 0x7B	; 123
     c2c:	b4 e1       	ldi	r27, 0x14	; 20
     c2e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	64 e6       	ldi	r22, 0x64	; 100
     c38:	68 9f       	mul	r22, r24
     c3a:	90 01       	movw	r18, r0
     c3c:	69 9f       	mul	r22, r25
     c3e:	30 0d       	add	r19, r0
     c40:	11 24       	eor	r1, r1
     c42:	42 1b       	sub	r20, r18
     c44:	53 0b       	sbc	r21, r19
     c46:	9a 01       	movw	r18, r20
     c48:	ad ec       	ldi	r26, 0xCD	; 205
     c4a:	bc ec       	ldi	r27, 0xCC	; 204
     c4c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	9c 01       	movw	r18, r24
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	24 2f       	mov	r18, r20
     c74:	28 1b       	sub	r18, r24
     c76:	82 2f       	mov	r24, r18
     c78:	7f df       	rcall	.-258    	; 0xb78 <LCD_PutD>
		LCD_Puts("  ");
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	7f df       	rcall	.-258    	; 0xb7e <LCD_Puts>
     c80:	e2 c0       	rjmp	.+452    	; 0xe46 <LCD_PutDec+0x2a8>
	}
	else if (Data < 100)
     c82:	84 36       	cpi	r24, 0x64	; 100
     c84:	91 05       	cpc	r25, r1
     c86:	08 f0       	brcs	.+2      	; 0xc8a <LCD_PutDec+0xec>
     c88:	6d c0       	rjmp	.+218    	; 0xd64 <LCD_PutDec+0x1c6>
	{
			
		LCD_PutD(((Data%10000)%1000)%100/10);
     c8a:	9c 01       	movw	r18, r24
     c8c:	32 95       	swap	r19
     c8e:	22 95       	swap	r18
     c90:	2f 70       	andi	r18, 0x0F	; 15
     c92:	23 27       	eor	r18, r19
     c94:	3f 70       	andi	r19, 0x0F	; 15
     c96:	23 27       	eor	r18, r19
     c98:	a7 e4       	ldi	r26, 0x47	; 71
     c9a:	b3 e0       	ldi	r27, 0x03	; 3
     c9c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     ca0:	96 95       	lsr	r25
     ca2:	87 95       	ror	r24
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	60 e1       	ldi	r22, 0x10	; 16
     cae:	77 e2       	ldi	r23, 0x27	; 39
     cb0:	86 9f       	mul	r24, r22
     cb2:	90 01       	movw	r18, r0
     cb4:	87 9f       	mul	r24, r23
     cb6:	30 0d       	add	r19, r0
     cb8:	96 9f       	mul	r25, r22
     cba:	30 0d       	add	r19, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	42 1b       	sub	r20, r18
     cc0:	53 0b       	sbc	r21, r19
     cc2:	9a 01       	movw	r18, r20
     cc4:	36 95       	lsr	r19
     cc6:	27 95       	ror	r18
     cc8:	36 95       	lsr	r19
     cca:	27 95       	ror	r18
     ccc:	36 95       	lsr	r19
     cce:	27 95       	ror	r18
     cd0:	a5 ec       	ldi	r26, 0xC5	; 197
     cd2:	b0 e2       	ldi	r27, 0x20	; 32
     cd4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     cd8:	92 95       	swap	r25
     cda:	82 95       	swap	r24
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	89 27       	eor	r24, r25
     ce0:	9f 70       	andi	r25, 0x0F	; 15
     ce2:	89 27       	eor	r24, r25
     ce4:	68 ee       	ldi	r22, 0xE8	; 232
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	86 9f       	mul	r24, r22
     cea:	90 01       	movw	r18, r0
     cec:	87 9f       	mul	r24, r23
     cee:	30 0d       	add	r19, r0
     cf0:	96 9f       	mul	r25, r22
     cf2:	30 0d       	add	r19, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	42 1b       	sub	r20, r18
     cf8:	53 0b       	sbc	r21, r19
     cfa:	9a 01       	movw	r18, r20
     cfc:	36 95       	lsr	r19
     cfe:	27 95       	ror	r18
     d00:	36 95       	lsr	r19
     d02:	27 95       	ror	r18
     d04:	ab e7       	ldi	r26, 0x7B	; 123
     d06:	b4 e1       	ldi	r27, 0x14	; 20
     d08:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     d0c:	8c 01       	movw	r16, r24
     d0e:	16 95       	lsr	r17
     d10:	07 95       	ror	r16
     d12:	24 e6       	ldi	r18, 0x64	; 100
     d14:	20 9f       	mul	r18, r16
     d16:	c0 01       	movw	r24, r0
     d18:	21 9f       	mul	r18, r17
     d1a:	90 0d       	add	r25, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	8a 01       	movw	r16, r20
     d20:	08 1b       	sub	r16, r24
     d22:	19 0b       	sbc	r17, r25
     d24:	98 01       	movw	r18, r16
     d26:	ad ec       	ldi	r26, 0xCD	; 205
     d28:	bc ec       	ldi	r27, 0xCC	; 204
     d2a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     d2e:	ec 01       	movw	r28, r24
     d30:	d6 95       	lsr	r29
     d32:	c7 95       	ror	r28
     d34:	d6 95       	lsr	r29
     d36:	c7 95       	ror	r28
     d38:	d6 95       	lsr	r29
     d3a:	c7 95       	ror	r28
     d3c:	8c 2f       	mov	r24, r28
     d3e:	1c df       	rcall	.-456    	; 0xb78 <LCD_PutD>
		LCD_PutD((((Data%10000)%1000)%100)%10);
     d40:	ce 01       	movw	r24, r28
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	cc 0f       	add	r28, r28
     d48:	dd 1f       	adc	r29, r29
     d4a:	cc 0f       	add	r28, r28
     d4c:	dd 1f       	adc	r29, r29
     d4e:	cc 0f       	add	r28, r28
     d50:	dd 1f       	adc	r29, r29
     d52:	c8 0f       	add	r28, r24
     d54:	d9 1f       	adc	r29, r25
     d56:	80 2f       	mov	r24, r16
     d58:	8c 1b       	sub	r24, r28
		LCD_Puts(" ");
     d5a:	0e df       	rcall	.-484    	; 0xb78 <LCD_PutD>
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	0e df       	rcall	.-484    	; 0xb7e <LCD_Puts>
     d62:	71 c0       	rjmp	.+226    	; 0xe46 <LCD_PutDec+0x2a8>
	}
	else if (Data < 1000)
     d64:	88 3e       	cpi	r24, 0xE8	; 232
     d66:	23 e0       	ldi	r18, 0x03	; 3
     d68:	92 07       	cpc	r25, r18
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <LCD_PutDec+0x1d0>
     d6c:	6c c0       	rjmp	.+216    	; 0xe46 <LCD_PutDec+0x2a8>
	{	
		LCD_PutD(((Data%10000)%1000)/100);
     d6e:	9c 01       	movw	r18, r24
     d70:	32 95       	swap	r19
     d72:	22 95       	swap	r18
     d74:	2f 70       	andi	r18, 0x0F	; 15
     d76:	23 27       	eor	r18, r19
     d78:	3f 70       	andi	r19, 0x0F	; 15
     d7a:	23 27       	eor	r18, r19
     d7c:	a7 e4       	ldi	r26, 0x47	; 71
     d7e:	b3 e0       	ldi	r27, 0x03	; 3
     d80:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     d84:	96 95       	lsr	r25
     d86:	87 95       	ror	r24
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	60 e1       	ldi	r22, 0x10	; 16
     d92:	77 e2       	ldi	r23, 0x27	; 39
     d94:	86 9f       	mul	r24, r22
     d96:	90 01       	movw	r18, r0
     d98:	87 9f       	mul	r24, r23
     d9a:	30 0d       	add	r19, r0
     d9c:	96 9f       	mul	r25, r22
     d9e:	30 0d       	add	r19, r0
     da0:	11 24       	eor	r1, r1
     da2:	42 1b       	sub	r20, r18
     da4:	53 0b       	sbc	r21, r19
     da6:	9a 01       	movw	r18, r20
     da8:	36 95       	lsr	r19
     daa:	27 95       	ror	r18
     dac:	36 95       	lsr	r19
     dae:	27 95       	ror	r18
     db0:	36 95       	lsr	r19
     db2:	27 95       	ror	r18
     db4:	a5 ec       	ldi	r26, 0xC5	; 197
     db6:	b0 e2       	ldi	r27, 0x20	; 32
     db8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     dbc:	8c 01       	movw	r16, r24
     dbe:	12 95       	swap	r17
     dc0:	02 95       	swap	r16
     dc2:	0f 70       	andi	r16, 0x0F	; 15
     dc4:	01 27       	eor	r16, r17
     dc6:	1f 70       	andi	r17, 0x0F	; 15
     dc8:	01 27       	eor	r16, r17
     dca:	28 ee       	ldi	r18, 0xE8	; 232
     dcc:	33 e0       	ldi	r19, 0x03	; 3
     dce:	02 9f       	mul	r16, r18
     dd0:	c0 01       	movw	r24, r0
     dd2:	03 9f       	mul	r16, r19
     dd4:	90 0d       	add	r25, r0
     dd6:	12 9f       	mul	r17, r18
     dd8:	90 0d       	add	r25, r0
     dda:	11 24       	eor	r1, r1
     ddc:	8a 01       	movw	r16, r20
     dde:	08 1b       	sub	r16, r24
     de0:	19 0b       	sbc	r17, r25
     de2:	98 01       	movw	r18, r16
     de4:	36 95       	lsr	r19
     de6:	27 95       	ror	r18
     de8:	36 95       	lsr	r19
     dea:	27 95       	ror	r18
     dec:	ab e7       	ldi	r26, 0x7B	; 123
     dee:	b4 e1       	ldi	r27, 0x14	; 20
     df0:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     df4:	ec 01       	movw	r28, r24
     df6:	d6 95       	lsr	r29
     df8:	c7 95       	ror	r28
     dfa:	8c 2f       	mov	r24, r28
     dfc:	bd de       	rcall	.-646    	; 0xb78 <LCD_PutD>
		LCD_PutD(((Data%10000)%1000)%100/10);
     dfe:	24 e6       	ldi	r18, 0x64	; 100
     e00:	2c 9f       	mul	r18, r28
     e02:	c0 01       	movw	r24, r0
     e04:	2d 9f       	mul	r18, r29
     e06:	90 0d       	add	r25, r0
     e08:	11 24       	eor	r1, r1
     e0a:	08 1b       	sub	r16, r24
     e0c:	19 0b       	sbc	r17, r25
     e0e:	98 01       	movw	r18, r16
     e10:	ad ec       	ldi	r26, 0xCD	; 205
     e12:	bc ec       	ldi	r27, 0xCC	; 204
     e14:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__umulhisi3>
     e18:	ec 01       	movw	r28, r24
     e1a:	d6 95       	lsr	r29
     e1c:	c7 95       	ror	r28
     e1e:	d6 95       	lsr	r29
     e20:	c7 95       	ror	r28
     e22:	d6 95       	lsr	r29
     e24:	c7 95       	ror	r28
     e26:	8c 2f       	mov	r24, r28
     e28:	a7 de       	rcall	.-690    	; 0xb78 <LCD_PutD>
		LCD_PutD((((Data%10000)%1000)%100)%10);
     e2a:	ce 01       	movw	r24, r28
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	cc 0f       	add	r28, r28
     e32:	dd 1f       	adc	r29, r29
     e34:	cc 0f       	add	r28, r28
     e36:	dd 1f       	adc	r29, r29
     e38:	cc 0f       	add	r28, r28
     e3a:	dd 1f       	adc	r29, r29
     e3c:	c8 0f       	add	r28, r24
     e3e:	d9 1f       	adc	r29, r25
     e40:	80 2f       	mov	r24, r16
     e42:	8c 1b       	sub	r24, r28
     e44:	99 de       	rcall	.-718    	; 0xb78 <LCD_PutD>
// 		LCD_PutD(((Data%10000)%1000)/100);
// 		LCD_PutD(((Data%10000)%1000)%100/10);
// 		LCD_PutD((((Data%10000)%1000)%100)%10);
// 	}		
	
}
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

00000e50 <led_init>:
/*  Parameter: null                   */
/*  Description: configure hardware   */
/*               for led function     */
/*====================================*/
void led_init(){
	LED_DATA_DIR = 0xFF;
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	81 b9       	out	0x01, r24	; 1
	LED_DATA_PORT = 0xff;
     e54:	82 b9       	out	0x02, r24	; 2
	GRB_DATA_DIR |= 0x38;
     e56:	ea e0       	ldi	r30, 0x0A	; 10
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	88 63       	ori	r24, 0x38	; 56
     e5e:	80 83       	st	Z, r24
	GRB_DATA_PORT &= 0xc7;
     e60:	eb e0       	ldi	r30, 0x0B	; 11
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	80 81       	ld	r24, Z
     e66:	87 7c       	andi	r24, 0xC7	; 199
     e68:	80 83       	st	Z, r24
     e6a:	08 95       	ret

00000e6c <led_put>:
/*  Parameter: _val                   */
/*  Description: output _val into led */
/*             module on MCU circuit  */
/*====================================*/
void led_put(unsigned char _val){
	LED_DATA_PORT = ~_val;
     e6c:	80 95       	com	r24
     e6e:	82 b9       	out	0x02, r24	; 2
     e70:	08 95       	ret

00000e72 <RGB>:
}


void RGB(unsigned char redColor,unsigned char greenColor,unsigned char blueColor){
	if (redColor > 0 )
     e72:	88 23       	and	r24, r24
     e74:	31 f0       	breq	.+12     	; 0xe82 <RGB+0x10>
	GRB_DATA_PORT |= 0b00010000;
     e76:	eb e0       	ldi	r30, 0x0B	; 11
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	80 81       	ld	r24, Z
     e7c:	80 61       	ori	r24, 0x10	; 16
     e7e:	80 83       	st	Z, r24
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <RGB+0x1a>
	else GRB_DATA_PORT &= 0b11101111;
     e82:	eb e0       	ldi	r30, 0x0B	; 11
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	80 81       	ld	r24, Z
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	80 83       	st	Z, r24
	if (greenColor > 0 )
     e8c:	66 23       	and	r22, r22
     e8e:	31 f0       	breq	.+12     	; 0xe9c <RGB+0x2a>
	GRB_DATA_PORT |= 0b00100000;
     e90:	eb e0       	ldi	r30, 0x0B	; 11
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	80 83       	st	Z, r24
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <RGB+0x34>
	else GRB_DATA_PORT &= 0b11011111;
     e9c:	eb e0       	ldi	r30, 0x0B	; 11
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7d       	andi	r24, 0xDF	; 223
     ea4:	80 83       	st	Z, r24
	if (blueColor > 0 )
     ea6:	44 23       	and	r20, r20
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <RGB+0x44>
	GRB_DATA_PORT |= 0b00001000;
     eaa:	eb e0       	ldi	r30, 0x0B	; 11
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	80 83       	st	Z, r24
     eb4:	08 95       	ret
	else GRB_DATA_PORT &= 0b11110111;
     eb6:	eb e0       	ldi	r30, 0x0B	; 11
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	80 81       	ld	r24, Z
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	80 83       	st	Z, r24
     ec0:	08 95       	ret

00000ec2 <setup>:
		handleAndSpeed (5,speedRun);
		break;
		case 0x0e://
		case 0x0c://
		case 0x04:
		handleAndSpeed (10,speedRun);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	00 dd       	rcall	.-1536   	; 0x8c8 <handle>
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
     ed4:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
     ed8:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
     edc:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt4+0x1>
     ee0:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt4>
     ee4:	80 e3       	ldi	r24, 0x30	; 48
     ee6:	95 e7       	ldi	r25, 0x75	; 117
     ee8:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <RunTimer+0x1>
     eec:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <RunTimer>
     ef0:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <sensorPos>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
     efa:	8c dd       	rcall	.-1256   	; 0xa14 <get_dipsw>
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	37 97       	sbiw	r30, 0x07	; 7
     f02:	e9 30       	cpi	r30, 0x09	; 9
     f04:	f1 05       	cpc	r31, r1
     f06:	08 f0       	brcs	.+2      	; 0xf0a <setup+0x48>
     f08:	3d c2       	rjmp	.+1146   	; 0x1384 <__EEPROM_REGION_LENGTH__+0x384>
     f0a:	88 27       	eor	r24, r24
     f0c:	ee 58       	subi	r30, 0x8E	; 142
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__tablejump2__>
     f16:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
     f1a:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
     f1e:	84 e6       	ldi	r24, 0x64	; 100
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
     f26:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
     f2a:	42 e3       	ldi	r20, 0x32	; 50
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
     f32:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
     f36:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
     f3a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
     f3e:	28 ec       	ldi	r18, 0xC8	; 200
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <timerBoostAfter90+0x1>
     f46:	20 93 44 03 	sts	0x0344, r18	; 0x800344 <timerBoostAfter90>
     f4a:	6a e0       	ldi	r22, 0x0A	; 10
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angleChangeLanes+0x1>
     f52:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angleChangeLanes>
     f56:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
     f5a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
     f5e:	68 e7       	ldi	r22, 0x78	; 120
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
     f66:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
     f6a:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
     f6e:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
     f72:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <speedBoostAfterChangeLanes+0x1>
     f76:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <speedBoostAfterChangeLanes>
     f7a:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <timerBoostAfterChangeLanes+0x1>
     f7e:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <timerBoostAfterChangeLanes>
     f82:	8d e2       	ldi	r24, 0x2D	; 45
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
     f8a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
     f8e:	2a c2       	rjmp	.+1108   	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
     f90:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
     f94:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
     f98:	24 e6       	ldi	r18, 0x64	; 100
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <timerBrake90+0x1>
     fa0:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <timerBrake90>
     fa4:	82 e3       	ldi	r24, 0x32	; 50
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <speed90+0x1>
     fac:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <speed90>
     fb0:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <speedBoostAfter90+0x1>
     fb4:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <speedBoostAfter90>
     fb8:	48 ec       	ldi	r20, 0xC8	; 200
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	50 93 45 03 	sts	0x0345, r21	; 0x800345 <timerBoostAfter90+0x1>
     fc0:	40 93 44 03 	sts	0x0344, r20	; 0x800344 <timerBoostAfter90>
     fc4:	6a e0       	ldi	r22, 0x0A	; 10
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angleChangeLanes+0x1>
     fcc:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angleChangeLanes>
     fd0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
     fd4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
     fd8:	68 e7       	ldi	r22, 0x78	; 120
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
     fe0:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
     fe4:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <speedChangeLanes+0x1>
     fe8:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <speedChangeLanes>
     fec:	30 93 31 03 	sts	0x0331, r19	; 0x800331 <speedBoostAfterChangeLanes+0x1>
     ff0:	20 93 30 03 	sts	0x0330, r18	; 0x800330 <speedBoostAfterChangeLanes>
     ff4:	50 93 2b 03 	sts	0x032B, r21	; 0x80032b <timerBoostAfterChangeLanes+0x1>
     ff8:	40 93 2a 03 	sts	0x032A, r20	; 0x80032a <timerBoostAfterChangeLanes>
     ffc:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    1000:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    1004:	ef c1       	rjmp	.+990    	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    1006:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    100a:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    100e:	84 e6       	ldi	r24, 0x64	; 100
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
    1016:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
    101a:	42 e3       	ldi	r20, 0x32	; 50
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    1022:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    1026:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    102a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    102e:	28 ec       	ldi	r18, 0xC8	; 200
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <timerBoostAfter90+0x1>
    1036:	20 93 44 03 	sts	0x0344, r18	; 0x800344 <timerBoostAfter90>
    103a:	6a e0       	ldi	r22, 0x0A	; 10
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angleChangeLanes+0x1>
    1042:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angleChangeLanes>
    1046:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    104a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    104e:	68 e7       	ldi	r22, 0x78	; 120
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    1056:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    105a:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
    105e:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
    1062:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    1066:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <speedBoostAfterChangeLanes>
    106a:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    106e:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <timerBoostAfterChangeLanes>
    1072:	87 e3       	ldi	r24, 0x37	; 55
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    107a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    107e:	b2 c1       	rjmp	.+868    	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    1080:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    1084:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    1088:	84 e6       	ldi	r24, 0x64	; 100
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
    1090:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
    1094:	42 e3       	ldi	r20, 0x32	; 50
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    109c:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    10a0:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    10a4:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    10a8:	28 ec       	ldi	r18, 0xC8	; 200
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <timerBoostAfter90+0x1>
    10b0:	20 93 44 03 	sts	0x0344, r18	; 0x800344 <timerBoostAfter90>
    10b4:	6a e0       	ldi	r22, 0x0A	; 10
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angleChangeLanes+0x1>
    10bc:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angleChangeLanes>
    10c0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    10c4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    10c8:	68 e7       	ldi	r22, 0x78	; 120
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    10d0:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    10d4:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
    10d8:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
    10dc:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    10e0:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <speedBoostAfterChangeLanes>
    10e4:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    10e8:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <timerBoostAfterChangeLanes>
    10ec:	8c e3       	ldi	r24, 0x3C	; 60
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    10f4:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    10f8:	75 c1       	rjmp	.+746    	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    10fa:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    10fe:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    1102:	84 e6       	ldi	r24, 0x64	; 100
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
    110a:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
    110e:	42 e3       	ldi	r20, 0x32	; 50
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    1116:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    111a:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    111e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    1122:	28 ec       	ldi	r18, 0xC8	; 200
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <timerBoostAfter90+0x1>
    112a:	20 93 44 03 	sts	0x0344, r18	; 0x800344 <timerBoostAfter90>
    112e:	6a e0       	ldi	r22, 0x0A	; 10
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angleChangeLanes+0x1>
    1136:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angleChangeLanes>
    113a:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    113e:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    1142:	68 e7       	ldi	r22, 0x78	; 120
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    114a:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    114e:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
    1152:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
    1156:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    115a:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <speedBoostAfterChangeLanes>
    115e:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    1162:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <timerBoostAfterChangeLanes>
    1166:	81 e4       	ldi	r24, 0x41	; 65
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    116e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    1172:	38 c1       	rjmp	.+624    	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    1174:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    1178:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    117c:	84 e6       	ldi	r24, 0x64	; 100
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
    1184:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
    1188:	42 e3       	ldi	r20, 0x32	; 50
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    1190:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    1194:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    1198:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    119c:	28 ec       	ldi	r18, 0xC8	; 200
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <timerBoostAfter90+0x1>
    11a4:	20 93 44 03 	sts	0x0344, r18	; 0x800344 <timerBoostAfter90>
    11a8:	6a e0       	ldi	r22, 0x0A	; 10
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angleChangeLanes+0x1>
    11b0:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angleChangeLanes>
    11b4:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    11b8:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    11bc:	68 e7       	ldi	r22, 0x78	; 120
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    11c4:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    11c8:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
    11cc:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
    11d0:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    11d4:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <speedBoostAfterChangeLanes>
    11d8:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    11dc:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <timerBoostAfterChangeLanes>
    11e0:	86 e4       	ldi	r24, 0x46	; 70
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    11e8:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    11ec:	fb c0       	rjmp	.+502    	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    11ee:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    11f2:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    11f6:	84 e6       	ldi	r24, 0x64	; 100
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
    11fe:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
    1202:	42 e3       	ldi	r20, 0x32	; 50
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    120a:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    120e:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    1212:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    1216:	28 ec       	ldi	r18, 0xC8	; 200
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <timerBoostAfter90+0x1>
    121e:	20 93 44 03 	sts	0x0344, r18	; 0x800344 <timerBoostAfter90>
    1222:	6a e0       	ldi	r22, 0x0A	; 10
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angleChangeLanes+0x1>
    122a:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angleChangeLanes>
    122e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    1232:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    1236:	68 e7       	ldi	r22, 0x78	; 120
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    123e:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    1242:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
    1246:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
    124a:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    124e:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <speedBoostAfterChangeLanes>
    1252:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    1256:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <timerBoostAfterChangeLanes>
    125a:	8b e4       	ldi	r24, 0x4B	; 75
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    1262:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    1266:	be c0       	rjmp	.+380    	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    1268:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    126c:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    1270:	8c e3       	ldi	r24, 0x3C	; 60
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
    1278:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
    127c:	82 e8       	ldi	r24, 0x82	; 130
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <speed90+0x1>
    1284:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <speed90>
    1288:	28 ec       	ldi	r18, 0xC8	; 200
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <speedBoostAfter90+0x1>
    1290:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <speedBoostAfter90>
    1294:	84 e6       	ldi	r24, 0x64	; 100
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <timerBoostAfter90+0x1>
    129c:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <timerBoostAfter90>
    12a0:	42 e1       	ldi	r20, 0x12	; 18
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <angleChangeLanes+0x1>
    12a8:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <angleChangeLanes>
    12ac:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    12b0:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    12b4:	4e e1       	ldi	r20, 0x1E	; 30
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	50 93 0b 03 	sts	0x030B, r21	; 0x80030b <timerBrakeChangeLanes+0x1>
    12bc:	40 93 0a 03 	sts	0x030A, r20	; 0x80030a <timerBrakeChangeLanes>
    12c0:	44 eb       	ldi	r20, 0xB4	; 180
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
    12c8:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
    12cc:	46 ee       	ldi	r20, 0xE6	; 230
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	50 93 1b 03 	sts	0x031B, r21	; 0x80031b <speedRunForward+0x1>
    12d4:	40 93 1a 03 	sts	0x031A, r20	; 0x80031a <speedRunForward>
    12d8:	4d ec       	ldi	r20, 0xCD	; 205
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedRunForwardBeforeChangeLine+0x1>
    12e0:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedRunForwardBeforeChangeLine>
    12e4:	30 93 31 03 	sts	0x0331, r19	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    12e8:	20 93 30 03 	sts	0x0330, r18	; 0x800330 <speedBoostAfterChangeLanes>
    12ec:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    12f0:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <timerBoostAfterChangeLanes>
    12f4:	77 c0       	rjmp	.+238    	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    12f6:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    12fa:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    12fe:	8c e3       	ldi	r24, 0x3C	; 60
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <timerBrake90+0x1>
    1306:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <timerBrake90>
    130a:	82 e8       	ldi	r24, 0x82	; 130
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <speed90+0x1>
    1312:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <speed90>
    1316:	28 ec       	ldi	r18, 0xC8	; 200
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <speedBoostAfter90+0x1>
    131e:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <speedBoostAfter90>
    1322:	84 e6       	ldi	r24, 0x64	; 100
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <timerBoostAfter90+0x1>
    132a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <timerBoostAfter90>
    132e:	42 e1       	ldi	r20, 0x12	; 18
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <angleChangeLanes+0x1>
    1336:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <angleChangeLanes>
    133a:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    133e:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    1342:	4e e1       	ldi	r20, 0x1E	; 30
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	50 93 0b 03 	sts	0x030B, r21	; 0x80030b <timerBrakeChangeLanes+0x1>
    134a:	40 93 0a 03 	sts	0x030A, r20	; 0x80030a <timerBrakeChangeLanes>
    134e:	44 eb       	ldi	r20, 0xB4	; 180
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <speedChangeLanes+0x1>
    1356:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <speedChangeLanes>
    135a:	42 ed       	ldi	r20, 0xD2	; 210
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	50 93 1b 03 	sts	0x031B, r21	; 0x80031b <speedRunForward+0x1>
    1362:	40 93 1a 03 	sts	0x031A, r20	; 0x80031a <speedRunForward>
    1366:	43 ec       	ldi	r20, 0xC3	; 195
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedRunForwardBeforeChangeLine+0x1>
    136e:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedRunForwardBeforeChangeLine>
    1372:	30 93 31 03 	sts	0x0331, r19	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    1376:	20 93 30 03 	sts	0x0330, r18	; 0x800330 <speedBoostAfterChangeLanes>
    137a:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    137e:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <timerBoostAfterChangeLanes>
    1382:	30 c0       	rjmp	.+96     	; 0x13e4 <__EEPROM_REGION_LENGTH__+0x3e4>
    1384:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <speedBrake90+0x1>
    1388:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <speedBrake90>
    138c:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <timerBrake90+0x1>
    1390:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <timerBrake90>
    1394:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <speed90+0x1>
    1398:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <speed90>
    139c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <speedBoostAfter90+0x1>
    13a0:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <speedBoostAfter90>
    13a4:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <timerBoostAfter90+0x1>
    13a8:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <timerBoostAfter90>
    13ac:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <angleChangeLanes+0x1>
    13b0:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <angleChangeLanes>
    13b4:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    13b8:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    13bc:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <timerBrakeChangeLanes+0x1>
    13c0:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <timerBrakeChangeLanes>
    13c4:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <speedChangeLanes+0x1>
    13c8:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <speedChangeLanes>
    13cc:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    13d0:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBoostAfterChangeLanes>
    13d4:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    13d8:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <timerBoostAfterChangeLanes>
    13dc:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <speedRunForward+0x1>
    13e0:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <speedRunForward>
    13e4:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <speedRunForward>
    13e8:	30 91 1b 03 	lds	r19, 0x031B	; 0x80031b <speedRunForward+0x1>
    13ec:	30 93 05 03 	sts	0x0305, r19	; 0x800305 <speedRun0+0x1>
    13f0:	20 93 04 03 	sts	0x0304, r18	; 0x800304 <speedRun0>
    13f4:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <angle0+0x1>
    13f8:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <angle0>
    13fc:	30 93 2d 03 	sts	0x032D, r19	; 0x80032d <speedRun1+0x1>
    1400:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <speedRun1>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <angle1+0x1>
    140c:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <angle1>
    1410:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <speedRun2+0x1>
    1414:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <speedRun2>
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <angle2+0x1>
    1420:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <angle2>
    1424:	4f e5       	ldi	r20, 0x5F	; 95
    1426:	42 9f       	mul	r20, r18
    1428:	c0 01       	movw	r24, r0
    142a:	43 9f       	mul	r20, r19
    142c:	90 0d       	add	r25, r0
    142e:	11 24       	eor	r1, r1
    1430:	e4 e6       	ldi	r30, 0x64	; 100
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	bf 01       	movw	r22, r30
    1436:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    143a:	70 93 43 03 	sts	0x0343, r23	; 0x800343 <speedRun3+0x1>
    143e:	60 93 42 03 	sts	0x0342, r22	; 0x800342 <speedRun3>
    1442:	85 e0       	ldi	r24, 0x05	; 5
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angle3+0x1>
    144a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angle3>
    144e:	4a e5       	ldi	r20, 0x5A	; 90
    1450:	42 9f       	mul	r20, r18
    1452:	c0 01       	movw	r24, r0
    1454:	43 9f       	mul	r20, r19
    1456:	90 0d       	add	r25, r0
    1458:	11 24       	eor	r1, r1
    145a:	bf 01       	movw	r22, r30
    145c:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    1460:	70 93 37 03 	sts	0x0337, r23	; 0x800337 <speedRun4+0x1>
    1464:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <speedRun4>
    1468:	87 e0       	ldi	r24, 0x07	; 7
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <angle4+0x1>
    1470:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <angle4>
    1474:	45 e5       	ldi	r20, 0x55	; 85
    1476:	42 9f       	mul	r20, r18
    1478:	c0 01       	movw	r24, r0
    147a:	43 9f       	mul	r20, r19
    147c:	90 0d       	add	r25, r0
    147e:	11 24       	eor	r1, r1
    1480:	bf 01       	movw	r22, r30
    1482:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    1486:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <speedRun5+0x1>
    148a:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <speedRun5>
    148e:	8a e0       	ldi	r24, 0x0A	; 10
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <angle5+0x1>
    1496:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <angle5>
    149a:	40 e5       	ldi	r20, 0x50	; 80
    149c:	42 9f       	mul	r20, r18
    149e:	c0 01       	movw	r24, r0
    14a0:	43 9f       	mul	r20, r19
    14a2:	90 0d       	add	r25, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	bf 01       	movw	r22, r30
    14a8:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    14ac:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <speedRun6+0x1>
    14b0:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <speedRun6>
    14b4:	8c e0       	ldi	r24, 0x0C	; 12
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <angle6+0x1>
    14bc:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <angle6>
    14c0:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <speedRun7+0x1>
    14c4:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <speedRun7>
    14c8:	8f e0       	ldi	r24, 0x0F	; 15
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <angle7+0x1>
    14d0:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <angle7>
    14d4:	08 95       	ret

000014d6 <checkCrossLine>:
    14d6:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <sensor>
    14da:	93 7c       	andi	r25, 0xC3	; 195
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	93 3c       	cpi	r25, 0xC3	; 195
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <checkCrossLine+0xe>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	08 95       	ret

000014e6 <checkCrossHalfLine>:
    14e6:	f7 df       	rcall	.-18     	; 0x14d6 <checkCrossLine>
    14e8:	81 11       	cpse	r24, r1
    14ea:	0d c0       	rjmp	.+26     	; 0x1506 <checkCrossHalfLine+0x20>
    14ec:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    14f0:	98 2f       	mov	r25, r24
    14f2:	90 7f       	andi	r25, 0xF0	; 240
    14f4:	90 3f       	cpi	r25, 0xF0	; 240
    14f6:	49 f0       	breq	.+18     	; 0x150a <checkCrossHalfLine+0x24>
    14f8:	98 2f       	mov	r25, r24
    14fa:	9f 70       	andi	r25, 0x0F	; 15
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	9f 30       	cpi	r25, 0x0F	; 15
    1500:	29 f0       	breq	.+10     	; 0x150c <checkCrossHalfLine+0x26>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	08 95       	ret
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	08 95       	ret
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	08 95       	ret

0000150e <handleAndSpeed>:
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
    1518:	8b 01       	movw	r16, r22
    151a:	d6 d9       	rcall	.-3156   	; 0x8c8 <handle>
    151c:	dd 23       	and	r29, r29
    151e:	14 f5       	brge	.+68     	; 0x1564 <handleAndSpeed+0x56>
    1520:	d1 95       	neg	r29
    1522:	c1 95       	neg	r28
    1524:	d1 09       	sbc	r29, r1
    1526:	fe 01       	movw	r30, r28
    1528:	e0 5f       	subi	r30, 0xF0	; 240
    152a:	fd 4f       	sbci	r31, 0xFD	; 253
    152c:	20 81       	ld	r18, Z
    152e:	20 9f       	mul	r18, r16
    1530:	c0 01       	movw	r24, r0
    1532:	21 9f       	mul	r18, r17
    1534:	90 0d       	add	r25, r0
    1536:	11 24       	eor	r1, r1
    1538:	24 e6       	ldi	r18, 0x64	; 100
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	b9 01       	movw	r22, r18
    153e:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    1542:	fb 01       	movw	r30, r22
    1544:	ce 5b       	subi	r28, 0xBE	; 190
    1546:	dd 4f       	sbci	r29, 0xFD	; 253
    1548:	48 81       	ld	r20, Y
    154a:	40 9f       	mul	r20, r16
    154c:	c0 01       	movw	r24, r0
    154e:	41 9f       	mul	r20, r17
    1550:	90 0d       	add	r25, r0
    1552:	11 24       	eor	r1, r1
    1554:	b9 01       	movw	r22, r18
    1556:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    155a:	cb 01       	movw	r24, r22
    155c:	bf 01       	movw	r22, r30
    155e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
    1562:	25 c0       	rjmp	.+74     	; 0x15ae <handleAndSpeed+0xa0>
    1564:	20 97       	sbiw	r28, 0x00	; 0
    1566:	29 f4       	brne	.+10     	; 0x1572 <handleAndSpeed+0x64>
    1568:	b8 01       	movw	r22, r16
    156a:	c8 01       	movw	r24, r16
    156c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
    1570:	1e c0       	rjmp	.+60     	; 0x15ae <handleAndSpeed+0xa0>
    1572:	fe 01       	movw	r30, r28
    1574:	ee 5b       	subi	r30, 0xBE	; 190
    1576:	fd 4f       	sbci	r31, 0xFD	; 253
    1578:	20 81       	ld	r18, Z
    157a:	20 9f       	mul	r18, r16
    157c:	c0 01       	movw	r24, r0
    157e:	21 9f       	mul	r18, r17
    1580:	90 0d       	add	r25, r0
    1582:	11 24       	eor	r1, r1
    1584:	24 e6       	ldi	r18, 0x64	; 100
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	b9 01       	movw	r22, r18
    158a:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    158e:	fb 01       	movw	r30, r22
    1590:	c0 5f       	subi	r28, 0xF0	; 240
    1592:	dd 4f       	sbci	r29, 0xFD	; 253
    1594:	48 81       	ld	r20, Y
    1596:	40 9f       	mul	r20, r16
    1598:	c0 01       	movw	r24, r0
    159a:	41 9f       	mul	r20, r17
    159c:	90 0d       	add	r25, r0
    159e:	11 24       	eor	r1, r1
    15a0:	b9 01       	movw	r22, r18
    15a2:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    15a6:	cb 01       	movw	r24, r22
    15a8:	bf 01       	movw	r22, r30
    15aa:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	08 95       	ret

000015b8 <handleAndSpeedMicro>:
		break;
	}
}
void handleAndSpeedMicro (int angle,int speed1)
{
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	ec 01       	movw	r28, r24
    15c2:	8b 01       	movw	r16, r22
	int speed2;
	int speed3;
	handleMicro(angle);
    15c4:	93 d9       	rcall	.-3290   	; 0x8ec <handleMicro>
	if (angle<0){
    15c6:	dd 23       	and	r29, r29
    15c8:	4c f5       	brge	.+82     	; 0x161c <handleAndSpeedMicro+0x64>
		angle = -angle;
		speed2 = speed1*coeffR1[angle/10]/100;
    15ca:	88 27       	eor	r24, r24
    15cc:	99 27       	eor	r25, r25
    15ce:	8c 1b       	sub	r24, r28
    15d0:	9d 0b       	sbc	r25, r29
    15d2:	6a e0       	ldi	r22, 0x0A	; 10
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    15da:	9b 01       	movw	r18, r22
		speed3 = speed1*coeffR3[angle/10]/100;
    15dc:	fb 01       	movw	r30, r22
    15de:	e0 5f       	subi	r30, 0xF0	; 240
    15e0:	fd 4f       	sbci	r31, 0xFD	; 253
		speed (speed2,speed3);
    15e2:	40 81       	ld	r20, Z
    15e4:	40 9f       	mul	r20, r16
    15e6:	c0 01       	movw	r24, r0
    15e8:	41 9f       	mul	r20, r17
    15ea:	90 0d       	add	r25, r0
    15ec:	11 24       	eor	r1, r1
    15ee:	e4 e6       	ldi	r30, 0x64	; 100
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	bf 01       	movw	r22, r30
    15f4:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    15f8:	eb 01       	movw	r28, r22
	int speed2;
	int speed3;
	handleMicro(angle);
	if (angle<0){
		angle = -angle;
		speed2 = speed1*coeffR1[angle/10]/100;
    15fa:	d9 01       	movw	r26, r18
    15fc:	ae 5b       	subi	r26, 0xBE	; 190
    15fe:	bd 4f       	sbci	r27, 0xFD	; 253
		speed3 = speed1*coeffR3[angle/10]/100;
		speed (speed2,speed3);
    1600:	2c 91       	ld	r18, X
    1602:	20 9f       	mul	r18, r16
    1604:	c0 01       	movw	r24, r0
    1606:	21 9f       	mul	r18, r17
    1608:	90 0d       	add	r25, r0
    160a:	11 24       	eor	r1, r1
    160c:	bf 01       	movw	r22, r30
    160e:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    1612:	cb 01       	movw	r24, r22
    1614:	be 01       	movw	r22, r28
    1616:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
    161a:	2c c0       	rjmp	.+88     	; 0x1674 <handleAndSpeedMicro+0xbc>
	}
	else if (angle == 0 )
    161c:	20 97       	sbiw	r28, 0x00	; 0
    161e:	29 f4       	brne	.+10     	; 0x162a <handleAndSpeedMicro+0x72>
	{
		speed (speed1,speed1);
    1620:	b8 01       	movw	r22, r16
    1622:	c8 01       	movw	r24, r16
    1624:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
    1628:	25 c0       	rjmp	.+74     	; 0x1674 <handleAndSpeedMicro+0xbc>
	}
	else {
		speed2 = speed1*coeffR1[angle/10]/100;
    162a:	ce 01       	movw	r24, r28
    162c:	6a e0       	ldi	r22, 0x0A	; 10
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    1634:	9b 01       	movw	r18, r22
    1636:	fb 01       	movw	r30, r22
    1638:	ee 5b       	subi	r30, 0xBE	; 190
    163a:	fd 4f       	sbci	r31, 0xFD	; 253
		speed3 = speed1*coeffR3[angle/10]/100;
		speed (speed3,speed2);
    163c:	40 81       	ld	r20, Z
    163e:	40 9f       	mul	r20, r16
    1640:	c0 01       	movw	r24, r0
    1642:	41 9f       	mul	r20, r17
    1644:	90 0d       	add	r25, r0
    1646:	11 24       	eor	r1, r1
    1648:	e4 e6       	ldi	r30, 0x64	; 100
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	bf 01       	movw	r22, r30
    164e:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    1652:	eb 01       	movw	r28, r22
	{
		speed (speed1,speed1);
	}
	else {
		speed2 = speed1*coeffR1[angle/10]/100;
		speed3 = speed1*coeffR3[angle/10]/100;
    1654:	d9 01       	movw	r26, r18
    1656:	a0 5f       	subi	r26, 0xF0	; 240
    1658:	bd 4f       	sbci	r27, 0xFD	; 253
		speed (speed3,speed2);
    165a:	2c 91       	ld	r18, X
    165c:	20 9f       	mul	r18, r16
    165e:	c0 01       	movw	r24, r0
    1660:	21 9f       	mul	r18, r17
    1662:	90 0d       	add	r25, r0
    1664:	11 24       	eor	r1, r1
    1666:	bf 01       	movw	r22, r30
    1668:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divmodhi4>
    166c:	cb 01       	movw	r24, r22
    166e:	be 01       	movw	r22, r28
    1670:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
	}
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <runForwardLine>:
	}
}

void runForwardLine (int speedRun)
{
	switch(sensor) {
    167e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	81 3f       	cpi	r24, 0xF1	; 241
    1686:	91 05       	cpc	r25, r1
    1688:	08 f0       	brcs	.+2      	; 0x168c <runForwardLine+0xe>
    168a:	29 c2       	rjmp	.+1106   	; 0x1ade <runForwardLine+0x460>
    168c:	fc 01       	movw	r30, r24
    168e:	88 27       	eor	r24, r24
    1690:	e5 58       	subi	r30, 0x85	; 133
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__tablejump2__>
		case 0x18:// 00011000
		case 0x3c:// 00111100
		{
			handleAndSpeed(angle0,speedRun0);
    169a:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <speedRun0>
    169e:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <speedRun0+0x1>
    16a2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <angle0>
    16a6:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <angle0+0x1>
    16aa:	31 df       	rcall	.-414    	; 0x150e <handleAndSpeed>
			curveFlag = 0;
    16ac:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
			sensorPos = 0;
    16b0:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <sensorPos>
			straightLine = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
			break;
    16ba:	08 95       	ret
		}
		case 0x1C:// 00011100
		case 0x08:// 00001000
		{
			if ( sensorPos < -3)
    16bc:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    16c0:	8d 3f       	cpi	r24, 0xFD	; 253
    16c2:	34 f4       	brge	.+12     	; 0x16d0 <runForwardLine+0x52>
			{
				handleAndSpeed (-30,0);
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	82 ee       	ldi	r24, 0xE2	; 226
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	20 cf       	rjmp	.-448    	; 0x150e <handleAndSpeed>
				break;
    16ce:	08 95       	ret
			}
			else
			{
				handleAndSpeed(angle1,speedRun1);
    16d0:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <speedRun1>
    16d4:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <speedRun1+0x1>
    16d8:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    16dc:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    16e0:	16 df       	rcall	.-468    	; 0x150e <handleAndSpeed>
				curveFlag = 0;
    16e2:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
				sensorPos = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
				straightLine = 1;
    16ec:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
				break;
    16f0:	08 95       	ret
			break;
		}
		case 0x0c:// 00001100
		case 0x1e:// 00011110
		{
			if ( sensorPos < -3)
    16f2:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    16f6:	8d 3f       	cpi	r24, 0xFD	; 253
    16f8:	34 f4       	brge	.+12     	; 0x1706 <runForwardLine+0x88>
			{
				handleAndSpeed(-30,0);
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	82 ee       	ldi	r24, 0xE2	; 226
    1700:	9f ef       	ldi	r25, 0xFF	; 255
    1702:	05 cf       	rjmp	.-502    	; 0x150e <handleAndSpeed>
				break;
    1704:	08 95       	ret
			}
			else
			handleAndSpeed(angle2,speedRun2);
    1706:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <speedRun2>
    170a:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <speedRun2+0x1>
    170e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <angle2>
    1712:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <angle2+0x1>
    1716:	fb de       	rcall	.-522    	; 0x150e <handleAndSpeed>
			curveFlag = 0;
    1718:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
			sensorPos = 2;
    171c:	82 e0       	ldi	r24, 0x02	; 2
    171e:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
			break;
    1728:	08 95       	ret
		}
		case 0x04:// 00000100
		case 0x0e:// 00001110
		{
			if ( sensorPos < -3)
    172a:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    172e:	8d 3f       	cpi	r24, 0xFD	; 253
			{
				handleAndSpeed(-30,0);
    1730:	34 f4       	brge	.+12     	; 0x173e <runForwardLine+0xc0>
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	82 ee       	ldi	r24, 0xE2	; 226
    1738:	9f ef       	ldi	r25, 0xFF	; 255
    173a:	e9 ce       	rjmp	.-558    	; 0x150e <handleAndSpeed>
				break;
    173c:	08 95       	ret
			}
			else if (brakeCurve > 11)
    173e:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    1742:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    1746:	0c 97       	sbiw	r24, 0x0c	; 12
			{
				handle(7); // 7 --> angle 3
    1748:	50 f0       	brcs	.+20     	; 0x175e <runForwardLine+0xe0>
    174a:	87 e0       	ldi	r24, 0x07	; 7
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	bc d8       	rcall	.-3720   	; 0x8c8 <handle>
				speed(-20,-20);
    1750:	6c ee       	ldi	r22, 0xEC	; 236
    1752:	7f ef       	ldi	r23, 0xFF	; 255
    1754:	8c ee       	ldi	r24, 0xEC	; 236
    1756:	9f ef       	ldi	r25, 0xFF	; 255
    1758:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <runForwardLine+0xf2>
			}
			else
			handleAndSpeed(angle3,speedRun3);
    175e:	60 91 42 03 	lds	r22, 0x0342	; 0x800342 <speedRun3>
    1762:	70 91 43 03 	lds	r23, 0x0343	; 0x800343 <speedRun3+0x1>
    1766:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle3>
    176a:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle3+0x1>
    176e:	cf de       	rcall	.-610    	; 0x150e <handleAndSpeed>
			curveFlag = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			sensorPos = 3;
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 0;
    177c:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
    1780:	08 95       	ret
		}
		case 0x06:// 00000110
		{
			if ( sensorPos < -3)
    1782:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1786:	8d 3f       	cpi	r24, 0xFD	; 253
			{
				handleAndSpeed(-30,0);
    1788:	34 f4       	brge	.+12     	; 0x1796 <runForwardLine+0x118>
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	82 ee       	ldi	r24, 0xE2	; 226
    1790:	9f ef       	ldi	r25, 0xFF	; 255
    1792:	bd ce       	rjmp	.-646    	; 0x150e <handleAndSpeed>
				break;
			}
			else if (brakeCurve > 11)
    1794:	08 95       	ret
    1796:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    179a:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    179e:	0c 97       	sbiw	r24, 0x0c	; 12
			{
				handle(15);
    17a0:	50 f0       	brcs	.+20     	; 0x17b6 <runForwardLine+0x138>
    17a2:	8f e0       	ldi	r24, 0x0F	; 15
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	90 d8       	rcall	.-3808   	; 0x8c8 <handle>
				speed(-20,-20);
    17a8:	6c ee       	ldi	r22, 0xEC	; 236
    17aa:	7f ef       	ldi	r23, 0xFF	; 255
    17ac:	8c ee       	ldi	r24, 0xEC	; 236
    17ae:	9f ef       	ldi	r25, 0xFF	; 255
    17b0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
			}
			else
			handleAndSpeed(angle4,speedRun4);
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <runForwardLine+0x14a>
    17b6:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <speedRun4>
    17ba:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <speedRun4+0x1>
    17be:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    17c2:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    17c6:	a3 de       	rcall	.-698    	; 0x150e <handleAndSpeed>
			curveFlag = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			sensorPos = 4;
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 0;
    17d4:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
		}
		case 0x02:// 00000010
		case 0x07:// 00000111
		{
			if ( sensorPos < -3)
    17d8:	08 95       	ret
    17da:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    17de:	8d 3f       	cpi	r24, 0xFD	; 253
			{
				handleAndSpeed(-30,0);
    17e0:	34 f4       	brge	.+12     	; 0x17ee <runForwardLine+0x170>
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	82 ee       	ldi	r24, 0xE2	; 226
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
				break;
    17ea:	91 ce       	rjmp	.-734    	; 0x150e <handleAndSpeed>
			}
			else if (brakeCurve > 11)
    17ec:	08 95       	ret
    17ee:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    17f2:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    17f6:	0c 97       	sbiw	r24, 0x0c	; 12
			{
				handle(15);
    17f8:	50 f0       	brcs	.+20     	; 0x180e <runForwardLine+0x190>
    17fa:	8f e0       	ldi	r24, 0x0F	; 15
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	64 d8       	rcall	.-3896   	; 0x8c8 <handle>
				speed(-20,-20);
    1800:	6c ee       	ldi	r22, 0xEC	; 236
    1802:	7f ef       	ldi	r23, 0xFF	; 255
    1804:	8c ee       	ldi	r24, 0xEC	; 236
    1806:	9f ef       	ldi	r25, 0xFF	; 255
    1808:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
			}
			else
			handleAndSpeed(angle5,speedRun5);
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <runForwardLine+0x1a2>
    180e:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <speedRun5>
    1812:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <speedRun5+0x1>
    1816:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <angle5>
    181a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <angle5+0x1>
    181e:	77 de       	rcall	.-786    	; 0x150e <handleAndSpeed>
			curveFlag = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			sensorPos = 5;
    1826:	85 e0       	ldi	r24, 0x05	; 5
    1828:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 0;
    182c:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
		}
		case 0x03:// 00000011
		{
			if ( sensorPos < -3)
    1830:	08 95       	ret
    1832:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1836:	8d 3f       	cpi	r24, 0xFD	; 253
			{
				handleAndSpeed(-30,0);
    1838:	34 f4       	brge	.+12     	; 0x1846 <runForwardLine+0x1c8>
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	82 ee       	ldi	r24, 0xE2	; 226
    1840:	9f ef       	ldi	r25, 0xFF	; 255
				break;
    1842:	65 ce       	rjmp	.-822    	; 0x150e <handleAndSpeed>
			}
			else
			handleAndSpeed(angle6,speedRun6);
    1844:	08 95       	ret
    1846:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <speedRun6>
    184a:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <speedRun6+0x1>
    184e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    1852:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    1856:	5b de       	rcall	.-842    	; 0x150e <handleAndSpeed>
			curveFlag = 1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			sensorPos = 6;
    185e:	86 e0       	ldi	r24, 0x06	; 6
    1860:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 0;
    1864:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
		}
		
		case 0x01:// 00000001
		{
			if ( sensorPos < -3)
    1868:	08 95       	ret
    186a:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    186e:	8d 3f       	cpi	r24, 0xFD	; 253
			{
				handleAndSpeed(-30,0);
    1870:	34 f4       	brge	.+12     	; 0x187e <runForwardLine+0x200>
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	82 ee       	ldi	r24, 0xE2	; 226
    1878:	9f ef       	ldi	r25, 0xFF	; 255
				break;
    187a:	49 ce       	rjmp	.-878    	; 0x150e <handleAndSpeed>
			}
			handleAndSpeed(angle7,speedRun7);
    187c:	08 95       	ret
    187e:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <speedRun7>
    1882:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <speedRun7+0x1>
    1886:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <angle7>
    188a:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <angle7+0x1>
    188e:	3f de       	rcall	.-898    	; 0x150e <handleAndSpeed>
			curveFlag = 1;   //RYGB(0,0,0,0);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			straightLine = 0;
    1896:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			sensorPos = 6;
    189a:	86 e0       	ldi	r24, 0x06	; 6
    189c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		case 0x81:// 10000001
		case 0xc1:// 11000001
		case 0x00:// 00000000
		case 0x83:// 10000011
		{
			if ( sensorPos < -4)
    18a0:	08 95       	ret
    18a2:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
			{
				handleAndSpeed(-30,0);
    18a6:	8c 3f       	cpi	r24, 0xFC	; 252
    18a8:	34 f4       	brge	.+12     	; 0x18b6 <runForwardLine+0x238>
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	82 ee       	ldi	r24, 0xE2	; 226
    18b0:	9f ef       	ldi	r25, 0xFF	; 255
				break;
    18b2:	2d ce       	rjmp	.-934    	; 0x150e <handleAndSpeed>
			}
			else if ( sensorPos > 4)
    18b4:	08 95       	ret
    18b6:	85 30       	cpi	r24, 0x05	; 5
			{
				handleAndSpeed(30,0);
    18b8:	0c f4       	brge	.+2      	; 0x18bc <runForwardLine+0x23e>
    18ba:	19 c1       	rjmp	.+562    	; 0x1aee <runForwardLine+0x470>
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	8e e1       	ldi	r24, 0x1E	; 30
    18c2:	90 e0       	ldi	r25, 0x00	; 0
				break;
    18c4:	24 ce       	rjmp	.-952    	; 0x150e <handleAndSpeed>
			break;
		}
		case 0x10:// 00010000
		case 0x38:// 00111000
		{
			if ( sensorPos > 3)
    18c6:	08 95       	ret
    18c8:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
			{
				handleAndSpeed(30,0);
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	34 f0       	brlt	.+12     	; 0x18dc <runForwardLine+0x25e>
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	8e e1       	ldi	r24, 0x1E	; 30
    18d6:	90 e0       	ldi	r25, 0x00	; 0
				break;
    18d8:	1a ce       	rjmp	.-972    	; 0x150e <handleAndSpeed>
			}
			else
			handleAndSpeedMicro (-angle1,speedRun1);
    18da:	08 95       	ret
    18dc:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <speedRun1>
    18e0:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <speedRun1+0x1>
    18e4:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    18e8:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    18ec:	91 95       	neg	r25
    18ee:	81 95       	neg	r24
    18f0:	91 09       	sbc	r25, r1
			curveFlag = 0;
    18f2:	62 de       	rcall	.-828    	; 0x15b8 <handleAndSpeedMicro>
    18f4:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
			sensorPos = -1;
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
			break;
		}
		case 0x30:// 00110000
		case 0x78:// 01111000
		{
			if ( sensorPos > 3)
    1904:	08 95       	ret
    1906:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
			{
				handleAndSpeed(30,0);
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	34 f0       	brlt	.+12     	; 0x191a <runForwardLine+0x29c>
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	8e e1       	ldi	r24, 0x1E	; 30
    1914:	90 e0       	ldi	r25, 0x00	; 0
				break;
    1916:	fb cd       	rjmp	.-1034   	; 0x150e <handleAndSpeed>
			}
			else
			handleAndSpeed(-angle2,speedRun2);
    1918:	08 95       	ret
    191a:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <speedRun2>
    191e:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <speedRun2+0x1>
    1922:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <angle2>
    1926:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <angle2+0x1>
    192a:	91 95       	neg	r25
    192c:	81 95       	neg	r24
    192e:	91 09       	sbc	r25, r1
			curveFlag = 0;
    1930:	ee dd       	rcall	.-1060   	; 0x150e <handleAndSpeed>
    1932:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
			sensorPos = -2;
    1936:	8e ef       	ldi	r24, 0xFE	; 254
    1938:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
			break;
		}
		case 0x20:// 00100000
		case 0x70:// 01110000
		{
			if ( sensorPos > 3)
    1942:	08 95       	ret
    1944:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1948:	84 30       	cpi	r24, 0x04	; 4
			{
				handleAndSpeed(30,0);
    194a:	34 f0       	brlt	.+12     	; 0x1958 <runForwardLine+0x2da>
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	8e e1       	ldi	r24, 0x1E	; 30
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	dc cd       	rjmp	.-1096   	; 0x150e <handleAndSpeed>
				break;
    1956:	08 95       	ret
			}
			else if (brakeCurve > 11)
    1958:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    195c:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    1960:	0c 97       	sbiw	r24, 0x0c	; 12
			{
				handle(-7);
    1962:	58 f0       	brcs	.+22     	; 0x197a <runForwardLine+0x2fc>
    1964:	89 ef       	ldi	r24, 0xF9	; 249
    1966:	9f ef       	ldi	r25, 0xFF	; 255
    1968:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(-20,-20);
    196c:	6c ee       	ldi	r22, 0xEC	; 236
    196e:	7f ef       	ldi	r23, 0xFF	; 255
    1970:	8c ee       	ldi	r24, 0xEC	; 236
    1972:	9f ef       	ldi	r25, 0xFF	; 255
    1974:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
			}
			else
			handleAndSpeed(-angle3,speedRun3);
    1978:	0c c0       	rjmp	.+24     	; 0x1992 <runForwardLine+0x314>
    197a:	60 91 42 03 	lds	r22, 0x0342	; 0x800342 <speedRun3>
    197e:	70 91 43 03 	lds	r23, 0x0343	; 0x800343 <speedRun3+0x1>
    1982:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle3>
    1986:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle3+0x1>
    198a:	91 95       	neg	r25
    198c:	81 95       	neg	r24
    198e:	91 09       	sbc	r25, r1
			curveFlag = 1;
    1990:	be dd       	rcall	.-1156   	; 0x150e <handleAndSpeed>
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			sensorPos = -3;
    1998:	8d ef       	ldi	r24, 0xFD	; 253
    199a:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 0;
    199e:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
		}
		case 0x60:// 01100000
		{
			if ( sensorPos > 3)
    19a2:	08 95       	ret
    19a4:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    19a8:	84 30       	cpi	r24, 0x04	; 4
			{
				handleAndSpeed(30,0);
    19aa:	34 f0       	brlt	.+12     	; 0x19b8 <runForwardLine+0x33a>
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	8e e1       	ldi	r24, 0x1E	; 30
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	ac cd       	rjmp	.-1192   	; 0x150e <handleAndSpeed>
				break;
    19b6:	08 95       	ret
			}
			else if (brakeCurve > 11)
    19b8:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    19bc:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    19c0:	0c 97       	sbiw	r24, 0x0c	; 12
			{
				handle(-15);
    19c2:	58 f0       	brcs	.+22     	; 0x19da <runForwardLine+0x35c>
    19c4:	81 ef       	ldi	r24, 0xF1	; 241
    19c6:	9f ef       	ldi	r25, 0xFF	; 255
    19c8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(-20,-20);
    19cc:	6c ee       	ldi	r22, 0xEC	; 236
    19ce:	7f ef       	ldi	r23, 0xFF	; 255
    19d0:	8c ee       	ldi	r24, 0xEC	; 236
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
    19d4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <speed>
			}
			else
			handleAndSpeed(-angle4,speedRun4);
    19d8:	0c c0       	rjmp	.+24     	; 0x19f2 <runForwardLine+0x374>
    19da:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <speedRun4>
    19de:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <speedRun4+0x1>
    19e2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    19e6:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    19ea:	91 95       	neg	r25
    19ec:	81 95       	neg	r24
    19ee:	91 09       	sbc	r25, r1
			curveFlag = 1;
    19f0:	8e dd       	rcall	.-1252   	; 0x150e <handleAndSpeed>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			sensorPos = -4;
    19f8:	8c ef       	ldi	r24, 0xFC	; 252
			straightLine = 0;
    19fa:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			break;
    19fe:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		}
		case 0x40:// 01000000
		case 0xe0:// 11100000
		{
			if ( sensorPos > 3)
    1a02:	08 95       	ret
    1a04:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
			{
				handleAndSpeed(30,0);
    1a08:	84 30       	cpi	r24, 0x04	; 4
    1a0a:	34 f0       	brlt	.+12     	; 0x1a18 <runForwardLine+0x39a>
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	8e e1       	ldi	r24, 0x1E	; 30
    1a12:	90 e0       	ldi	r25, 0x00	; 0
				break;
    1a14:	7c cd       	rjmp	.-1288   	; 0x150e <handleAndSpeed>
			}
			else if (brakeCurve > 11)
    1a16:	08 95       	ret
    1a18:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    1a1c:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
			{
				handle(-15);
    1a20:	0c 97       	sbiw	r24, 0x0c	; 12
    1a22:	50 f0       	brcs	.+20     	; 0x1a38 <runForwardLine+0x3ba>
    1a24:	81 ef       	ldi	r24, 0xF1	; 241
    1a26:	9f ef       	ldi	r25, 0xFF	; 255
				speed(0,0);
    1a28:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	e2 d7       	rcall	.+4036   	; 0x29fa <speed>
			}
			else
			handleAndSpeed(-angle5,speedRun5);
    1a36:	0c c0       	rjmp	.+24     	; 0x1a50 <runForwardLine+0x3d2>
    1a38:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <speedRun5>
    1a3c:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <speedRun5+0x1>
    1a40:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <angle5>
    1a44:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <angle5+0x1>
    1a48:	91 95       	neg	r25
    1a4a:	81 95       	neg	r24
    1a4c:	91 09       	sbc	r25, r1
			curveFlag = 1;
    1a4e:	5f dd       	rcall	.-1346   	; 0x150e <handleAndSpeed>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
			sensorPos = -5;
    1a52:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
    1a56:	8b ef       	ldi	r24, 0xFB	; 251
			straightLine = 0;
    1a58:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			break;
    1a5c:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		}
		case 0xc0:// 11000000
		{
			if ( sensorPos > 3)
    1a60:	08 95       	ret
    1a62:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
			{
				handleAndSpeed(30,0);
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	34 f0       	brlt	.+12     	; 0x1a76 <runForwardLine+0x3f8>
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	8e e1       	ldi	r24, 0x1E	; 30
    1a70:	90 e0       	ldi	r25, 0x00	; 0
				break;
    1a72:	4d cd       	rjmp	.-1382   	; 0x150e <handleAndSpeed>
			}
			else
			handleAndSpeed(-angle6,speedRun6);
    1a74:	08 95       	ret
    1a76:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <speedRun6>
    1a7a:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <speedRun6+0x1>
    1a7e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    1a82:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    1a86:	91 95       	neg	r25
    1a88:	81 95       	neg	r24
    1a8a:	91 09       	sbc	r25, r1
			curveFlag = 1;
    1a8c:	40 dd       	rcall	.-1408   	; 0x150e <handleAndSpeed>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
			sensorPos = -6;
    1a90:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
    1a94:	8a ef       	ldi	r24, 0xFA	; 250
			straightLine = 0;
    1a96:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			break;
    1a9a:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		}
		case 0x80:// 10000000
		{
			if ( sensorPos > 3)
    1a9e:	08 95       	ret
    1aa0:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
			{
				handleAndSpeed(30,0);
    1aa4:	84 30       	cpi	r24, 0x04	; 4
    1aa6:	34 f0       	brlt	.+12     	; 0x1ab4 <runForwardLine+0x436>
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	8e e1       	ldi	r24, 0x1E	; 30
				break;
    1aae:	90 e0       	ldi	r25, 0x00	; 0
			}
			else
			handleAndSpeed(-angle7,speedRun7);
    1ab0:	2e cd       	rjmp	.-1444   	; 0x150e <handleAndSpeed>
    1ab2:	08 95       	ret
    1ab4:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <speedRun7>
    1ab8:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <speedRun7+0x1>
    1abc:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <angle7>
    1ac0:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <angle7+0x1>
    1ac4:	91 95       	neg	r25
    1ac6:	81 95       	neg	r24
    1ac8:	91 09       	sbc	r25, r1
			curveFlag = 1;
    1aca:	21 dd       	rcall	.-1470   	; 0x150e <handleAndSpeed>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
			sensorPos = -6;
    1ad2:	8a ef       	ldi	r24, 0xFA	; 250
    1ad4:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
			straightLine = 0;
    1ad8:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
		}
		case 0x0f: break;
		case 0xf0: break;
		default:
		straightLine = 1;
    1adc:	08 95       	ret
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
		speed(0,0);
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	86 c7       	rjmp	.+3852   	; 0x29fa <speed>
    1aee:	08 95       	ret

00001af0 <brakeTheCar>:
		return 0;
	}
	else return 0;
}
void brakeTheCar(int time,int speedRun)
{
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	8b 01       	movw	r16, r22
	cnt2 = 0;
    1afa:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    1afe:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
	while (cnt2<time)
    1b02:	ec 01       	movw	r28, r24
    1b04:	89 2b       	or	r24, r25
    1b06:	49 f0       	breq	.+18     	; 0x1b1a <brakeTheCar+0x2a>
	{
		runForwardLine(speedRun);
    1b08:	c8 01       	movw	r24, r16
    1b0a:	b9 dd       	rcall	.-1166   	; 0x167e <runForwardLine>
	else return 0;
}
void brakeTheCar(int time,int speedRun)
{
	cnt2 = 0;
	while (cnt2<time)
    1b0c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    1b10:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    1b14:	8c 17       	cp	r24, r28
    1b16:	9d 07       	cpc	r25, r29
    1b18:	b8 f3       	brcs	.-18     	; 0x1b08 <brakeTheCar+0x18>
	{
		runForwardLine(speedRun);
	}
}
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	08 95       	ret

00001b24 <leftLaneChange>:
			return 11;
			break;
		}
	}
}
int leftLaneChange (int speedRun){
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	8c 01       	movw	r16, r24
	int runCase3 = 50;
	cnt1 = 0;
    1b2e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    1b32:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
			break;
		}
	}
}
int leftLaneChange (int speedRun){
	int runCase3 = 50;
    1b36:	c2 e3       	ldi	r28, 0x32	; 50
    1b38:	d0 e0       	ldi	r29, 0x00	; 0
	cnt1 = 0;
	while (1)
	{
		//kiem tra xem co cross line luc cua khong
		if (checkCrossLine())
    1b3a:	cd dc       	rcall	.-1638   	; 0x14d6 <checkCrossLine>
    1b3c:	88 23       	and	r24, r24
    1b3e:	39 f0       	breq	.+14     	; 0x1b4e <leftLaneChange+0x2a>
		{
			cnt1 = 0;
    1b40:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    1b44:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
			return 21;
    1b48:	85 e1       	ldi	r24, 0x15	; 21
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	c3 c0       	rjmp	.+390    	; 0x1cd4 <leftLaneChange+0x1b0>
		}
		switch (runCase3)
    1b4e:	c8 33       	cpi	r28, 0x38	; 56
    1b50:	d1 05       	cpc	r29, r1
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <leftLaneChange+0x32>
    1b54:	6a c0       	rjmp	.+212    	; 0x1c2a <leftLaneChange+0x106>
    1b56:	3c f4       	brge	.+14     	; 0x1b66 <leftLaneChange+0x42>
    1b58:	c2 33       	cpi	r28, 0x32	; 50
    1b5a:	d1 05       	cpc	r29, r1
    1b5c:	11 f1       	breq	.+68     	; 0x1ba2 <leftLaneChange+0x7e>
    1b5e:	c3 33       	cpi	r28, 0x33	; 51
    1b60:	d1 05       	cpc	r29, r1
    1b62:	b9 f1       	breq	.+110    	; 0x1bd2 <leftLaneChange+0xae>
    1b64:	b5 c0       	rjmp	.+362    	; 0x1cd0 <leftLaneChange+0x1ac>
    1b66:	ca 33       	cpi	r28, 0x3A	; 58
    1b68:	d1 05       	cpc	r29, r1
    1b6a:	29 f0       	breq	.+10     	; 0x1b76 <leftLaneChange+0x52>
    1b6c:	0c f4       	brge	.+2      	; 0x1b70 <leftLaneChange+0x4c>
    1b6e:	6d c0       	rjmp	.+218    	; 0x1c4a <leftLaneChange+0x126>
    1b70:	eb 97       	sbiw	r28, 0x3b	; 59
    1b72:	51 f0       	breq	.+20     	; 0x1b88 <leftLaneChange+0x64>
    1b74:	ad c0       	rjmp	.+346    	; 0x1cd0 <leftLaneChange+0x1ac>
				}
				break;
			}
			case 58:
			{
				while(cnt2 < 300) // cho no chay thang them mot ti
    1b76:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    1b7a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    1b7e:	8c 32       	cpi	r24, 0x2C	; 44
    1b80:	91 40       	sbci	r25, 0x01	; 1
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <leftLaneChange+0x62>
    1b84:	7b c0       	rjmp	.+246    	; 0x1c7c <leftLaneChange+0x158>
    1b86:	86 c0       	rjmp	.+268    	; 0x1c94 <leftLaneChange+0x170>
				runCase3 = 59;
				break;
			}
			case 59:
			{
				while(cnt2 < timerBoostAfterChangeLanes)
    1b88:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <timerBoostAfterChangeLanes>
    1b8c:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    1b90:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    1b94:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    1b98:	82 17       	cp	r24, r18
    1b9a:	93 07       	cpc	r25, r19
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <leftLaneChange+0x7c>
    1b9e:	81 c0       	rjmp	.+258    	; 0x1ca2 <leftLaneChange+0x17e>
    1ba0:	90 c0       	rjmp	.+288    	; 0x1cc2 <leftLaneChange+0x19e>
		}
		switch (runCase3)
		{
			case 50:
			{
				if (cnt1 < 50 )// khoang thoi gian bat dau brake
    1ba2:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <cnt1>
    1ba6:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <cnt1+0x1>
    1baa:	c2 97       	sbiw	r24, 0x32	; 50
    1bac:	60 f4       	brcc	.+24     	; 0x1bc6 <leftLaneChange+0xa2>
				{
					brakeTheCar(speedBrakeChangeLanes,timerBrakeChangeLanes); //( 0 , 20 ) --> thoi gian brake xe
    1bae:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <timerBrakeChangeLanes>
    1bb2:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <timerBrakeChangeLanes+0x1>
    1bb6:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <speedBrakeChangeLanes>
    1bba:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <speedBrakeChangeLanes+0x1>
    1bbe:	98 df       	rcall	.-208    	; 0x1af0 <brakeTheCar>
					runCase3 = 51;
    1bc0:	c3 e3       	ldi	r28, 0x33	; 51
    1bc2:	d0 e0       	ldi	r29, 0x00	; 0
					break;
    1bc4:	ba cf       	rjmp	.-140    	; 0x1b3a <leftLaneChange+0x16>
				}
				// sau do bat dau chay thang
				runForwardLine(speedRunForwardBeforeChangeLine); //  speedRun ---> speedRunForwardBeforeChangeLine
    1bc6:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <speedRunForwardBeforeChangeLine>
    1bca:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <speedRunForwardBeforeChangeLine+0x1>
    1bce:	57 dd       	rcall	.-1362   	; 0x167e <runForwardLine>
				break;
    1bd0:	b4 cf       	rjmp	.-152    	; 0x1b3a <leftLaneChange+0x16>
			}
			case 51:
			{
				// outline ---> change line
				if (sensorMask (MASK4_4) == 0x00)
    1bd2:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	10 c0       	rjmp	.+32     	; 0x1bfa <leftLaneChange+0xd6>
				{
					handleAndSpeed (-angleChangeLanes,speedRun); // (10 , 160) ---> turn left
    1bda:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angleChangeLanes>
    1bde:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angleChangeLanes+0x1>
    1be2:	b8 01       	movw	r22, r16
    1be4:	91 95       	neg	r25
    1be6:	81 95       	neg	r24
    1be8:	91 09       	sbc	r25, r1
    1bea:	91 dc       	rcall	.-1758   	; 0x150e <handleAndSpeed>
					runCase3 = 56;
					cnt1 = 0;
    1bec:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    1bf0:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
			{
				// outline ---> change line
				if (sensorMask (MASK4_4) == 0x00)
				{
					handleAndSpeed (-angleChangeLanes,speedRun); // (10 , 160) ---> turn left
					runCase3 = 56;
    1bf4:	c8 e3       	ldi	r28, 0x38	; 56
    1bf6:	d0 e0       	ldi	r29, 0x00	; 0
					cnt1 = 0;
					break;
				}
				else // neu khong van tiep tuc chay thang cho toi khi outline
				{
					RGB(0,1,0);
    1bf8:	a0 cf       	rjmp	.-192    	; 0x1b3a <leftLaneChange+0x16>
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
					runForwardLine(speedRunForwardBeforeChangeLine); // ( speedRun ---> speedRunForwardBeforeChangeLine )
    1c00:	38 d9       	rcall	.-3472   	; 0xe72 <RGB>
    1c02:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <speedRunForwardBeforeChangeLine>
    1c06:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <speedRunForwardBeforeChangeLine+0x1>
    1c0a:	39 dd       	rcall	.-1422   	; 0x167e <runForwardLine>
				}
				if (cnt1>3000) // 5000 ---> 3000
    1c0c:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <cnt1>
    1c10:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <cnt1+0x1>
    1c14:	89 3b       	cpi	r24, 0xB9	; 185
    1c16:	9b 40       	sbci	r25, 0x0B	; 11
    1c18:	08 f4       	brcc	.+2      	; 0x1c1c <leftLaneChange+0xf8>
    1c1a:	8f cf       	rjmp	.-226    	; 0x1b3a <leftLaneChange+0x16>
				{
					cnt1 = 0;
    1c1c:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    1c20:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
					
					return 11;
    1c24:	8b e0       	ldi	r24, 0x0B	; 11
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	55 c0       	rjmp	.+170    	; 0x1cd4 <leftLaneChange+0x1b0>
				}
				break;
			}
			case 56:
			{
				if (sensorMask(0xc0)!=0) // bat duoc line 11000000
    1c2a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1c2e:	80 7c       	andi	r24, 0xC0	; 192
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <leftLaneChange+0x110>
    1c32:	83 cf       	rjmp	.-250    	; 0x1b3a <leftLaneChange+0x16>
				{
					cnt1 = 0;
    1c34:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    1c38:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
					handleAndSpeed(0,speedRun); // cho chay thang
    1c3c:	b8 01       	movw	r22, r16
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	65 dc       	rcall	.-1846   	; 0x150e <handleAndSpeed>
					runCase3 = 57;
    1c44:	c9 e3       	ldi	r28, 0x39	; 57
    1c46:	d0 e0       	ldi	r29, 0x00	; 0
    1c48:	78 cf       	rjmp	.-272    	; 0x1b3a <leftLaneChange+0x16>
				}
				break;
			}
			case 57:
			{
				cnt2 = 0;
    1c4a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    1c4e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
				if (sensorMask(0x1f)!=0) // 0x0f ---> 0x1f
    1c52:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1c56:	8f 71       	andi	r24, 0x1F	; 31
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <leftLaneChange+0x138>
    1c5a:	6f cf       	rjmp	.-290    	; 0x1b3a <leftLaneChange+0x16>
				{
					cnt1 = 0;
    1c5c:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    1c60:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
					brakeTheCar(timerBrakeChangeLanes,speedBrakeChangeLanes);
    1c64:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <speedBrakeChangeLanes>
    1c68:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <speedBrakeChangeLanes+0x1>
    1c6c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <timerBrakeChangeLanes>
    1c70:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <timerBrakeChangeLanes+0x1>
    1c74:	3d df       	rcall	.-390    	; 0x1af0 <brakeTheCar>
					runCase3 = 58;
    1c76:	ca e3       	ldi	r28, 0x3A	; 58
    1c78:	d0 e0       	ldi	r29, 0x00	; 0
					break;
    1c7a:	5f cf       	rjmp	.-322    	; 0x1b3a <leftLaneChange+0x16>
			}
			case 58:
			{
				while(cnt2 < 300) // cho no chay thang them mot ti
				{
					runForwardLine(speedRunForwardBeforeChangeLine); //speedRun ---> speedRunForwardBeforeChangeLine
    1c7c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <speedRunForwardBeforeChangeLine>
    1c80:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <speedRunForwardBeforeChangeLine+0x1>
    1c84:	fc dc       	rcall	.-1544   	; 0x167e <runForwardLine>
    1c86:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
				}
				break;
			}
			case 58:
			{
				while(cnt2 < 300) // cho no chay thang them mot ti
    1c8a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    1c8e:	8c 32       	cpi	r24, 0x2C	; 44
    1c90:	91 40       	sbci	r25, 0x01	; 1
    1c92:	a0 f3       	brcs	.-24     	; 0x1c7c <leftLaneChange+0x158>
    1c94:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
				{
					runForwardLine(speedRunForwardBeforeChangeLine); //speedRun ---> speedRunForwardBeforeChangeLine
				}
				cnt2 = 0;
    1c98:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
				runCase3 = 59;
    1c9c:	cb e3       	ldi	r28, 0x3B	; 59
    1c9e:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    1ca0:	4c cf       	rjmp	.-360    	; 0x1b3a <leftLaneChange+0x16>
			}
			case 59:
			{
				while(cnt2 < timerBoostAfterChangeLanes)
				{
					runForwardLine(speedBoostAfterChangeLanes);
    1ca2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <speedBoostAfterChangeLanes>
    1ca6:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    1caa:	e9 dc       	rcall	.-1582   	; 0x167e <runForwardLine>
    1cac:	20 91 46 03 	lds	r18, 0x0346	; 0x800346 <cnt2>
				runCase3 = 59;
				break;
			}
			case 59:
			{
				while(cnt2 < timerBoostAfterChangeLanes)
    1cb0:	30 91 47 03 	lds	r19, 0x0347	; 0x800347 <cnt2+0x1>
    1cb4:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <timerBoostAfterChangeLanes>
    1cb8:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    1cbc:	28 17       	cp	r18, r24
    1cbe:	39 07       	cpc	r19, r25
    1cc0:	80 f3       	brcs	.-32     	; 0x1ca2 <leftLaneChange+0x17e>
    1cc2:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
				{
					runForwardLine(speedBoostAfterChangeLanes);
				}
				cnt2 = 0;
    1cc6:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
    1cca:	8b e0       	ldi	r24, 0x0B	; 11
				return 11;
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <leftLaneChange+0x1b0>
    1cd0:	8b e0       	ldi	r24, 0x0B	; 11
				break;
			}
			default:
			return 11;
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	df 91       	pop	r29
		}
	}
}
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <rightLaneChange>:
    1cde:	0f 93       	push	r16

int rightLaneChange(int speedRun)
{
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	8c 01       	movw	r16, r24
	beep_long(100);
    1ce8:	84 e6       	ldi	r24, 0x64	; 100
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	int runCase4 = 60;
    1cf0:	cc e3       	ldi	r28, 0x3C	; 60
    1cf2:	d0 e0       	ldi	r29, 0x00	; 0
	int cnt1  = 0;
	while (1)
	{
		if (checkCrossLine())
    1cf4:	f0 db       	rcall	.-2080   	; 0x14d6 <checkCrossLine>
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	99 c0       	rjmp	.+306    	; 0x1e2c <rightLaneChange+0x14e>
		{
			cnt1 = 0;
			return 21;
		}
		switch (runCase4)
    1cfa:	c2 34       	cpi	r28, 0x42	; 66
    1cfc:	d1 05       	cpc	r29, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <rightLaneChange+0x24>
    1d00:	4a c0       	rjmp	.+148    	; 0x1d96 <rightLaneChange+0xb8>
    1d02:	3c f4       	brge	.+14     	; 0x1d12 <rightLaneChange+0x34>
    1d04:	cc 33       	cpi	r28, 0x3C	; 60
    1d06:	d1 05       	cpc	r29, r1
    1d08:	19 f1       	breq	.+70     	; 0x1d50 <rightLaneChange+0x72>
    1d0a:	cd 33       	cpi	r28, 0x3D	; 61
    1d0c:	d1 05       	cpc	r29, r1
    1d0e:	61 f1       	breq	.+88     	; 0x1d68 <rightLaneChange+0x8a>
    1d10:	90 c0       	rjmp	.+288    	; 0x1e32 <rightLaneChange+0x154>
    1d12:	c4 34       	cpi	r28, 0x44	; 68
    1d14:	d1 05       	cpc	r29, r1
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <rightLaneChange+0x46>
    1d18:	0c f4       	brge	.+2      	; 0x1d1c <rightLaneChange+0x3e>
    1d1a:	49 c0       	rjmp	.+146    	; 0x1dae <rightLaneChange+0xd0>
    1d1c:	c5 34       	cpi	r28, 0x45	; 69
    1d1e:	d1 05       	cpc	r29, r1
    1d20:	51 f0       	breq	.+20     	; 0x1d36 <rightLaneChange+0x58>
    1d22:	87 c0       	rjmp	.+270    	; 0x1e32 <rightLaneChange+0x154>
				}
				break;
			}
			case 68:
			{
				while(cnt2 < 300)
    1d24:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    1d28:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    1d2c:	8c 32       	cpi	r24, 0x2C	; 44
    1d2e:	91 40       	sbci	r25, 0x01	; 1
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <rightLaneChange+0x56>
    1d32:	52 c0       	rjmp	.+164    	; 0x1dd8 <rightLaneChange+0xfa>
    1d34:	5d c0       	rjmp	.+186    	; 0x1df0 <rightLaneChange+0x112>
				cnt2 = 0;
				break;
			}
			case 69:
			{
				while(cnt2 < timerBoostAfterChangeLanes)
    1d36:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <timerBoostAfterChangeLanes>
    1d3a:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    1d3e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    1d42:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    1d46:	82 17       	cp	r24, r18
    1d48:	93 07       	cpc	r25, r19
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <rightLaneChange+0x70>
    1d4c:	58 c0       	rjmp	.+176    	; 0x1dfe <rightLaneChange+0x120>
    1d4e:	67 c0       	rjmp	.+206    	; 0x1e1e <rightLaneChange+0x140>
		{
			case 60:
			{
				if (cnt1 < 100) // 50 ---> 100
				{
					brakeTheCar(speedBrakeChangeLanes,timerBrakeChangeLanes);
    1d50:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <timerBrakeChangeLanes>
    1d54:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <timerBrakeChangeLanes+0x1>
    1d58:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <speedBrakeChangeLanes>
    1d5c:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <speedBrakeChangeLanes+0x1>
    1d60:	c7 de       	rcall	.-626    	; 0x1af0 <brakeTheCar>
					runCase4 = 61;
    1d62:	cd e3       	ldi	r28, 0x3D	; 61
    1d64:	d0 e0       	ldi	r29, 0x00	; 0
					break;
    1d66:	c6 cf       	rjmp	.-116    	; 0x1cf4 <rightLaneChange+0x16>
				runForwardLine(speedRunForwardBeforeChangeLine); // speedRun ---> speedRunForwardBeforeChangeLine
				break;
			}
			case 61:
			{
				if (sensorMask (MASK4_4) == 0x00) // outline
    1d68:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	0d c0       	rjmp	.+26     	; 0x1d8a <rightLaneChange+0xac>
				{
					handleAndSpeed (angleChangeLanes,speedRun); // ----> turn Right
    1d70:	b8 01       	movw	r22, r16
    1d72:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angleChangeLanes>
    1d76:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angleChangeLanes+0x1>
    1d7a:	c9 db       	rcall	.-2158   	; 0x150e <handleAndSpeed>
					runCase4 = 66;
					cnt1 = 0;
					beep_long(100);
    1d7c:	84 e6       	ldi	r24, 0x64	; 100
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			case 61:
			{
				if (sensorMask (MASK4_4) == 0x00) // outline
				{
					handleAndSpeed (angleChangeLanes,speedRun); // ----> turn Right
					runCase4 = 66;
    1d84:	c2 e4       	ldi	r28, 0x42	; 66
    1d86:	d0 e0       	ldi	r29, 0x00	; 0
					cnt1 = 0;
					beep_long(100);
					break;
    1d88:	b5 cf       	rjmp	.-150    	; 0x1cf4 <rightLaneChange+0x16>
				}
				else
				{
					runForwardLine(speedRunForwardBeforeChangeLine); // speedRun ---> speedRunForwardBeforeChangeLine
    1d8a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <speedRunForwardBeforeChangeLine>
    1d8e:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <speedRunForwardBeforeChangeLine+0x1>
    1d92:	75 dc       	rcall	.-1814   	; 0x167e <runForwardLine>
    1d94:	af cf       	rjmp	.-162    	; 0x1cf4 <rightLaneChange+0x16>
				}
				break;
			}
			case 66:
			{
				if (sensorMask(0x03)!=0) // bat duoc line 00000011
    1d96:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1d9a:	83 70       	andi	r24, 0x03	; 3
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <rightLaneChange+0xc2>
				{
					cnt1 = 0;
					handleAndSpeed(0,speedRun); // speed change line
    1d9e:	aa cf       	rjmp	.-172    	; 0x1cf4 <rightLaneChange+0x16>
    1da0:	b8 01       	movw	r22, r16
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	b3 db       	rcall	.-2202   	; 0x150e <handleAndSpeed>
					runCase4 = 67;
    1da8:	c3 e4       	ldi	r28, 0x43	; 67
    1daa:	d0 e0       	ldi	r29, 0x00	; 0
    1dac:	a3 cf       	rjmp	.-186    	; 0x1cf4 <rightLaneChange+0x16>
				}
				break;
			}
			case 67:
			{
				cnt2 = 0;
    1dae:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    1db2:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
				if (sensorMask(0xf8)!=0)
    1db6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1dba:	88 7f       	andi	r24, 0xF8	; 248
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <rightLaneChange+0xe2>
    1dbe:	9a cf       	rjmp	.-204    	; 0x1cf4 <rightLaneChange+0x16>
				{
					cnt1 = 0;
					brakeTheCar(timerBrakeChangeLanes,speedBrakeChangeLanes);
    1dc0:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <speedBrakeChangeLanes>
    1dc4:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <speedBrakeChangeLanes+0x1>
    1dc8:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <timerBrakeChangeLanes>
    1dcc:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <timerBrakeChangeLanes+0x1>
    1dd0:	8f de       	rcall	.-738    	; 0x1af0 <brakeTheCar>
					runCase4 = 68;
    1dd2:	c4 e4       	ldi	r28, 0x44	; 68
					break;
    1dd4:	d0 e0       	ldi	r29, 0x00	; 0
			}
			case 68:
			{
				while(cnt2 < 300)
				{
					runForwardLine(speedRunForwardBeforeChangeLine); // speedRun ---> speedRunForwardBeforeChangeLine
    1dd6:	8e cf       	rjmp	.-228    	; 0x1cf4 <rightLaneChange+0x16>
    1dd8:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <speedRunForwardBeforeChangeLine>
    1ddc:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <speedRunForwardBeforeChangeLine+0x1>
    1de0:	4e dc       	rcall	.-1892   	; 0x167e <runForwardLine>
				}
				break;
			}
			case 68:
			{
				while(cnt2 < 300)
    1de2:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    1de6:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    1dea:	8c 32       	cpi	r24, 0x2C	; 44
    1dec:	91 40       	sbci	r25, 0x01	; 1
    1dee:	a0 f3       	brcs	.-24     	; 0x1dd8 <rightLaneChange+0xfa>
				{
					runForwardLine(speedRunForwardBeforeChangeLine); // speedRun ---> speedRunForwardBeforeChangeLine
				}
				runCase4 = 69;
				cnt1 = 0;
				cnt2 = 0;
    1df0:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    1df4:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
			{
				while(cnt2 < 300)
				{
					runForwardLine(speedRunForwardBeforeChangeLine); // speedRun ---> speedRunForwardBeforeChangeLine
				}
				runCase4 = 69;
    1df8:	c5 e4       	ldi	r28, 0x45	; 69
				cnt1 = 0;
				cnt2 = 0;
				break;
    1dfa:	d0 e0       	ldi	r29, 0x00	; 0
			}
			case 69:
			{
				while(cnt2 < timerBoostAfterChangeLanes)
				{
					runForwardLine(speedBoostAfterChangeLanes);
    1dfc:	7b cf       	rjmp	.-266    	; 0x1cf4 <rightLaneChange+0x16>
    1dfe:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <speedBoostAfterChangeLanes>
    1e02:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <speedBoostAfterChangeLanes+0x1>
    1e06:	3b dc       	rcall	.-1930   	; 0x167e <runForwardLine>
				cnt2 = 0;
				break;
			}
			case 69:
			{
				while(cnt2 < timerBoostAfterChangeLanes)
    1e08:	20 91 46 03 	lds	r18, 0x0346	; 0x800346 <cnt2>
    1e0c:	30 91 47 03 	lds	r19, 0x0347	; 0x800347 <cnt2+0x1>
    1e10:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <timerBoostAfterChangeLanes>
    1e14:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <timerBoostAfterChangeLanes+0x1>
    1e18:	28 17       	cp	r18, r24
    1e1a:	39 07       	cpc	r19, r25
    1e1c:	80 f3       	brcs	.-32     	; 0x1dfe <rightLaneChange+0x120>
				{
					runForwardLine(speedBoostAfterChangeLanes);
				}
				cnt1 = 0;
				cnt2 = 0;
    1e1e:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    1e22:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
				return 11;
    1e26:	8b e0       	ldi	r24, 0x0B	; 11
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <rightLaneChange+0x158>
	while (1)
	{
		if (checkCrossLine())
		{
			cnt1 = 0;
			return 21;
    1e2c:	85 e1       	ldi	r24, 0x15	; 21
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <rightLaneChange+0x158>
				cnt2 = 0;
				return 11;
				break;
			}
			default:
			return 11;
    1e32:	8b e0       	ldi	r24, 0x0B	; 11
    1e34:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
}
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <runForwardLine90>:
		break;
	}
}

void runForwardLine90 (int speedRun90)
{
    1e40:	bc 01       	movw	r22, r24
	switch(sensor) {
    1e42:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	81 3f       	cpi	r24, 0xF1	; 241
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	08 f0       	brcs	.+2      	; 0x1e50 <runForwardLine90+0x10>
    1e4e:	eb c1       	rjmp	.+982    	; 0x2226 <__stack+0x27>
    1e50:	fc 01       	movw	r30, r24
    1e52:	88 27       	eor	r24, r24
    1e54:	e4 59       	subi	r30, 0x94	; 148
    1e56:	fe 4f       	sbci	r31, 0xFE	; 254
    1e58:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5a:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__tablejump2__>
		case 0x18:// 00011000
		case 0x3c:// 00111100
		handleAndSpeed(angle0,speedRun90);
    1e5e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <angle0>
    1e62:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <angle0+0x1>
    1e66:	53 db       	rcall	.-2394   	; 0x150e <handleAndSpeed>
		curveFlag = 0;
    1e68:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
		sensorPos = 0;
    1e6c:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <sensorPos>
		straightLine = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
		break;
    1e76:	08 95       	ret
		case 0x1C:// 00011100
		case 0x08:// 00001000
		if ( sensorPos < -3)
    1e78:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1e7c:	8d 3f       	cpi	r24, 0xFD	; 253
    1e7e:	34 f4       	brge	.+12     	; 0x1e8c <runForwardLine90+0x4c>
		{
			handleAndSpeed (-30,0);
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	82 ee       	ldi	r24, 0xE2	; 226
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	42 cb       	rjmp	.-2428   	; 0x150e <handleAndSpeed>
			break;
    1e8a:	08 95       	ret
		}
		else
		handleAndSpeed(angle1,speedRun90);
    1e8c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    1e90:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    1e94:	3c db       	rcall	.-2440   	; 0x150e <handleAndSpeed>
		curveFlag = 0;
    1e96:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
		sensorPos = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 1;
    1ea0:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
		break;
    1ea4:	08 95       	ret
		case 0x0c:// 00001100
		case 0x1e:// 00011110
		if ( sensorPos < -3)
    1ea6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1eaa:	8d 3f       	cpi	r24, 0xFD	; 253
    1eac:	34 f4       	brge	.+12     	; 0x1eba <runForwardLine90+0x7a>
		{
			handleAndSpeed(-30,0);
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	82 ee       	ldi	r24, 0xE2	; 226
    1eb4:	9f ef       	ldi	r25, 0xFF	; 255
    1eb6:	2b cb       	rjmp	.-2474   	; 0x150e <handleAndSpeed>
			break;
    1eb8:	08 95       	ret
		}
		else
		handleAndSpeed(angle2,speedRun90);
    1eba:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <angle2>
    1ebe:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <angle2+0x1>
    1ec2:	25 db       	rcall	.-2486   	; 0x150e <handleAndSpeed>
		curveFlag = 0;
    1ec4:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
		sensorPos = 2;
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
		break;
    1ed4:	08 95       	ret
		case 0x04:// 00000100
		case 0x0e:// 00001110
		if ( sensorPos < -3)
    1ed6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1eda:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1edc:	34 f4       	brge	.+12     	; 0x1eea <runForwardLine90+0xaa>
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	82 ee       	ldi	r24, 0xE2	; 226
    1ee4:	9f ef       	ldi	r25, 0xFF	; 255
    1ee6:	13 cb       	rjmp	.-2522   	; 0x150e <handleAndSpeed>
			break;
    1ee8:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1eea:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    1eee:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    1ef2:	0c 97       	sbiw	r24, 0x0c	; 12
    1ef4:	50 f0       	brcs	.+20     	; 0x1f0a <runForwardLine90+0xca>
		{
			handle(7);
    1ef6:	87 e0       	ldi	r24, 0x07	; 7
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(-20,-20);
    1efe:	6c ee       	ldi	r22, 0xEC	; 236
    1f00:	7f ef       	ldi	r23, 0xFF	; 255
    1f02:	8c ee       	ldi	r24, 0xEC	; 236
    1f04:	9f ef       	ldi	r25, 0xFF	; 255
    1f06:	79 d5       	rcall	.+2802   	; 0x29fa <speed>
		}
		else
		handleAndSpeed(angle3,speedRun90);
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <runForwardLine90+0xd4>
    1f0a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle3>
    1f0e:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle3+0x1>
    1f12:	fd da       	rcall	.-2566   	; 0x150e <handleAndSpeed>
		curveFlag = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		sensorPos = 3;
    1f1a:	83 e0       	ldi	r24, 0x03	; 3
    1f1c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 0;
    1f20:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		break;
    1f24:	08 95       	ret
		case 0x06:// 00000110
		if ( sensorPos < -3)
    1f26:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1f2a:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1f2c:	34 f4       	brge	.+12     	; 0x1f3a <runForwardLine90+0xfa>
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	82 ee       	ldi	r24, 0xE2	; 226
    1f34:	9f ef       	ldi	r25, 0xFF	; 255
    1f36:	eb ca       	rjmp	.-2602   	; 0x150e <handleAndSpeed>
			break;
    1f38:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1f3a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    1f3e:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    1f42:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    1f44:	50 f0       	brcs	.+20     	; 0x1f5a <runForwardLine90+0x11a>
    1f46:	8f e0       	ldi	r24, 0x0F	; 15
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(-20,-20);
    1f4e:	6c ee       	ldi	r22, 0xEC	; 236
    1f50:	7f ef       	ldi	r23, 0xFF	; 255
    1f52:	8c ee       	ldi	r24, 0xEC	; 236
    1f54:	9f ef       	ldi	r25, 0xFF	; 255
    1f56:	51 d5       	rcall	.+2722   	; 0x29fa <speed>
		}
		else
		handleAndSpeed(angle4,speedRun90);
    1f58:	05 c0       	rjmp	.+10     	; 0x1f64 <runForwardLine90+0x124>
    1f5a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    1f5e:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    1f62:	d5 da       	rcall	.-2646   	; 0x150e <handleAndSpeed>
		curveFlag = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		sensorPos = 4;
    1f6a:	84 e0       	ldi	r24, 0x04	; 4
    1f6c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 0;
    1f70:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		break;
		case 0x02:// 00000010
		case 0x07:// 00000111
		if ( sensorPos < -3)
    1f74:	08 95       	ret
    1f76:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
    1f7a:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1f7c:	34 f4       	brge	.+12     	; 0x1f8a <runForwardLine90+0x14a>
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	82 ee       	ldi	r24, 0xE2	; 226
    1f84:	9f ef       	ldi	r25, 0xFF	; 255
    1f86:	c3 ca       	rjmp	.-2682   	; 0x150e <handleAndSpeed>
			break;
    1f88:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1f8a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    1f8e:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    1f92:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    1f94:	50 f0       	brcs	.+20     	; 0x1faa <runForwardLine90+0x16a>
    1f96:	8f e0       	ldi	r24, 0x0F	; 15
    1f98:	90 e0       	ldi	r25, 0x00	; 0
			speed(-20,-20);
    1f9a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1f9e:	6c ee       	ldi	r22, 0xEC	; 236
    1fa0:	7f ef       	ldi	r23, 0xFF	; 255
    1fa2:	8c ee       	ldi	r24, 0xEC	; 236
    1fa4:	9f ef       	ldi	r25, 0xFF	; 255
    1fa6:	29 d5       	rcall	.+2642   	; 0x29fa <speed>
		}
		else
		handleAndSpeed(angle5,speedRun90);
    1fa8:	05 c0       	rjmp	.+10     	; 0x1fb4 <runForwardLine90+0x174>
    1faa:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <angle5>
    1fae:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <angle5+0x1>
    1fb2:	ad da       	rcall	.-2726   	; 0x150e <handleAndSpeed>
		curveFlag = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		sensorPos = 5;
    1fba:	85 e0       	ldi	r24, 0x05	; 5
    1fbc:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 0;
    1fc0:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		break;
		case 0x03:// 00000011
		if ( sensorPos < -3)
    1fc4:	08 95       	ret
    1fc6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(-30,0);
    1fca:	8d 3f       	cpi	r24, 0xFD	; 253
    1fcc:	34 f4       	brge	.+12     	; 0x1fda <runForwardLine90+0x19a>
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	82 ee       	ldi	r24, 0xE2	; 226
    1fd4:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1fd6:	9b ca       	rjmp	.-2762   	; 0x150e <handleAndSpeed>
		}
		else
		handleAndSpeed(angle6,speedRun90);
    1fd8:	08 95       	ret
    1fda:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    1fde:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    1fe2:	95 da       	rcall	.-2774   	; 0x150e <handleAndSpeed>
		curveFlag = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		sensorPos = 6;
    1fea:	86 e0       	ldi	r24, 0x06	; 6
    1fec:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 0;
		break;
    1ff0:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		case 0x01:// 00000001
		if ( sensorPos < -3)
    1ff4:	08 95       	ret
    1ff6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(-30,0);
    1ffa:	8d 3f       	cpi	r24, 0xFD	; 253
    1ffc:	34 f4       	brge	.+12     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	82 ee       	ldi	r24, 0xE2	; 226
    2004:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    2006:	83 ca       	rjmp	.-2810   	; 0x150e <handleAndSpeed>
		}
		handleAndSpeed(angle7,speedRun90);
    2008:	08 95       	ret
    200a:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <angle7>
    200e:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <angle7+0x1>
		curveFlag = 1;   //RYGB(0,0,0,0);
    2012:	7d da       	rcall	.-2822   	; 0x150e <handleAndSpeed>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		straightLine = 0;
    201a:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		sensorPos = 6;
    201e:	86 e0       	ldi	r24, 0x06	; 6
    2020:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		break;
		case 0x81:// 10000001
		case 0xc1:// 11000001
		case 0x00:// 00000000
		case 0x83:// 10000011
		if ( sensorPos < -4)
    2024:	08 95       	ret
    2026:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(-30,0);
    202a:	8c 3f       	cpi	r24, 0xFC	; 252
    202c:	34 f4       	brge	.+12     	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	82 ee       	ldi	r24, 0xE2	; 226
			break;
    2034:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else if ( sensorPos > 4)
    2036:	6b ca       	rjmp	.-2858   	; 0x150e <handleAndSpeed>
    2038:	08 95       	ret
    203a:	85 30       	cpi	r24, 0x05	; 5
		{
			handleAndSpeed(30,0);
    203c:	0c f4       	brge	.+2      	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    203e:	fb c0       	rjmp	.+502    	; 0x2236 <__stack+0x37>
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    2046:	90 e0       	ldi	r25, 0x00	; 0
		}
		break;
		case 0x10:// 00010000
		case 0x38:// 00111000
		if ( sensorPos > 3)
    2048:	62 ca       	rjmp	.-2876   	; 0x150e <handleAndSpeed>
    204a:	08 95       	ret
    204c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(30,0);
    2050:	84 30       	cpi	r24, 0x04	; 4
    2052:	34 f0       	brlt	.+12     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	8e e1       	ldi	r24, 0x1E	; 30
    205a:	90 e0       	ldi	r25, 0x00	; 0
			break;
    205c:	58 ca       	rjmp	.-2896   	; 0x150e <handleAndSpeed>
		}
		else
		handleAndSpeedMicro (-angle1,speedRun90);
    205e:	08 95       	ret
    2060:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    2064:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    2068:	91 95       	neg	r25
    206a:	81 95       	neg	r24
    206c:	91 09       	sbc	r25, r1
		curveFlag = 0;
    206e:	a4 da       	rcall	.-2744   	; 0x15b8 <handleAndSpeedMicro>
    2070:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
		sensorPos = -1;
    2074:	8f ef       	ldi	r24, 0xFF	; 255
		straightLine = 1;
    2076:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
    207a:	81 e0       	ldi	r24, 0x01	; 1
		break;
    207c:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
		case 0x30:// 00110000
		case 0x78:// 01111000
		if ( sensorPos > 3)
    2080:	08 95       	ret
    2082:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(30,0);
    2086:	84 30       	cpi	r24, 0x04	; 4
    2088:	34 f0       	brlt	.+12     	; 0x2096 <__DATA_REGION_LENGTH__+0x96>
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	8e e1       	ldi	r24, 0x1E	; 30
    2090:	90 e0       	ldi	r25, 0x00	; 0
			break;
    2092:	3d ca       	rjmp	.-2950   	; 0x150e <handleAndSpeed>
		}
		else
		handleAndSpeed(-angle2,speedRun90);
    2094:	08 95       	ret
    2096:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <angle2>
    209a:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <angle2+0x1>
    209e:	91 95       	neg	r25
    20a0:	81 95       	neg	r24
    20a2:	91 09       	sbc	r25, r1
		curveFlag = 0;
    20a4:	34 da       	rcall	.-2968   	; 0x150e <handleAndSpeed>
    20a6:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <curveFlag>
		sensorPos = -2;
    20aa:	8e ef       	ldi	r24, 0xFE	; 254
    20ac:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
		break;
		case 0x20:// 00100000
		case 0x70:// 01110000
		if ( sensorPos > 3)
    20b6:	08 95       	ret
    20b8:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(30,0);
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	34 f0       	brlt	.+12     	; 0x20cc <__DATA_REGION_LENGTH__+0xcc>
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    20c6:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    20c8:	22 ca       	rjmp	.-3004   	; 0x150e <handleAndSpeed>
    20ca:	08 95       	ret
    20cc:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    20d0:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
		{
			handle(-7);
    20d4:	0c 97       	sbiw	r24, 0x0c	; 12
    20d6:	50 f0       	brcs	.+20     	; 0x20ec <__DATA_REGION_LENGTH__+0xec>
    20d8:	89 ef       	ldi	r24, 0xF9	; 249
    20da:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    20dc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    20e0:	6c ee       	ldi	r22, 0xEC	; 236
    20e2:	7f ef       	ldi	r23, 0xFF	; 255
    20e4:	8c ee       	ldi	r24, 0xEC	; 236
    20e6:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else
		handleAndSpeed(-angle3,speedRun90);
    20e8:	88 d4       	rcall	.+2320   	; 0x29fa <speed>
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
    20ec:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle3>
    20f0:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle3+0x1>
    20f4:	91 95       	neg	r25
    20f6:	81 95       	neg	r24
    20f8:	91 09       	sbc	r25, r1
		curveFlag = 1;
    20fa:	09 da       	rcall	.-3054   	; 0x150e <handleAndSpeed>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		sensorPos = -3;
    2102:	8d ef       	ldi	r24, 0xFD	; 253
    2104:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 0;
		break;
    2108:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		case 0x60:// 01100000
		if ( sensorPos > 3)
    210c:	08 95       	ret
    210e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(30,0);
    2112:	84 30       	cpi	r24, 0x04	; 4
    2114:	34 f0       	brlt	.+12     	; 0x2122 <__DATA_REGION_LENGTH__+0x122>
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    211c:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    211e:	f7 c9       	rjmp	.-3090   	; 0x150e <handleAndSpeed>
    2120:	08 95       	ret
    2122:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    2126:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
		{
			handle(-15);
    212a:	0c 97       	sbiw	r24, 0x0c	; 12
    212c:	50 f0       	brcs	.+20     	; 0x2142 <__DATA_REGION_LENGTH__+0x142>
    212e:	81 ef       	ldi	r24, 0xF1	; 241
    2130:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    2132:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2136:	6c ee       	ldi	r22, 0xEC	; 236
    2138:	7f ef       	ldi	r23, 0xFF	; 255
    213a:	8c ee       	ldi	r24, 0xEC	; 236
    213c:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else
		handleAndSpeed(-angle4,speedRun90);
    213e:	5d d4       	rcall	.+2234   	; 0x29fa <speed>
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <__DATA_REGION_LENGTH__+0x152>
    2142:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    2146:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    214a:	91 95       	neg	r25
    214c:	81 95       	neg	r24
    214e:	91 09       	sbc	r25, r1
		curveFlag = 1;
    2150:	de d9       	rcall	.-3140   	; 0x150e <handleAndSpeed>
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		sensorPos = -4;
    2158:	8c ef       	ldi	r24, 0xFC	; 252
		straightLine = 0;
    215a:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		break;
    215e:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		case 0x40:// 01000000
		case 0xe0:// 11100000
		if ( sensorPos > 3)
    2162:	08 95       	ret
    2164:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(30,0);
    2168:	84 30       	cpi	r24, 0x04	; 4
    216a:	34 f0       	brlt	.+12     	; 0x2178 <__DATA_REGION_LENGTH__+0x178>
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    2172:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    2174:	cc c9       	rjmp	.-3176   	; 0x150e <handleAndSpeed>
    2176:	08 95       	ret
    2178:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    217c:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
		{
			handle(-15);
    2180:	0c 97       	sbiw	r24, 0x0c	; 12
    2182:	50 f0       	brcs	.+20     	; 0x2198 <__DATA_REGION_LENGTH__+0x198>
    2184:	81 ef       	ldi	r24, 0xF1	; 241
    2186:	9f ef       	ldi	r25, 0xFF	; 255
			speed(0,0);
    2188:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle5,speedRun90);
    2194:	32 d4       	rcall	.+2148   	; 0x29fa <speed>
    2196:	08 c0       	rjmp	.+16     	; 0x21a8 <__DATA_REGION_LENGTH__+0x1a8>
    2198:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <angle5>
    219c:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <angle5+0x1>
    21a0:	91 95       	neg	r25
    21a2:	81 95       	neg	r24
		curveFlag = 1;
    21a4:	91 09       	sbc	r25, r1
    21a6:	b3 d9       	rcall	.-3226   	; 0x150e <handleAndSpeed>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -5;
    21aa:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
    21ae:	8b ef       	ldi	r24, 0xFB	; 251
		straightLine = 0;
    21b0:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		break;
    21b4:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		case 0xc0:// 11000000
		if ( sensorPos > 3)
    21b8:	08 95       	ret
    21ba:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(30,0);
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	34 f0       	brlt	.+12     	; 0x21ce <__DATA_REGION_LENGTH__+0x1ce>
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    21c8:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle6,speedRun90);
    21ca:	a1 c9       	rjmp	.-3262   	; 0x150e <handleAndSpeed>
    21cc:	08 95       	ret
    21ce:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    21d2:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    21d6:	91 95       	neg	r25
    21d8:	81 95       	neg	r24
		curveFlag = 1;
    21da:	91 09       	sbc	r25, r1
    21dc:	98 d9       	rcall	.-3280   	; 0x150e <handleAndSpeed>
    21de:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -6;
    21e0:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
    21e4:	8a ef       	ldi	r24, 0xFA	; 250
		straightLine = 0;
    21e6:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		break;
		case 0x80:// 10000000
		if ( sensorPos > 3)
    21ea:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
    21ee:	08 95       	ret
    21f0:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <sensorPos>
		{
			handleAndSpeed(30,0);
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	34 f0       	brlt	.+12     	; 0x2204 <__stack+0x5>
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    21fe:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle7,speedRun90);
    2200:	86 c9       	rjmp	.-3316   	; 0x150e <handleAndSpeed>
    2202:	08 95       	ret
    2204:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <angle7>
    2208:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <angle7+0x1>
    220c:	91 95       	neg	r25
    220e:	81 95       	neg	r24
    2210:	91 09       	sbc	r25, r1
		curveFlag = 1;
    2212:	7d d9       	rcall	.-3334   	; 0x150e <handleAndSpeed>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <curveFlag>
		sensorPos = -6;
    221a:	8a ef       	ldi	r24, 0xFA	; 250
    221c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <sensorPos>
		straightLine = 0;
    2220:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
		break;
		case 0x0f: break;
		case 0xf0: break;
		default:
		straightLine = 1;
    2224:	08 95       	ret
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <straightLine>
		speed(0,0);
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	e2 c3       	rjmp	.+1988   	; 0x29fa <speed>
    2236:	08 95       	ret

00002238 <turn90>:
		break;
	}
}
int turn90(int speedRun)
{
    2238:	6f 92       	push	r6
    223a:	7f 92       	push	r7
    223c:	8f 92       	push	r8
    223e:	9f 92       	push	r9
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	8c 01       	movw	r16, r24
	int runCase2 = 19;
	cnt1 = 0;
    2256:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    225a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
	cnt2 = 0;
    225e:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    2262:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
	RGB(1,0,1);
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
		break;
	}
}
int turn90(int speedRun)
{
	int runCase2 = 19;
    2270:	c3 e1       	ldi	r28, 0x13	; 19
    2272:	d0 e0       	ldi	r29, 0x00	; 0
			switch( line ) {
				case 2:
				handle(-45);
				speed(0,speedRun);
				if(sensorMask(0xff) == 0x00){
					runCase2 = 31;
    2274:	0f 2e       	mov	r0, r31
    2276:	ff e1       	ldi	r31, 0x1F	; 31
    2278:	6f 2e       	mov	r6, r31
    227a:	f0 2d       	mov	r31, r0
    227c:	71 2c       	mov	r7, r1
					beep_long(1000);
					runCase2 = 24;
					cnt1 = 0;
					break;
					case 1:
					line = 1;
    227e:	cc 24       	eor	r12, r12
    2280:	c3 94       	inc	r12
    2282:	d1 2c       	mov	r13, r1
					handle(45);
					speed(speedRun,0);
					beep_long(100);
					runCase2 = 24;
    2284:	0f 2e       	mov	r0, r31
    2286:	f8 e1       	ldi	r31, 0x18	; 24
    2288:	8f 2e       	mov	r8, r31
    228a:	f0 2d       	mov	r31, r0
    228c:	91 2c       	mov	r9, r1
			if (LineCheck)
			{
				switch (LineCheck)
				{
					case 2:
					line = 2;
    228e:	68 94       	set
    2290:	ee 24       	eor	r14, r14
    2292:	e1 f8       	bld	r14, 1
    2294:	f1 2c       	mov	r15, r1
		switch (runCase2)
		{
			case 19:
			brakeTheCar(timerBrake90,speedBrake90);
			runForwardLine90(speedRun);
			runCase2 = 23;
    2296:	0f 2e       	mov	r0, r31
    2298:	f7 e1       	ldi	r31, 0x17	; 23
    229a:	af 2e       	mov	r10, r31
    229c:	f0 2d       	mov	r31, r0
    229e:	b1 2c       	mov	r11, r1
	cnt1 = 0;
	cnt2 = 0;
	RGB(1,0,1);
	int LineCheck = 0;
	while (1){
		switch (runCase2)
    22a0:	fe 01       	movw	r30, r28
    22a2:	73 97       	sbiw	r30, 0x13	; 19
    22a4:	ec 31       	cpi	r30, 0x1C	; 28
    22a6:	f1 05       	cpc	r31, r1
    22a8:	08 f0       	brcs	.+2      	; 0x22ac <turn90+0x74>
    22aa:	c2 c1       	rjmp	.+900    	; 0x2630 <turn90+0x3f8>
    22ac:	88 27       	eor	r24, r24
    22ae:	e3 5a       	subi	r30, 0xA3	; 163
    22b0:	fd 4f       	sbci	r31, 0xFD	; 253
    22b2:	8f 4f       	sbci	r24, 0xFF	; 255
    22b4:	1f c6       	rjmp	.+3134   	; 0x2ef4 <__tablejump2__>
		{
			case 19:
			brakeTheCar(timerBrake90,speedBrake90);
    22b6:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <speedBrake90>
    22ba:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <speedBrake90+0x1>
    22be:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <timerBrake90>
    22c2:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <timerBrake90+0x1>
    22c6:	14 dc       	rcall	.-2008   	; 0x1af0 <brakeTheCar>
			runForwardLine90(speedRun);
    22c8:	c8 01       	movw	r24, r16
    22ca:	ba dd       	rcall	.-1164   	; 0x1e40 <runForwardLine90>
    22cc:	ca 2d       	mov	r28, r10
			runCase2 = 23;
    22ce:	db 2d       	mov	r29, r11
    22d0:	e7 cf       	rjmp	.-50     	; 0x22a0 <turn90+0x68>
			break;
    22d2:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <cnt1>
			case 23:
			if(cnt1 > 2000){
    22d6:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <cnt1+0x1>
    22da:	81 3d       	cpi	r24, 0xD1	; 209
    22dc:	97 40       	sbci	r25, 0x07	; 7
    22de:	08 f0       	brcs	.+2      	; 0x22e2 <turn90+0xaa>
    22e0:	aa c1       	rjmp	.+852    	; 0x2636 <turn90+0x3fe>
				return 100;
				break;
			}
			LineCheck = checkCrossHalfLine();
    22e2:	01 d9       	rcall	.-3582   	; 0x14e6 <checkCrossHalfLine>
    22e4:	88 23       	and	r24, r24
			if (LineCheck)
    22e6:	91 f1       	breq	.+100    	; 0x234c <turn90+0x114>
    22e8:	81 30       	cpi	r24, 0x01	; 1
			{
				switch (LineCheck)
    22ea:	c9 f0       	breq	.+50     	; 0x231e <turn90+0xe6>
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	c1 f6       	brne	.-80     	; 0x22a0 <turn90+0x68>
    22f0:	f0 92 15 03 	sts	0x0315, r15	; 0x800315 <line+0x1>
				{
					case 2:
					line = 2;
    22f4:	e0 92 14 03 	sts	0x0314, r14	; 0x800314 <line>
    22f8:	83 ed       	ldi	r24, 0xD3	; 211
					handle (-45);
    22fa:	9f ef       	ldi	r25, 0xFF	; 255
    22fc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2300:	b8 01       	movw	r22, r16
					speed(0,speedRun);
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	79 d3       	rcall	.+1778   	; 0x29fa <speed>
    2308:	88 ee       	ldi	r24, 0xE8	; 232
					beep_long(1000);
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2310:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
					runCase2 = 24;
					cnt1 = 0;
    2314:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    2318:	c8 2d       	mov	r28, r8
					case 2:
					line = 2;
					handle (-45);
					speed(0,speedRun);
					beep_long(1000);
					runCase2 = 24;
    231a:	d9 2d       	mov	r29, r9
    231c:	c1 cf       	rjmp	.-126    	; 0x22a0 <turn90+0x68>
					cnt1 = 0;
					break;
    231e:	d0 92 15 03 	sts	0x0315, r13	; 0x800315 <line+0x1>
					case 1:
					line = 1;
    2322:	c0 92 14 03 	sts	0x0314, r12	; 0x800314 <line>
    2326:	8d e2       	ldi	r24, 0x2D	; 45
					handle(45);
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
					speed(speedRun,0);
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	c8 01       	movw	r24, r16
    2334:	62 d3       	rcall	.+1732   	; 0x29fa <speed>
    2336:	84 e6       	ldi	r24, 0x64	; 100
					beep_long(100);
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    233e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
					runCase2 = 24;
					cnt1 = 0;
    2342:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
					case 1:
					line = 1;
					handle(45);
					speed(speedRun,0);
					beep_long(100);
					runCase2 = 24;
    2346:	c8 2d       	mov	r28, r8
    2348:	d9 2d       	mov	r29, r9
					cnt1 = 0;
					break;
    234a:	aa cf       	rjmp	.-172    	; 0x22a0 <turn90+0x68>
					default : break;
				}
			}
			else runForwardLine90(speedRun);
    234c:	c8 01       	movw	r24, r16
    234e:	78 dd       	rcall	.-1296   	; 0x1e40 <runForwardLine90>
    2350:	a7 cf       	rjmp	.-178    	; 0x22a0 <turn90+0x68>
    2352:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <line>
			break;
			case 24:
			switch( line ) {
    2356:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <line+0x1>
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	91 05       	cpc	r25, r1
    235e:	b1 f0       	breq	.+44     	; 0x238c <turn90+0x154>
    2360:	02 97       	sbiw	r24, 0x02	; 2
    2362:	09 f0       	breq	.+2      	; 0x2366 <turn90+0x12e>
    2364:	9d cf       	rjmp	.-198    	; 0x22a0 <turn90+0x68>
    2366:	83 ed       	ldi	r24, 0xD3	; 211
				case 2:
				handle(-45);
    2368:	9f ef       	ldi	r25, 0xFF	; 255
    236a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(0,speedRun);
    236e:	b8 01       	movw	r22, r16
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	42 d3       	rcall	.+1668   	; 0x29fa <speed>
    2376:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
				if(sensorMask(0xff) == 0x00){
    237a:	81 11       	cpse	r24, r1
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <turn90+0x14a>
    237e:	c6 2d       	mov	r28, r6
					runCase2 = 31;
    2380:	d7 2d       	mov	r29, r7
    2382:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
				}
				cnt1 = 0;
    2386:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    238a:	8a cf       	rjmp	.-236    	; 0x22a0 <turn90+0x68>
				
				break;
    238c:	8d e2       	ldi	r24, 0x2D	; 45
				case 1:
				handle(45);
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(speedRun,0);
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	c8 01       	movw	r24, r16
    239a:	2f d3       	rcall	.+1630   	; 0x29fa <speed>
    239c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
				if(sensorMask(0xff) == 0x00){
    23a0:	81 11       	cpse	r24, r1
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <turn90+0x170>
    23a4:	c9 e2       	ldi	r28, 0x29	; 41
					runCase2 = 41;
    23a6:	d0 e0       	ldi	r29, 0x00	; 0
    23a8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
				}
				cnt1 = 0;
    23ac:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    23b0:	77 cf       	rjmp	.-274    	; 0x22a0 <turn90+0x68>
				break;
    23b2:	40 e0       	ldi	r20, 0x00	; 0
				default:
				break;
			}
			break;
			case 31:
			RGB(1,0,0);
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (-45);
    23bc:	83 ed       	ldi	r24, 0xD3	; 211
    23be:	9f ef       	ldi	r25, 0xFF	; 255
    23c0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    23c4:	b8 01       	movw	r22, r16
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	17 d3       	rcall	.+1582   	; 0x29fa <speed>
    23cc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
		runForwardLine(speedRun);
	}
}
unsigned char sensorMask (unsigned char MASK)
{
	return ( sensor & MASK);
    23d0:	98 2f       	mov	r25, r24
			break;
			case 31:
			RGB(1,0,0);
			handle (-45);
			speed (0,speedRun);
			if (sensorMask(0X3c) != 0x00)
    23d2:	9c 73       	andi	r25, 0x3C	; 60
    23d4:	39 f0       	breq	.+14     	; 0x23e4 <turn90+0x1ac>
    23d6:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    23da:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    23de:	cd e2       	ldi	r28, 0x2D	; 45
				runCase2 = 45;
    23e0:	d0 e0       	ldi	r29, 0x00	; 0
    23e2:	5e cf       	rjmp	.-324    	; 0x22a0 <turn90+0x68>
				break;
    23e4:	81 ff       	sbrs	r24, 1
			}
			if ((sensorMask (0x02) == 0x02))
    23e6:	5c cf       	rjmp	.-328    	; 0x22a0 <turn90+0x68>
    23e8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    23ec:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    23f0:	c0 e2       	ldi	r28, 0x20	; 32
				runCase2 = 32;
    23f2:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    23f4:	55 cf       	rjmp	.-342    	; 0x22a0 <turn90+0x68>
			}
			break;
			case 32:
			handle (-45);
    23f6:	83 ed       	ldi	r24, 0xD3	; 211
    23f8:	9f ef       	ldi	r25, 0xFF	; 255
    23fa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    23fe:	b8 01       	movw	r22, r16
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	fa d2       	rcall	.+1524   	; 0x29fa <speed>
    2406:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x0f) == 0x01) {
    240a:	8f 70       	andi	r24, 0x0F	; 15
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	09 f0       	breq	.+2      	; 0x2412 <turn90+0x1da>
    2410:	47 cf       	rjmp	.-370    	; 0x22a0 <turn90+0x68>
    2412:	c1 e2       	ldi	r28, 0x21	; 33
				runCase2 = 33;
    2414:	d0 e0       	ldi	r29, 0x00	; 0
    2416:	44 cf       	rjmp	.-376    	; 0x22a0 <turn90+0x68>
				break;
			}
			break;
			case 33:
			handle (-45);
    2418:	83 ed       	ldi	r24, 0xD3	; 211
    241a:	9f ef       	ldi	r25, 0xFF	; 255
    241c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    2420:	b8 01       	movw	r22, r16
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	e9 d2       	rcall	.+1490   	; 0x29fa <speed>
    2428:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0xf0) == 0x00)
    242c:	80 7f       	andi	r24, 0xF0	; 240
    242e:	09 f0       	breq	.+2      	; 0x2432 <turn90+0x1fa>
    2430:	37 cf       	rjmp	.-402    	; 0x22a0 <turn90+0x68>
			{
				runCase2 = 34;
    2432:	c2 e2       	ldi	r28, 0x22	; 34
    2434:	d0 e0       	ldi	r29, 0x00	; 0
    2436:	34 cf       	rjmp	.-408    	; 0x22a0 <turn90+0x68>
				break;
			}
			break;
			case 34:
			handle (15);//35
    2438:	8f e0       	ldi	r24, 0x0F	; 15
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    2440:	b8 01       	movw	r22, r16
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	d9 d2       	rcall	.+1458   	; 0x29fa <speed>
    2448:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    244c:	8c 73       	andi	r24, 0x3C	; 60
    244e:	09 f4       	brne	.+2      	; 0x2452 <turn90+0x21a>
    2450:	27 cf       	rjmp	.-434    	; 0x22a0 <turn90+0x68>
    2452:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    2456:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    245a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
				cnt2 = 0;
    245e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
    2462:	c3 e2       	ldi	r28, 0x23	; 35
				runCase2 = 35;
    2464:	d0 e0       	ldi	r29, 0x00	; 0
    2466:	1c cf       	rjmp	.-456    	; 0x22a0 <turn90+0x68>
    2468:	41 e0       	ldi	r20, 0x01	; 1
			}
			break;
			case 35:
			RGB(1,0,1);
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (30);
    2472:	8e e1       	ldi	r24, 0x1E	; 30
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    247a:	b8 01       	movw	r22, r16
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	bc d2       	rcall	.+1400   	; 0x29fa <speed>
    2482:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    2486:	8c 73       	andi	r24, 0x3C	; 60
    2488:	09 f4       	brne	.+2      	; 0x248c <turn90+0x254>
    248a:	0a cf       	rjmp	.-492    	; 0x22a0 <turn90+0x68>
    248c:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    2490:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    2494:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
				cnt2 = 0;
    2498:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
    249c:	ce e2       	ldi	r28, 0x2E	; 46
				runCase2 = 46;
    249e:	d0 e0       	ldi	r29, 0x00	; 0
    24a0:	ff ce       	rjmp	.-514    	; 0x22a0 <turn90+0x68>
			//}
			//cnt3 = 0;
			//return 11;
			//break;
			case 41:
			RGB(1,0,0);
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle(45);
    24ac:	8d e2       	ldi	r24, 0x2D	; 45
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	c8 01       	movw	r24, r16
    24ba:	9f d2       	rcall	.+1342   	; 0x29fa <speed>
    24bc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
		runForwardLine(speedRun);
	}
}
unsigned char sensorMask (unsigned char MASK)
{
	return ( sensor & MASK);
    24c0:	98 2f       	mov	r25, r24
			//break;
			case 41:
			RGB(1,0,0);
			handle(45);
			speed (speedRun,0);
			if (sensorMask (0x3c) != 0x00)
    24c2:	9c 73       	andi	r25, 0x3C	; 60
    24c4:	39 f0       	breq	.+14     	; 0x24d4 <turn90+0x29c>
    24c6:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    24ca:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    24ce:	cd e2       	ldi	r28, 0x2D	; 45
				runCase2 = 45;
    24d0:	d0 e0       	ldi	r29, 0x00	; 0
    24d2:	e6 ce       	rjmp	.-564    	; 0x22a0 <turn90+0x68>
				break;
    24d4:	80 7c       	andi	r24, 0xC0	; 192
			}
			if ((sensorMask (0xc0) == 0xc0))
    24d6:	80 3c       	cpi	r24, 0xC0	; 192
    24d8:	09 f0       	breq	.+2      	; 0x24dc <turn90+0x2a4>
    24da:	e2 ce       	rjmp	.-572    	; 0x22a0 <turn90+0x68>
    24dc:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    24e0:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    24e4:	ca e2       	ldi	r28, 0x2A	; 42
				runCase2 = 42;
    24e6:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    24e8:	db ce       	rjmp	.-586    	; 0x22a0 <turn90+0x68>
			}
			break;
			case 42:
			RGB(0,1,0);
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (45);
    24f4:	8d e2       	ldi	r24, 0x2D	; 45
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	c8 01       	movw	r24, r16
    2502:	7b d2       	rcall	.+1270   	; 0x29fa <speed>
    2504:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if ((sensorMask(0xf0) == 0x80))
    2508:	80 7f       	andi	r24, 0xF0	; 240
    250a:	80 38       	cpi	r24, 0x80	; 128
    250c:	09 f0       	breq	.+2      	; 0x2510 <turn90+0x2d8>
    250e:	c8 ce       	rjmp	.-624    	; 0x22a0 <turn90+0x68>
    2510:	cb e2       	ldi	r28, 0x2B	; 43
			{
				runCase2 = 43;
    2512:	d0 e0       	ldi	r29, 0x00	; 0
    2514:	c5 ce       	rjmp	.-630    	; 0x22a0 <turn90+0x68>
				break;
			}
			break;
			case 43:
			RGB(0,0,1);
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (45);
    2520:	8d e2       	ldi	r24, 0x2D	; 45
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	c8 01       	movw	r24, r16
    252e:	65 d2       	rcall	.+1226   	; 0x29fa <speed>
    2530:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if ((sensorMask(0xf0) == 0x00))
    2534:	80 7f       	andi	r24, 0xF0	; 240
    2536:	09 f0       	breq	.+2      	; 0x253a <turn90+0x302>
    2538:	b3 ce       	rjmp	.-666    	; 0x22a0 <turn90+0x68>
			{
				runCase2 = 44;
    253a:	cc e2       	ldi	r28, 0x2C	; 44
    253c:	d0 e0       	ldi	r29, 0x00	; 0
    253e:	b0 ce       	rjmp	.-672    	; 0x22a0 <turn90+0x68>
				break;
			}
			break;
			case 44:
			RGB(1,0,1);
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (-15);
    254a:	81 ef       	ldi	r24, 0xF1	; 241
    254c:	9f ef       	ldi	r25, 0xFF	; 255
    254e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	c8 01       	movw	r24, r16
    2558:	50 d2       	rcall	.+1184   	; 0x29fa <speed>
    255a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    255e:	8c 73       	andi	r24, 0x3C	; 60
    2560:	09 f4       	brne	.+2      	; 0x2564 <turn90+0x32c>
    2562:	9e ce       	rjmp	.-708    	; 0x22a0 <turn90+0x68>
    2564:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    2568:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    256c:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
				cnt2 = 0;
    2570:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
				runCase2 = 45;
    2574:	cd e2       	ldi	r28, 0x2D	; 45
    2576:	d0 e0       	ldi	r29, 0x00	; 0
    2578:	93 ce       	rjmp	.-730    	; 0x22a0 <turn90+0x68>
			}
			break;
			case 45:
			RGB(1,0,1);
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (30);
    2584:	8e e1       	ldi	r24, 0x1E	; 30
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	c8 01       	movw	r24, r16
    2592:	33 d2       	rcall	.+1126   	; 0x29fa <speed>
    2594:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    2598:	8c 73       	andi	r24, 0x3C	; 60
    259a:	09 f4       	brne	.+2      	; 0x259e <turn90+0x366>
    259c:	81 ce       	rjmp	.-766    	; 0x22a0 <turn90+0x68>
    259e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			{
				cnt1 = 0;
    25a2:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    25a6:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
				cnt2 = 0;
    25aa:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
    25ae:	ce e2       	ldi	r28, 0x2E	; 46
				runCase2 = 46;
    25b0:	d0 e0       	ldi	r29, 0x00	; 0
    25b2:	76 ce       	rjmp	.-788    	; 0x22a0 <turn90+0x68>
    25b4:	41 e0       	ldi	r20, 0x01	; 1
			}
			break;
			case 46:
			RGB(1,1,1);
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			cnt2 = 0;
    25be:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    25c2:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
			beep_long(300);
    25c6:	8c e2       	ldi	r24, 0x2C	; 44
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			while(cnt2 < 200)
    25ce:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    25d2:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    25d6:	88 3c       	cpi	r24, 0xC8	; 200
    25d8:	91 05       	cpc	r25, r1
    25da:	48 f4       	brcc	.+18     	; 0x25ee <turn90+0x3b6>
			{
				runForwardLine90(speedRun);
    25dc:	c8 01       	movw	r24, r16
    25de:	30 dc       	rcall	.-1952   	; 0x1e40 <runForwardLine90>
    25e0:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
			break;
			case 46:
			RGB(1,1,1);
			cnt2 = 0;
			beep_long(300);
			while(cnt2 < 200)
    25e4:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    25e8:	88 3c       	cpi	r24, 0xC8	; 200
    25ea:	91 05       	cpc	r25, r1
    25ec:	b8 f3       	brcs	.-18     	; 0x25dc <turn90+0x3a4>
			{
				runForwardLine90(speedRun);
			}
			cnt2 = 0;
    25ee:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    25f2:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
			while(cnt2 < timerBoostAfter90)
    25f6:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <timerBoostAfter90>
    25fa:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <timerBoostAfter90+0x1>
    25fe:	89 2b       	or	r24, r25
    2600:	81 f0       	breq	.+32     	; 0x2622 <turn90+0x3ea>
			{
				runForwardLine90(speedBoostAfter90);
    2602:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <speedBoostAfter90>
    2606:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <speedBoostAfter90+0x1>
    260a:	1a dc       	rcall	.-1996   	; 0x1e40 <runForwardLine90>
    260c:	20 91 46 03 	lds	r18, 0x0346	; 0x800346 <cnt2>
			while(cnt2 < 200)
			{
				runForwardLine90(speedRun);
			}
			cnt2 = 0;
			while(cnt2 < timerBoostAfter90)
    2610:	30 91 47 03 	lds	r19, 0x0347	; 0x800347 <cnt2+0x1>
    2614:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <timerBoostAfter90>
    2618:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <timerBoostAfter90+0x1>
    261c:	28 17       	cp	r18, r24
    261e:	39 07       	cpc	r19, r25
    2620:	80 f3       	brcs	.-32     	; 0x2602 <turn90+0x3ca>
    2622:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <cnt3+0x1>
			{
				runForwardLine90(speedBoostAfter90);
			}
			cnt3 = 0;;
    2626:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <cnt3>
    262a:	8b e0       	ldi	r24, 0x0B	; 11
			return 11;
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	05 c0       	rjmp	.+10     	; 0x263a <turn90+0x402>
    2630:	8b e0       	ldi	r24, 0x0B	; 11
			break;
			default:
			return 11;
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	02 c0       	rjmp	.+4      	; 0x263a <turn90+0x402>
    2636:	84 e6       	ldi	r24, 0x64	; 100
			runForwardLine90(speedRun);
			runCase2 = 23;
			break;
			case 23:
			if(cnt1 > 2000){
				return 100;
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	df 91       	pop	r29
			default:
			return 11;
			break;
		}
	}
}
    263c:	cf 91       	pop	r28
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	ff 90       	pop	r15
    2644:	ef 90       	pop	r14
    2646:	df 90       	pop	r13
    2648:	cf 90       	pop	r12
    264a:	bf 90       	pop	r11
    264c:	af 90       	pop	r10
    264e:	9f 90       	pop	r9
    2650:	8f 90       	pop	r8
    2652:	7f 90       	pop	r7
    2654:	6f 90       	pop	r6
    2656:	08 95       	ret

00002658 <run>:
    2658:	0e 94 61 07 	call	0xec2	; 0xec2 <setup>
	speedRun7 = speedRunForward*80/100;		angle7 = 15;
}
void run(void)
{
	setup();
	unsigned char runCase = 0;
    265c:	c0 e0       	ldi	r28, 0x00	; 0
					runCase = 12;
					break;
					
					case HALF_RIGHT_LINE:
					cnt1 = 0;
					runCase = 13;
    265e:	0d e0       	ldi	r16, 0x0D	; 13
				runCase = 21;
				cnt1 = 0;
				break;
			}
			else {					
				switch (checkCrossHalfLine())
    2660:	1b e0       	ldi	r17, 0x0B	; 11
				{
					case HALF_LEFT_LINE:
					cnt1 = 0;
					runCase = 12;
    2662:	dc e0       	ldi	r29, 0x0C	; 12
void run(void)
{
	setup();
	unsigned char runCase = 0;
	while( 1 ) {
		switch( runCase ) {
    2664:	cb 30       	cpi	r28, 0x0B	; 11
    2666:	09 f4       	brne	.+2      	; 0x266a <run+0x12>
    2668:	5b c0       	rjmp	.+182    	; 0x2720 <run+0xc8>
    266a:	38 f4       	brcc	.+14     	; 0x267a <run+0x22>
    266c:	c1 30       	cpi	r28, 0x01	; 1
    266e:	41 f1       	breq	.+80     	; 0x26c0 <run+0x68>
    2670:	80 f0       	brcs	.+32     	; 0x2692 <run+0x3a>
    2672:	c2 30       	cpi	r28, 0x02	; 2
    2674:	09 f0       	breq	.+2      	; 0x2678 <run+0x20>
    2676:	db c0       	rjmp	.+438    	; 0x282e <run+0x1d6>
    2678:	35 c0       	rjmp	.+106    	; 0x26e4 <run+0x8c>
    267a:	cd 30       	cpi	r28, 0x0D	; 13
    267c:	09 f4       	brne	.+2      	; 0x2680 <run+0x28>
    267e:	99 c0       	rjmp	.+306    	; 0x27b2 <run+0x15a>
    2680:	08 f4       	brcc	.+2      	; 0x2684 <run+0x2c>
    2682:	81 c0       	rjmp	.+258    	; 0x2786 <run+0x12e>
    2684:	c5 31       	cpi	r28, 0x15	; 21
    2686:	09 f4       	brne	.+2      	; 0x268a <run+0x32>
    2688:	aa c0       	rjmp	.+340    	; 0x27de <run+0x186>
    268a:	c4 36       	cpi	r28, 0x64	; 100
    268c:	09 f0       	breq	.+2      	; 0x2690 <run+0x38>
    268e:	cf c0       	rjmp	.+414    	; 0x282e <run+0x1d6>
    2690:	b7 c0       	rjmp	.+366    	; 0x2800 <run+0x1a8>
			case 0:
			if((getGateSensor() == 1)){
    2692:	0e 94 0f 05 	call	0xa1e	; 0xa1e <getGateSensor>
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	71 f4       	brne	.+28     	; 0x26b6 <run+0x5e>
				runCase = 1;
				beep_long(100);
    269a:	84 e6       	ldi	r24, 0x64	; 100
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26a2:	2f ef       	ldi	r18, 0xFF	; 255
    26a4:	89 e6       	ldi	r24, 0x69	; 105
    26a6:	98 e1       	ldi	r25, 0x18	; 24
    26a8:	21 50       	subi	r18, 0x01	; 1
    26aa:	80 40       	sbci	r24, 0x00	; 0
    26ac:	90 40       	sbci	r25, 0x00	; 0
    26ae:	e1 f7       	brne	.-8      	; 0x26a8 <run+0x50>
    26b0:	00 c0       	rjmp	.+0      	; 0x26b2 <run+0x5a>
    26b2:	00 00       	nop
    26b4:	05 c0       	rjmp	.+10     	; 0x26c0 <run+0x68>
				_delay_ms(500);
				break;
			}
			if (SW4)
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    26bc:	88 23       	and	r24, r24
    26be:	49 f3       	breq	.-46     	; 0x2692 <run+0x3a>
				runCase = 1;
				break;
			}
			break;
			case 1:
			if ((getGateSensor() == 0) || SW4)
    26c0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <getGateSensor>
    26c4:	88 23       	and	r24, r24
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <run+0x7a>
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    26ce:	88 23       	and	r24, r24
    26d0:	b9 f3       	breq	.-18     	; 0x26c0 <run+0x68>
			{
				runCase = 2;
				cnt1 = 0;
    26d2:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    26d6:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
				cnt4 = 0;
    26da:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt4+0x1>
    26de:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt4>
    26e2:	07 c0       	rjmp	.+14     	; 0x26f2 <run+0x9a>
				break;
			}
			break;
			case 2:
			if( cnt1 < 3000 ) {
    26e4:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <cnt1>
    26e8:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <cnt1+0x1>
    26ec:	88 3b       	cpi	r24, 0xB8	; 184
    26ee:	9b 40       	sbci	r25, 0x0B	; 11
    26f0:	50 f4       	brcc	.+20     	; 0x2706 <run+0xae>
				handle(0);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(0,0);
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	7b d1       	rcall	.+758    	; 0x29fa <speed>
    2704:	ef cf       	rjmp	.-34     	; 0x26e4 <run+0x8c>
			}
			else {
				beep_long(100);
    2706:	84 e6       	ldi	r24, 0x64	; 100
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
				runCase = 11;
				cnt1 = 0;
    270e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    2712:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
				cnt4 = 0;
    2716:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt4+0x1>
    271a:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt4>
    271e:	10 c0       	rjmp	.+32     	; 0x2740 <run+0xe8>
			}
			break;
			case 11:
			/* time run = cnt4 */
			if(cnt4 > RunTimer){
    2720:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <cnt4>
    2724:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <cnt4+0x1>
    2728:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <RunTimer>
    272c:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <RunTimer+0x1>
    2730:	82 17       	cp	r24, r18
    2732:	93 07       	cpc	r25, r19
    2734:	28 f4       	brcc	.+10     	; 0x2740 <run+0xe8>
				runCase = 100;
				cnt1 = 0;
    2736:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    273a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    273e:	67 c0       	rjmp	.+206    	; 0x280e <run+0x1b6>
				break;
			}
			if(checkCrossLine()) {      
    2740:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <checkCrossLine>
    2744:	88 23       	and	r24, r24
    2746:	29 f0       	breq	.+10     	; 0x2752 <run+0xfa>
				runCase = 21;
				cnt1 = 0;
    2748:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    274c:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
				break;
    2750:	46 c0       	rjmp	.+140    	; 0x27de <run+0x186>
			}
			else {					
				switch (checkCrossHalfLine())
    2752:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <checkCrossHalfLine>
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	41 f0       	breq	.+16     	; 0x276a <run+0x112>
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	61 f4       	brne	.+24     	; 0x2776 <run+0x11e>
				{
					case HALF_LEFT_LINE:
					cnt1 = 0;
    275e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    2762:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
					runCase = 12;
    2766:	cd 2f       	mov	r28, r29
					break;
    2768:	07 c0       	rjmp	.+14     	; 0x2778 <run+0x120>
					
					case HALF_RIGHT_LINE:
					cnt1 = 0;
    276a:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    276e:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
					runCase = 13;
    2772:	c0 2f       	mov	r28, r16
					break;
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <run+0x120>
				runCase = 21;
				cnt1 = 0;
				break;
			}
			else {					
				switch (checkCrossHalfLine())
    2776:	c1 2f       	mov	r28, r17
					
					default :
					break;
				}
			}
			runForwardLine(speedRunForward);
    2778:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <speedRunForward>
    277c:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <speedRunForward+0x1>
    2780:	0e 94 3f 0b 	call	0x167e	; 0x167e <runForwardLine>
			break;
    2784:	6f cf       	rjmp	.-290    	; 0x2664 <run+0xc>
			case 12:
			/* Check of large turning to the right completion */
			if( checkCrossLine()) {   /* Cross line check even during turning */
    2786:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <checkCrossLine>
    278a:	88 23       	and	r24, r24
    278c:	29 f0       	breq	.+10     	; 0x2798 <run+0x140>
				runCase = 21;
				cnt1 = 0;
    278e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    2792:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
				break;
    2796:	23 c0       	rjmp	.+70     	; 0x27de <run+0x186>
			}
			runCase = leftLaneChange(speedChangeLanes);
    2798:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <speedChangeLanes>
    279c:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <speedChangeLanes+0x1>
    27a0:	c1 d9       	rcall	.-3198   	; 0x1b24 <leftLaneChange>
    27a2:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    27a4:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    27a8:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
			straightLine = 0;
    27ac:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
    27b0:	59 cf       	rjmp	.-334    	; 0x2664 <run+0xc>
			case 13:
			/* Check of large turning completion to the left */
			if( checkCrossLine() ) {   /* Cross line check even during large turn */
    27b2:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <checkCrossLine>
    27b6:	88 23       	and	r24, r24
    27b8:	29 f0       	breq	.+10     	; 0x27c4 <run+0x16c>
				runCase = 21;
				cnt1 = 0;
    27ba:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    27be:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
				break;
    27c2:	0d c0       	rjmp	.+26     	; 0x27de <run+0x186>
			}
			runCase = rightLaneChange(speedChangeLanes);
    27c4:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <speedChangeLanes>
    27c8:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <speedChangeLanes+0x1>
    27cc:	88 da       	rcall	.-2800   	; 0x1cde <rightLaneChange>
    27ce:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    27d0:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    27d4:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
			straightLine = 0;
    27d8:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
    27dc:	43 cf       	rjmp	.-378    	; 0x2664 <run+0xc>

			case 21:
			/* Process when first Cross line is detected */
			beep_long(100);
    27de:	84 e6       	ldi	r24, 0x64	; 100
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			runCase = turn90(speed90);
    27e6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <speed90>
    27ea:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <speed90+0x1>
    27ee:	24 dd       	rcall	.-1464   	; 0x2238 <turn90>
    27f0:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    27f2:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    27f6:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
			straightLine = 0;
    27fa:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <straightLine>
			break;
    27fe:	32 cf       	rjmp	.-412    	; 0x2664 <run+0xc>
			
			case 100:
			if (cnt1<500)
    2800:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <cnt1>
    2804:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <cnt1+0x1>
    2808:	84 3f       	cpi	r24, 0xF4	; 244
    280a:	91 40       	sbci	r25, 0x01	; 1
    280c:	30 f4       	brcc	.+12     	; 0x281a <run+0x1c2>
			{
				speed(0,0);
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	f1 d0       	rcall	.+482    	; 0x29fa <speed>
    2818:	f3 cf       	rjmp	.-26     	; 0x2800 <run+0x1a8>
			}
			else
			{
				speed(0,0);
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	eb d0       	rcall	.+470    	; 0x29fa <speed>
    2824:	80 e0       	ldi	r24, 0x00	; 0
				handle(0);
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    282c:	e9 cf       	rjmp	.-46     	; 0x2800 <run+0x1a8>
    282e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
			}
			break;
			default:
			runCase = 11;
			cnt1 = 0;
    2832:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
    2836:	74 cf       	rjmp	.-280    	; 0x2720 <run+0xc8>

00002838 <__vector_23>:
/*  Description: interrupt timer1 with*/
/*               cycle 1ms used to    */
/*               manage program       */
/*====================================*/
ISR (TIMER0_OVF_vect)
{
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	0f 92       	push	r0
    2840:	11 24       	eor	r1, r1
    2842:	0b b6       	in	r0, 0x3b	; 59
    2844:	0f 92       	push	r0
    2846:	2f 93       	push	r18
    2848:	3f 93       	push	r19
    284a:	4f 93       	push	r20
    284c:	5f 93       	push	r21
    284e:	6f 93       	push	r22
    2850:	7f 93       	push	r23
    2852:	8f 93       	push	r24
    2854:	9f 93       	push	r25
    2856:	af 93       	push	r26
    2858:	bf 93       	push	r27
    285a:	ef 93       	push	r30
    285c:	ff 93       	push	r31
	// Reinitialize Timer 1 value
	TCNT0 = 0x06;
    285e:	86 e0       	ldi	r24, 0x06	; 6
    2860:	86 bd       	out	0x26, r24	; 38
	
	virtual_timer();
    2862:	e4 d2       	rcall	.+1480   	; 0x2e2c <virtual_timer>
	beep_mod();
    2864:	0e 94 87 03 	call	0x70e	; 0x70e <beep_mod>
	update_input();
    2868:	0e 94 d6 04 	call	0x9ac	; 0x9ac <update_input>
	read_sensor();
    286c:	0e 94 ef 02 	call	0x5de	; 0x5de <read_sensor>
	led_put(sensor);
    2870:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    2874:	0e 94 36 07 	call	0xe6c	; 0xe6c <led_put>
}
    2878:	ff 91       	pop	r31
    287a:	ef 91       	pop	r30
    287c:	bf 91       	pop	r27
    287e:	af 91       	pop	r26
    2880:	9f 91       	pop	r25
    2882:	8f 91       	pop	r24
    2884:	7f 91       	pop	r23
    2886:	6f 91       	pop	r22
    2888:	5f 91       	pop	r21
    288a:	4f 91       	pop	r20
    288c:	3f 91       	pop	r19
    288e:	2f 91       	pop	r18
    2890:	0f 90       	pop	r0
    2892:	0b be       	out	0x3b, r0	; 59
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	0f 90       	pop	r0
    289a:	1f 90       	pop	r1
    289c:	18 95       	reti

0000289e <init>:
/*  Description: initial configuration*/
/*              for ATmega64 MCU      */
/*====================================*/
void atmega2560_init(){
	// Turn Off Analog Comparator: Off
	ACSR=0x80;
    289e:	80 e8       	ldi	r24, 0x80	; 128
    28a0:	80 bf       	out	0x30, r24	; 48
/*               2. Initialize system */
/*====================================*/
void init()
{
	atmega2560_init();
	handle_init();
    28a2:	0e 94 44 04 	call	0x888	; 0x888 <handle_init>
	speed_init();
    28a6:	76 d0       	rcall	.+236    	; 0x2994 <speed_init>
	timer_init();
    28a8:	a8 d2       	rcall	.+1360   	; 0x2dfa <timer_init>
    28aa:	0e 94 9b 02 	call	0x536	; 0x536 <adc_init>
	adc_init();
    28ae:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <beep_init>
	beep_init();
    28b2:	0e 94 28 07 	call	0xe50	; 0xe50 <led_init>
	led_init();
    28b6:	0e 94 b3 04 	call	0x966	; 0x966 <input_init>
	input_init();
    28ba:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <encoder_init>
	encoder_init();
    28be:	0e 94 8a 04 	call	0x914	; 0x914 <read_handle_center>
	read_handle_center ();
    28c2:	80 e0       	ldi	r24, 0x00	; 0
	handle(0);
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    28ca:	0e 94 75 03 	call	0x6ea	; 0x6ea <read_vcompare>
	read_vcompare();	//read v_compare values form eeprom
    28ce:	0c 94 59 05 	jmp	0xab2	; 0xab2 <LCD_Init>
	LCD_Init();
    28d2:	08 95       	ret

000028d4 <batteryCheck>:
    28d4:	cf 93       	push	r28
}
void batteryCheck()
{
    28d6:	df 93       	push	r29
	int volt = read_bat()*100/342;
    28d8:	0e 94 bd 02 	call	0x57a	; 0x57a <read_bat>
    28dc:	ec 01       	movw	r28, r24
	LCD_Gotoxy(3,0);
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	83 e0       	ldi	r24, 0x03	; 3
    28e2:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
	LCD_PutDec(volt);
    28e6:	84 e6       	ldi	r24, 0x64	; 100
    28e8:	8c 9f       	mul	r24, r28
    28ea:	90 01       	movw	r18, r0
    28ec:	8d 9f       	mul	r24, r29
    28ee:	30 0d       	add	r19, r0
    28f0:	11 24       	eor	r1, r1
    28f2:	36 95       	lsr	r19
    28f4:	27 95       	ror	r18
    28f6:	a1 ea       	ldi	r26, 0xA1	; 161
    28f8:	bf eb       	ldi	r27, 0xBF	; 191
    28fa:	04 d3       	rcall	.+1544   	; 0x2f04 <__umulhisi3>
    28fc:	88 0f       	add	r24, r24
    28fe:	89 2f       	mov	r24, r25
    2900:	88 1f       	adc	r24, r24
    2902:	99 0b       	sbc	r25, r25
    2904:	91 95       	neg	r25
    2906:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
	while(read_bat()<300){
    290a:	0d c0       	rjmp	.+26     	; 0x2926 <batteryCheck+0x52>
		beep_long(20);
    290c:	84 e1       	ldi	r24, 0x14	; 20
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2914:	2f ef       	ldi	r18, 0xFF	; 255
    2916:	81 ee       	ldi	r24, 0xE1	; 225
    2918:	94 e0       	ldi	r25, 0x04	; 4
    291a:	21 50       	subi	r18, 0x01	; 1
    291c:	80 40       	sbci	r24, 0x00	; 0
    291e:	90 40       	sbci	r25, 0x00	; 0
    2920:	e1 f7       	brne	.-8      	; 0x291a <batteryCheck+0x46>
    2922:	00 c0       	rjmp	.+0      	; 0x2924 <batteryCheck+0x50>
    2924:	00 00       	nop
void batteryCheck()
{
	int volt = read_bat()*100/342;
	LCD_Gotoxy(3,0);
	LCD_PutDec(volt);
	while(read_bat()<300){
    2926:	0e 94 bd 02 	call	0x57a	; 0x57a <read_bat>
    292a:	8c 32       	cpi	r24, 0x2C	; 44
    292c:	91 40       	sbci	r25, 0x01	; 1
    292e:	70 f3       	brcs	.-36     	; 0x290c <batteryCheck+0x38>
		beep_long(20);
		_delay_ms(100);
	}
}
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	08 95       	ret

00002936 <main>:
/*               2. Initialize system */
/*               3. Run application  */
/*====================================*/
int main()
{
	init();         // initialize system
    2936:	b3 df       	rcall	.-154    	; 0x289e <init>
	asm("sei");		// global interrupt enable
    2938:	78 94       	sei
	speed(0,0);
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	5b d0       	rcall	.+182    	; 0x29fa <speed>
	testing_flag = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <testing_flag>
	beep_long(20);	// speaker on during 20ms
    294a:	84 e1       	ldi	r24, 0x14	; 20
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	LCD_Gotoxy(3,0);
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
	LCD_Puts("EIU MCR");
    295a:	84 e7       	ldi	r24, 0x74	; 116
    295c:	92 e0       	ldi	r25, 0x02	; 2
    295e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_Puts>
	LCD_Gotoxy(2,1);
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
	LCD_Puts("EIU.EDU.VN");
    296a:	8c e7       	ldi	r24, 0x7C	; 124
    296c:	92 e0       	ldi	r25, 0x02	; 2
    296e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_Puts>
    2972:	2f ef       	ldi	r18, 0xFF	; 255
    2974:	8d e3       	ldi	r24, 0x3D	; 61
    2976:	99 e4       	ldi	r25, 0x49	; 73
    2978:	21 50       	subi	r18, 0x01	; 1
    297a:	80 40       	sbci	r24, 0x00	; 0
    297c:	90 40       	sbci	r25, 0x00	; 0
    297e:	e1 f7       	brne	.-8      	; 0x2978 <main+0x42>
    2980:	00 c0       	rjmp	.+0      	; 0x2982 <main+0x4c>
    2982:	00 00       	nop
	_delay_ms(1500);
	LCD_Clr();
    2984:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCD_Clr>
	batteryCheck();// if low battery the beep is on, battery must be charge
	test();
    2988:	a5 df       	rcall	.-182    	; 0x28d4 <batteryCheck>
    298a:	72 d0       	rcall	.+228    	; 0x2a70 <test>
	run();
    298c:	65 de       	rcall	.-822    	; 0x2658 <run>
    298e:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
}
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	08 95       	ret

00002994 <speed_init>:
/*  Description: configure hardware   */
/*               for PWM (speed)      */
/*               function             */
/*====================================*/
void speed_init(){
	DIR_DDR  |=  _BV(DIR_LEFT)|_BV(DIR_RIGHT)|_BV(DIR_STEERING);
    2994:	8d b1       	in	r24, 0x0d	; 13
    2996:	84 6c       	ori	r24, 0xC4	; 196
    2998:	8d b9       	out	0x0d, r24	; 13
	PWM_DDR  |=  _BV(PWM_LEFT)|_BV(PWM_RIGHT)|_BV(PWM_STEERING);
    299a:	8d b1       	in	r24, 0x0d	; 13
    299c:	88 63       	ori	r24, 0x38	; 56
    299e:	8d b9       	out	0x0d, r24	; 13
	BRAKE_DDR  |=  _BV(BRAKE_RIGHT)|_BV(BRAKE_LEFT)|_BV(BRAKE_STEERING);
    29a0:	84 b1       	in	r24, 0x04	; 4
    29a2:	87 60       	ori	r24, 0x07	; 7
    29a4:	84 b9       	out	0x04, r24	; 4
	BRAKE_POUT  |=  _BV(BRAKE_RIGHT)|_BV(BRAKE_LEFT)|_BV(BRAKE_STEERING);
    29a6:	85 b1       	in	r24, 0x05	; 5
    29a8:	87 60       	ori	r24, 0x07	; 7
    29aa:	85 b9       	out	0x05, r24	; 5
	// Timer3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=(1<<COM3A1) | (0<<COM3A0) | (1<<COM3B1) | (0<<COM3B0) | (1<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (1<<WGM30);
    29ac:	89 ea       	ldi	r24, 0xA9	; 169
    29ae:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
    29b2:	82 e0       	ldi	r24, 0x02	; 2
    29b4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	TCNT3H=0x00;
    29b8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
	TCNT3L=0x00;
    29bc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	ICR3H=0x00;
    29c0:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
	ICR3L=0x00;
    29c4:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	OCR3AH=0x00;
    29c8:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
	OCR3AL=0x00;
    29cc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	OCR3BH=0x00;
    29d0:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
	OCR3BL=0x00;
    29d4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
	OCR3CH=0x00;
    29d8:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
	OCR3CL=0x00;
    29dc:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
    29e0:	08 95       	ret

000029e2 <set_left_dir>:
/*  Parameter: _dir                   */
/*  Description: setting direction for*/
/*             left motor             */
/*====================================*/
void set_left_dir(unsigned char _dir){
	if(_dir == FORWARD)
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	11 f4       	brne	.+4      	; 0x29ea <set_left_dir+0x8>
		DIR_POUT |= _BV(DIR_LEFT);
    29e6:	72 9a       	sbi	0x0e, 2	; 14
    29e8:	08 95       	ret
	else
		DIR_POUT &= ~_BV(DIR_LEFT);
    29ea:	72 98       	cbi	0x0e, 2	; 14
    29ec:	08 95       	ret

000029ee <set_right_dir>:
/*  Parameter: _dir                   */
/*  Description: setting direction for*/
/*             right motor            */
/*====================================*/
void set_right_dir(unsigned char _dir){
	if(_dir == FORWARD)
    29ee:	81 30       	cpi	r24, 0x01	; 1
    29f0:	11 f4       	brne	.+4      	; 0x29f6 <set_right_dir+0x8>
		DIR_POUT |= _BV(DIR_RIGHT);
    29f2:	76 9a       	sbi	0x0e, 6	; 14
    29f4:	08 95       	ret
	else
		DIR_POUT &= ~_BV(DIR_RIGHT);
    29f6:	76 98       	cbi	0x0e, 6	; 14
    29f8:	08 95       	ret

000029fa <speed>:
/*  Function name: speed              */
/*  Parameter:_left_speed,_right_speed*/
/*  Description: setting speed for    */
/*             left and right motor   */
/*====================================*/
void speed(int _right_speed , int _left_speed){
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	ec 01       	movw	r28, r24
    2a04:	8b 01       	movw	r16, r22

	if(_left_speed >= 0){
    2a06:	77 23       	and	r23, r23
    2a08:	1c f0       	brlt	.+6      	; 0x2a10 <speed+0x16>
		set_left_dir(FORWARD);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	ea df       	rcall	.-44     	; 0x29e2 <set_left_dir>
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <speed+0x20>
	}else{
		_left_speed = -_left_speed;
    2a10:	11 95       	neg	r17
    2a12:	01 95       	neg	r16
    2a14:	11 09       	sbc	r17, r1
		set_left_dir(BACKWARD);
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	e4 df       	rcall	.-56     	; 0x29e2 <set_left_dir>
	}
	if(_right_speed >= 0){
    2a1a:	dd 23       	and	r29, r29
		set_right_dir(FORWARD);
    2a1c:	1c f0       	brlt	.+6      	; 0x2a24 <speed+0x2a>
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	e6 df       	rcall	.-52     	; 0x29ee <set_right_dir>
    2a22:	05 c0       	rjmp	.+10     	; 0x2a2e <speed+0x34>
	}else{
		_right_speed = -_right_speed;
    2a24:	d1 95       	neg	r29
    2a26:	c1 95       	neg	r28
		set_right_dir(BACKWARD);
    2a28:	d1 09       	sbc	r29, r1
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	e0 df       	rcall	.-64     	; 0x29ee <set_right_dir>
    2a2e:	0f 3f       	cpi	r16, 0xFF	; 255
    2a30:	11 05       	cpc	r17, r1
    2a32:	19 f0       	breq	.+6      	; 0x2a3a <speed+0x40>
    2a34:	14 f0       	brlt	.+4      	; 0x2a3a <speed+0x40>
    2a36:	0f ef       	ldi	r16, 0xFF	; 255
    2a38:	10 e0       	ldi	r17, 0x00	; 0
    2a3a:	cf 3f       	cpi	r28, 0xFF	; 255
    2a3c:	d1 05       	cpc	r29, r1
    2a3e:	19 f0       	breq	.+6      	; 0x2a46 <speed+0x4c>
    2a40:	14 f0       	brlt	.+4      	; 0x2a46 <speed+0x4c>
    2a42:	cf ef       	ldi	r28, 0xFF	; 255
    2a44:	d0 e0       	ldi	r29, 0x00	; 0
	if(_left_speed < MIN_SPEED)  _left_speed = 0;
	
	if(_right_speed > MAX_SPEED)  _right_speed = MAX_SPEED;
	if(_right_speed < MIN_SPEED)  _right_speed = 0;

	LEFT_SPEED  = _left_speed;
    2a46:	11 23       	and	r17, r17
    2a48:	14 f4       	brge	.+4      	; 0x2a4e <speed+0x54>
    2a4a:	00 e0       	ldi	r16, 0x00	; 0
    2a4c:	10 e0       	ldi	r17, 0x00	; 0
    2a4e:	10 93 99 00 	sts	0x0099, r17	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    2a52:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	RIGHT_SPEED = _right_speed;
    2a56:	dd 23       	and	r29, r29
    2a58:	14 f4       	brge	.+4      	; 0x2a5e <speed+0x64>
    2a5a:	c0 e0       	ldi	r28, 0x00	; 0
    2a5c:	d0 e0       	ldi	r29, 0x00	; 0
    2a5e:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    2a62:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
}
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	08 95       	ret

00002a70 <test>:
/*  Description: to implement cases   */
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
			break;
			case 4://the RGB light turns blue
			RGB(0,1,1);
			LCD_Clr();
			LCD_Gotoxy(0,0);
			LCD_PutDec(sensor_value[7]);
    2a74:	cc ed       	ldi	r28, 0xDC	; 220
    2a76:	d2 e0       	ldi	r29, 0x02	; 2
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
	while(testing_flag == 1){
    2a78:	b8 c1       	rjmp	.+880    	; 0x2dea <test+0x37a>
		switch(get_dipsw()){
    2a7a:	0e 94 0a 05 	call	0xa14	; 0xa14 <get_dipsw>
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <test+0x14>
    2a82:	91 c0       	rjmp	.+290    	; 0x2ba6 <test+0x136>
    2a84:	28 f4       	brcc	.+10     	; 0x2a90 <test+0x20>
    2a86:	88 23       	and	r24, r24
    2a88:	61 f0       	breq	.+24     	; 0x2aa2 <test+0x32>
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	e9 f1       	breq	.+122    	; 0x2b08 <test+0x98>
    2a8e:	79 c1       	rjmp	.+754    	; 0x2d82 <test+0x312>
    2a90:	84 30       	cpi	r24, 0x04	; 4
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <test+0x26>
    2a94:	f9 c0       	rjmp	.+498    	; 0x2c88 <test+0x218>
    2a96:	08 f4       	brcc	.+2      	; 0x2a9a <test+0x2a>
    2a98:	e7 c0       	rjmp	.+462    	; 0x2c68 <test+0x1f8>
    2a9a:	85 30       	cpi	r24, 0x05	; 5
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <test+0x30>
    2a9e:	45 c1       	rjmp	.+650    	; 0x2d2a <test+0x2ba>
    2aa0:	70 c1       	rjmp	.+736    	; 0x2d82 <test+0x312>
			case 0:
			RGB(1,0,0); //the RGB light turns red
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/*************line sensor calibration************/
			if (SW1){	// press SW1 to update black value
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2ab2:	88 23       	and	r24, r24
    2ab4:	31 f0       	breq	.+12     	; 0x2ac2 <test+0x52>
				update_black();
    2ab6:	0e 94 4f 03 	call	0x69e	; 0x69e <update_black>
				beep_long(20);
    2aba:	84 e1       	ldi	r24, 0x14	; 20
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW2){	// press SW2 to update white value
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2ac8:	88 23       	and	r24, r24
    2aca:	31 f0       	breq	.+12     	; 0x2ad8 <test+0x68>
				update_white();
    2acc:	0e 94 29 03 	call	0x652	; 0x652 <update_white>
				beep_long(100);
    2ad0:	84 e6       	ldi	r24, 0x64	; 100
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW3){	// press SW3 to save sensor value
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2ade:	88 23       	and	r24, r24
    2ae0:	31 f0       	breq	.+12     	; 0x2aee <test+0x7e>
				update_vcompare();
    2ae2:	0e 94 0a 03 	call	0x614	; 0x614 <update_vcompare>
				beep_long(300);
    2ae6:	8c e2       	ldi	r24, 0x2C	; 44
    2ae8:	91 e0       	ldi	r25, 0x01	; 1
    2aea:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW4){	// press SW4 to save sensor value
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2af4:	88 23       	and	r24, r24
    2af6:	09 f4       	brne	.+2      	; 0x2afa <test+0x8a>
    2af8:	78 c1       	rjmp	.+752    	; 0x2dea <test+0x37a>
				update_vcompare();
    2afa:	0e 94 0a 03 	call	0x614	; 0x614 <update_vcompare>
				beep_long(300);
    2afe:	8c e2       	ldi	r24, 0x2C	; 44
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2b06:	71 c1       	rjmp	.+738    	; 0x2dea <test+0x37a>
			}
			break;
			case 1:
			RGB(0,1,0);//the RGB light turns green
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/************test DC motor***********/
			if (SW2){			// press KEY1 to run left motor  backward
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b18:	88 23       	and	r24, r24
    2b1a:	61 f0       	breq	.+24     	; 0x2b34 <test+0xc4>
				speed(-250,0);
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	86 e0       	ldi	r24, 0x06	; 6
    2b22:	9f ef       	ldi	r25, 0xFF	; 255
    2b24:	6a df       	rcall	.-300    	; 0x29fa <speed>
    2b26:	8f e3       	ldi	r24, 0x3F	; 63
    2b28:	9c e9       	ldi	r25, 0x9C	; 156
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <test+0xba>
    2b2e:	00 c0       	rjmp	.+0      	; 0x2b30 <test+0xc0>
    2b30:	00 00       	nop
    2b32:	5b c1       	rjmp	.+694    	; 0x2dea <test+0x37a>
				_delay_ms(10);
				}else if(SW1){		// press KEY0 to run left motor forward
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b3a:	88 23       	and	r24, r24
    2b3c:	61 f0       	breq	.+24     	; 0x2b56 <test+0xe6>
				speed(250,0);
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	8a ef       	ldi	r24, 0xFA	; 250
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	59 df       	rcall	.-334    	; 0x29fa <speed>
    2b48:	8f e3       	ldi	r24, 0x3F	; 63
    2b4a:	9c e9       	ldi	r25, 0x9C	; 156
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <test+0xdc>
    2b50:	00 c0       	rjmp	.+0      	; 0x2b52 <test+0xe2>
    2b52:	00 00       	nop
    2b54:	4a c1       	rjmp	.+660    	; 0x2dea <test+0x37a>
				_delay_ms(10);
				}else if(SW4){		// press KEY3 to run right motor backward
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b5c:	88 23       	and	r24, r24
    2b5e:	61 f0       	breq	.+24     	; 0x2b78 <test+0x108>
				speed(0,-250);
    2b60:	66 e0       	ldi	r22, 0x06	; 6
    2b62:	7f ef       	ldi	r23, 0xFF	; 255
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	48 df       	rcall	.-368    	; 0x29fa <speed>
    2b6a:	8f e3       	ldi	r24, 0x3F	; 63
    2b6c:	9c e9       	ldi	r25, 0x9C	; 156
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <test+0xfe>
    2b72:	00 c0       	rjmp	.+0      	; 0x2b74 <test+0x104>
    2b74:	00 00       	nop
    2b76:	39 c1       	rjmp	.+626    	; 0x2dea <test+0x37a>
				_delay_ms(10);
				}else if(SW3){		// press KEY2 to run right motor forward
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b7e:	88 23       	and	r24, r24
    2b80:	61 f0       	breq	.+24     	; 0x2b9a <test+0x12a>
				speed(0, 250);
    2b82:	6a ef       	ldi	r22, 0xFA	; 250
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	37 df       	rcall	.-402    	; 0x29fa <speed>
    2b8c:	8f e3       	ldi	r24, 0x3F	; 63
    2b8e:	9c e9       	ldi	r25, 0x9C	; 156
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <test+0x120>
    2b94:	00 c0       	rjmp	.+0      	; 0x2b96 <test+0x126>
    2b96:	00 00       	nop
    2b98:	28 c1       	rjmp	.+592    	; 0x2dea <test+0x37a>
				_delay_ms(10);
				}else{				// stop
				speed(0,0);
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	2b df       	rcall	.-426    	; 0x29fa <speed>
    2ba4:	22 c1       	rjmp	.+580    	; 0x2dea <test+0x37a>
			}
			
			break;
			case 2:
			RGB(0,0,1);//the RGB light turns blue
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/************test RC servo***********/
			if (SW3){			// press SW3 to turn right
    2bb0:	82 e0       	ldi	r24, 0x02	; 2
    2bb2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2bb6:	88 23       	and	r24, r24
    2bb8:	b9 f0       	breq	.+46     	; 0x2be8 <test+0x178>
				handle_center -= 2;
    2bba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <handle_center>
    2bbe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <handle_center+0x1>
    2bc2:	02 97       	sbiw	r24, 0x02	; 2
    2bc4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
    2bc8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
				handle(0);
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2bd4:	9f ef       	ldi	r25, 0xFF	; 255
    2bd6:	20 e7       	ldi	r18, 0x70	; 112
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	91 50       	subi	r25, 0x01	; 1
    2bdc:	20 40       	sbci	r18, 0x00	; 0
    2bde:	80 40       	sbci	r24, 0x00	; 0
    2be0:	e1 f7       	brne	.-8      	; 0x2bda <test+0x16a>
    2be2:	00 c0       	rjmp	.+0      	; 0x2be4 <test+0x174>
    2be4:	00 00       	nop
    2be6:	01 c1       	rjmp	.+514    	; 0x2dea <test+0x37a>
				_delay_ms(50);
				}else if(SW2){	// press SW2 to turn left
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2bee:	88 23       	and	r24, r24
    2bf0:	b9 f0       	breq	.+46     	; 0x2c20 <test+0x1b0>
				handle_center += 2;
    2bf2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <handle_center>
    2bf6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <handle_center+0x1>
    2bfa:	02 96       	adiw	r24, 0x02	; 2
    2bfc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
    2c00:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
				handle(0);
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2c0c:	9f ef       	ldi	r25, 0xFF	; 255
    2c0e:	20 e7       	ldi	r18, 0x70	; 112
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	91 50       	subi	r25, 0x01	; 1
    2c14:	20 40       	sbci	r18, 0x00	; 0
    2c16:	80 40       	sbci	r24, 0x00	; 0
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <test+0x1a2>
    2c1a:	00 c0       	rjmp	.+0      	; 0x2c1c <test+0x1ac>
    2c1c:	00 00       	nop
    2c1e:	e5 c0       	rjmp	.+458    	; 0x2dea <test+0x37a>
				_delay_ms(50);
			}
			else if (SW1||SW4)
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2c26:	81 11       	cpse	r24, r1
    2c28:	06 c0       	rjmp	.+12     	; 0x2c36 <test+0x1c6>
    2c2a:	83 e0       	ldi	r24, 0x03	; 3
    2c2c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2c30:	88 23       	and	r24, r24
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <test+0x1c6>
    2c34:	da c0       	rjmp	.+436    	; 0x2dea <test+0x37a>
			{
				save_handle_center();
    2c36:	0e 94 81 04 	call	0x902	; 0x902 <save_handle_center>
    2c3a:	9f ef       	ldi	r25, 0xFF	; 255
    2c3c:	23 ed       	ldi	r18, 0xD3	; 211
    2c3e:	80 e3       	ldi	r24, 0x30	; 48
    2c40:	91 50       	subi	r25, 0x01	; 1
    2c42:	20 40       	sbci	r18, 0x00	; 0
    2c44:	80 40       	sbci	r24, 0x00	; 0
    2c46:	e1 f7       	brne	.-8      	; 0x2c40 <test+0x1d0>
    2c48:	00 c0       	rjmp	.+0      	; 0x2c4a <test+0x1da>
    2c4a:	00 00       	nop
				_delay_ms(1000);
				beep_long(200);
    2c4c:	88 ec       	ldi	r24, 0xC8	; 200
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2c54:	9f ef       	ldi	r25, 0xFF	; 255
    2c56:	23 ec       	ldi	r18, 0xC3	; 195
    2c58:	89 e0       	ldi	r24, 0x09	; 9
    2c5a:	91 50       	subi	r25, 0x01	; 1
    2c5c:	20 40       	sbci	r18, 0x00	; 0
    2c5e:	80 40       	sbci	r24, 0x00	; 0
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <test+0x1ea>
    2c62:	00 c0       	rjmp	.+0      	; 0x2c64 <test+0x1f4>
    2c64:	00 00       	nop
    2c66:	c1 c0       	rjmp	.+386    	; 0x2dea <test+0x37a>
				_delay_ms(200);
			}
			break;
			case 3://test encoder
			RGB(1,1,0);//the RGB light turns yellow
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	61 e0       	ldi	r22, 0x01	; 1
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			LCD_Gotoxy(0,0);
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(distance1);
    2c7a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <distance1>
    2c7e:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <distance1+0x1>
    2c82:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			/************test Encoder***********/
			break;
    2c86:	b1 c0       	rjmp	.+354    	; 0x2dea <test+0x37a>
			case 4://the RGB light turns blue
			RGB(0,1,1);
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			LCD_Clr();
    2c92:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCD_Clr>
			LCD_Gotoxy(0,0);
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[7]);
    2c9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ca0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ca2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(4,0);
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	84 e0       	ldi	r24, 0x04	; 4
    2caa:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[6]);
    2cae:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cb2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(8,0);
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	88 e0       	ldi	r24, 0x08	; 8
    2cba:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[5]);
    2cbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(12,0);
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	8c e0       	ldi	r24, 0x0C	; 12
    2cca:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[4]);
    2cce:	88 85       	ldd	r24, Y+8	; 0x08
    2cd0:	99 85       	ldd	r25, Y+9	; 0x09
    2cd2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(0,1);
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[3]);
    2cde:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(4,1);
    2ce6:	61 e0       	ldi	r22, 0x01	; 1
    2ce8:	84 e0       	ldi	r24, 0x04	; 4
    2cea:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[2]);
    2cee:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(8,1);
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	88 e0       	ldi	r24, 0x08	; 8
    2cfa:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[1]);
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(12,1);
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	8c e0       	ldi	r24, 0x0C	; 12
    2d0a:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[0]);
    2d0e:	88 81       	ld	r24, Y
    2d10:	99 81       	ldd	r25, Y+1	; 0x01
    2d12:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
    2d16:	9f ef       	ldi	r25, 0xFF	; 255
    2d18:	21 ee       	ldi	r18, 0xE1	; 225
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
    2d1c:	91 50       	subi	r25, 0x01	; 1
    2d1e:	20 40       	sbci	r18, 0x00	; 0
    2d20:	80 40       	sbci	r24, 0x00	; 0
    2d22:	e1 f7       	brne	.-8      	; 0x2d1c <test+0x2ac>
    2d24:	00 c0       	rjmp	.+0      	; 0x2d26 <test+0x2b6>
    2d26:	00 00       	nop
    2d28:	60 c0       	rjmp	.+192    	; 0x2dea <test+0x37a>
			_delay_ms(100);
			//RYGB(0,100,0,0);
			break;
			case 5:
			RGB(1,0,1);//the RGB light turns purple
    2d2a:	41 e0       	ldi	r20, 0x01	; 1
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			if (SW3){			// press SW3 to turn right
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d3a:	88 23       	and	r24, r24
    2d3c:	71 f0       	breq	.+28     	; 0x2d5a <test+0x2ea>
				
				handle(35);
    2d3e:	83 e2       	ldi	r24, 0x23	; 35
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2d46:	9f ef       	ldi	r25, 0xFF	; 255
    2d48:	20 e7       	ldi	r18, 0x70	; 112
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	91 50       	subi	r25, 0x01	; 1
    2d4e:	20 40       	sbci	r18, 0x00	; 0
    2d50:	80 40       	sbci	r24, 0x00	; 0
    2d52:	e1 f7       	brne	.-8      	; 0x2d4c <test+0x2dc>
    2d54:	00 c0       	rjmp	.+0      	; 0x2d56 <test+0x2e6>
    2d56:	00 00       	nop
    2d58:	48 c0       	rjmp	.+144    	; 0x2dea <test+0x37a>
				_delay_ms(50);
				}else if(SW2){	// press SW2 to turn left
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d60:	88 23       	and	r24, r24
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <test+0x2f6>
    2d64:	42 c0       	rjmp	.+132    	; 0x2dea <test+0x37a>
				
				handle(-35);
    2d66:	8d ed       	ldi	r24, 0xDD	; 221
    2d68:	9f ef       	ldi	r25, 0xFF	; 255
    2d6a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2d6e:	9f e7       	ldi	r25, 0x7F	; 127
    2d70:	22 e3       	ldi	r18, 0x32	; 50
    2d72:	82 e0       	ldi	r24, 0x02	; 2
    2d74:	91 50       	subi	r25, 0x01	; 1
    2d76:	20 40       	sbci	r18, 0x00	; 0
    2d78:	80 40       	sbci	r24, 0x00	; 0
    2d7a:	e1 f7       	brne	.-8      	; 0x2d74 <test+0x304>
    2d7c:	00 c0       	rjmp	.+0      	; 0x2d7e <test+0x30e>
    2d7e:	00 00       	nop
    2d80:	34 c0       	rjmp	.+104    	; 0x2dea <test+0x37a>
				_delay_ms(45);
			}
			
			break;
			default:// go to run.c
			RGB(0,0,0);
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			if (SW1)
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d92:	88 23       	and	r24, r24
    2d94:	39 f0       	breq	.+14     	; 0x2da4 <test+0x334>
			{
				
				testing_flag = 0;
    2d96:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2d9a:	88 ec       	ldi	r24, 0xC8	; 200
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2da2:	23 c0       	rjmp	.+70     	; 0x2dea <test+0x37a>
			}
			else if(SW4)
    2da4:	83 e0       	ldi	r24, 0x03	; 3
    2da6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2daa:	88 23       	and	r24, r24
    2dac:	39 f0       	breq	.+14     	; 0x2dbc <test+0x34c>
			{
				testing_flag = 0;
    2dae:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2db2:	88 ec       	ldi	r24, 0xC8	; 200
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2dba:	17 c0       	rjmp	.+46     	; 0x2dea <test+0x37a>
			}
			else if (SW2)
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2dc2:	88 23       	and	r24, r24
    2dc4:	39 f0       	breq	.+14     	; 0x2dd4 <test+0x364>
			{
				
				testing_flag = 0;
    2dc6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2dca:	88 ec       	ldi	r24, 0xC8	; 200
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2dd2:	0b c0       	rjmp	.+22     	; 0x2dea <test+0x37a>
			}
			else if(SW3)
    2dd4:	82 e0       	ldi	r24, 0x02	; 2
    2dd6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2dda:	88 23       	and	r24, r24
    2ddc:	31 f0       	breq	.+12     	; 0x2dea <test+0x37a>
			{
				testing_flag = 0;
    2dde:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2de2:	88 ec       	ldi	r24, 0xC8	; 200
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
	while(testing_flag == 1){
    2dea:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <testing_flag>
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <test+0x384>
    2df2:	43 ce       	rjmp	.-890    	; 0x2a7a <test+0xa>
			
			break;
			
		}
	}
}
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	08 95       	ret

00002dfa <timer_init>:
/*  Description: configure hardware   */
/*               for timer function   */
/*====================================*/
void timer_init()
{	
	cnt1 = cnt2 = cnt3 = cnt4 = 0;
    2dfa:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt4+0x1>
    2dfe:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt4>
    2e02:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <cnt3+0x1>
    2e06:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <cnt3>
    2e0a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <cnt2+0x1>
    2e0e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <cnt2>
    2e12:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <cnt1+0x1>
    2e16:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <cnt1>
// Clock value: 250.000 kHz
// Mode: Normal top=0xFF
// OC0A output: Disconnected
// OC0B output: Disconnected
// Timer Period: 1 ms
TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
    2e1a:	14 bc       	out	0x24, r1	; 36
TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
    2e1c:	83 e0       	ldi	r24, 0x03	; 3
    2e1e:	85 bd       	out	0x25, r24	; 37
TCNT0=0x06;
    2e20:	86 e0       	ldi	r24, 0x06	; 6
    2e22:	86 bd       	out	0x26, r24	; 38
TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
    2e2a:	08 95       	ret

00002e2c <virtual_timer>:
/*  Description: virtual timer        */
/*           virtual delay to use in  */
/*           algorithm                */ 
/*====================================*/
void virtual_timer(){
	cnt1 ++;
    2e2c:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <cnt1>
    2e30:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <cnt1+0x1>
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <cnt1+0x1>
    2e3a:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <cnt1>
	cnt2 ++;
    2e3e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <cnt2>
    2e42:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <cnt2+0x1>
    2e46:	01 96       	adiw	r24, 0x01	; 1
    2e48:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <cnt2+0x1>
    2e4c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <cnt2>
	cnt4 ++;
    2e50:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <cnt4>
    2e54:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <cnt4+0x1>
    2e58:	01 96       	adiw	r24, 0x01	; 1
    2e5a:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <cnt4+0x1>
    2e5e:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <cnt4>
	if (curveFlag == 0)
    2e62:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <curveFlag>
    2e66:	81 11       	cpse	r24, r1
    2e68:	0a c0       	rjmp	.+20     	; 0x2e7e <virtual_timer+0x52>
	{
		cnt3++;
    2e6a:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <cnt3>
    2e6e:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <cnt3+0x1>
    2e72:	01 96       	adiw	r24, 0x01	; 1
    2e74:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <cnt3+0x1>
    2e78:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <cnt3>
    2e7c:	15 c0       	rjmp	.+42     	; 0x2ea8 <virtual_timer+0x7c>
	}
	else if (curveFlag == 1)		
    2e7e:	81 30       	cpi	r24, 0x01	; 1
    2e80:	99 f4       	brne	.+38     	; 0x2ea8 <virtual_timer+0x7c>
	{
		cnt3 = 0;
    2e82:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <cnt3+0x1>
    2e86:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <cnt3>
		brakeCurve--;	
    2e8a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <brakeCurve>
    2e8e:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <brakeCurve+0x1>
    2e92:	01 97       	sbiw	r24, 0x01	; 1
		if (brakeCurve < 10)
    2e94:	8a 30       	cpi	r24, 0x0A	; 10
    2e96:	91 05       	cpc	r25, r1
    2e98:	a8 f4       	brcc	.+42     	; 0x2ec4 <virtual_timer+0x98>
		{
			brakeCurve = 10;
    2e9a:	8a e0       	ldi	r24, 0x0A	; 10
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <brakeCurve+0x1>
    2ea2:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <brakeCurve>
    2ea6:	08 95       	ret
		}	
	}
	if (cnt3 > 300)
    2ea8:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <cnt3>
    2eac:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <cnt3+0x1>
    2eb0:	8d 32       	cpi	r24, 0x2D	; 45
    2eb2:	91 40       	sbci	r25, 0x01	; 1
    2eb4:	58 f0       	brcs	.+22     	; 0x2ecc <virtual_timer+0xa0>
	{
		brakeCurve = 81;
    2eb6:	81 e5       	ldi	r24, 0x51	; 81
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <brakeCurve+0x1>
    2ebe:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <brakeCurve>
// 	{
// 		velocity = distance2;
// 		cnt3 = 0;
// 		distance2 =  0;
// 	}
}
    2ec2:	08 95       	ret
		cnt3++;
	}
	else if (curveFlag == 1)		
	{
		cnt3 = 0;
		brakeCurve--;	
    2ec4:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <brakeCurve+0x1>
    2ec8:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <brakeCurve>
    2ecc:	08 95       	ret

00002ece <__divmodhi4>:
    2ece:	97 fb       	bst	r25, 7
    2ed0:	07 2e       	mov	r0, r23
    2ed2:	16 f4       	brtc	.+4      	; 0x2ed8 <__divmodhi4+0xa>
    2ed4:	00 94       	com	r0
    2ed6:	06 d0       	rcall	.+12     	; 0x2ee4 <__divmodhi4_neg1>
    2ed8:	77 fd       	sbrc	r23, 7
    2eda:	08 d0       	rcall	.+16     	; 0x2eec <__divmodhi4_neg2>
    2edc:	22 d0       	rcall	.+68     	; 0x2f22 <__udivmodhi4>
    2ede:	07 fc       	sbrc	r0, 7
    2ee0:	05 d0       	rcall	.+10     	; 0x2eec <__divmodhi4_neg2>
    2ee2:	3e f4       	brtc	.+14     	; 0x2ef2 <__divmodhi4_exit>

00002ee4 <__divmodhi4_neg1>:
    2ee4:	90 95       	com	r25
    2ee6:	81 95       	neg	r24
    2ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eea:	08 95       	ret

00002eec <__divmodhi4_neg2>:
    2eec:	70 95       	com	r23
    2eee:	61 95       	neg	r22
    2ef0:	7f 4f       	sbci	r23, 0xFF	; 255

00002ef2 <__divmodhi4_exit>:
    2ef2:	08 95       	ret

00002ef4 <__tablejump2__>:
    2ef4:	ee 0f       	add	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	88 1f       	adc	r24, r24
    2efa:	8b bf       	out	0x3b, r24	; 59
    2efc:	07 90       	elpm	r0, Z+
    2efe:	f6 91       	elpm	r31, Z
    2f00:	e0 2d       	mov	r30, r0
    2f02:	19 94       	eijmp

00002f04 <__umulhisi3>:
    2f04:	a2 9f       	mul	r26, r18
    2f06:	b0 01       	movw	r22, r0
    2f08:	b3 9f       	mul	r27, r19
    2f0a:	c0 01       	movw	r24, r0
    2f0c:	a3 9f       	mul	r26, r19
    2f0e:	70 0d       	add	r23, r0
    2f10:	81 1d       	adc	r24, r1
    2f12:	11 24       	eor	r1, r1
    2f14:	91 1d       	adc	r25, r1
    2f16:	b2 9f       	mul	r27, r18
    2f18:	70 0d       	add	r23, r0
    2f1a:	81 1d       	adc	r24, r1
    2f1c:	11 24       	eor	r1, r1
    2f1e:	91 1d       	adc	r25, r1
    2f20:	08 95       	ret

00002f22 <__udivmodhi4>:
    2f22:	aa 1b       	sub	r26, r26
    2f24:	bb 1b       	sub	r27, r27
    2f26:	51 e1       	ldi	r21, 0x11	; 17
    2f28:	07 c0       	rjmp	.+14     	; 0x2f38 <__udivmodhi4_ep>

00002f2a <__udivmodhi4_loop>:
    2f2a:	aa 1f       	adc	r26, r26
    2f2c:	bb 1f       	adc	r27, r27
    2f2e:	a6 17       	cp	r26, r22
    2f30:	b7 07       	cpc	r27, r23
    2f32:	10 f0       	brcs	.+4      	; 0x2f38 <__udivmodhi4_ep>
    2f34:	a6 1b       	sub	r26, r22
    2f36:	b7 0b       	sbc	r27, r23

00002f38 <__udivmodhi4_ep>:
    2f38:	88 1f       	adc	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	5a 95       	dec	r21
    2f3e:	a9 f7       	brne	.-22     	; 0x2f2a <__udivmodhi4_loop>
    2f40:	80 95       	com	r24
    2f42:	90 95       	com	r25
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	08 95       	ret

00002f4a <malloc>:
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	82 30       	cpi	r24, 0x02	; 2
    2f54:	91 05       	cpc	r25, r1
    2f56:	10 f4       	brcc	.+4      	; 0x2f5c <malloc+0x12>
    2f58:	82 e0       	ldi	r24, 0x02	; 2
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <__flp>
    2f60:	f0 91 56 03 	lds	r31, 0x0356	; 0x800356 <__flp+0x1>
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	a0 e0       	ldi	r26, 0x00	; 0
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	30 97       	sbiw	r30, 0x00	; 0
    2f6e:	19 f1       	breq	.+70     	; 0x2fb6 <malloc+0x6c>
    2f70:	40 81       	ld	r20, Z
    2f72:	51 81       	ldd	r21, Z+1	; 0x01
    2f74:	02 81       	ldd	r16, Z+2	; 0x02
    2f76:	13 81       	ldd	r17, Z+3	; 0x03
    2f78:	48 17       	cp	r20, r24
    2f7a:	59 07       	cpc	r21, r25
    2f7c:	c8 f0       	brcs	.+50     	; 0x2fb0 <malloc+0x66>
    2f7e:	84 17       	cp	r24, r20
    2f80:	95 07       	cpc	r25, r21
    2f82:	69 f4       	brne	.+26     	; 0x2f9e <malloc+0x54>
    2f84:	10 97       	sbiw	r26, 0x00	; 0
    2f86:	31 f0       	breq	.+12     	; 0x2f94 <malloc+0x4a>
    2f88:	12 96       	adiw	r26, 0x02	; 2
    2f8a:	0c 93       	st	X, r16
    2f8c:	12 97       	sbiw	r26, 0x02	; 2
    2f8e:	13 96       	adiw	r26, 0x03	; 3
    2f90:	1c 93       	st	X, r17
    2f92:	27 c0       	rjmp	.+78     	; 0x2fe2 <malloc+0x98>
    2f94:	00 93 55 03 	sts	0x0355, r16	; 0x800355 <__flp>
    2f98:	10 93 56 03 	sts	0x0356, r17	; 0x800356 <__flp+0x1>
    2f9c:	22 c0       	rjmp	.+68     	; 0x2fe2 <malloc+0x98>
    2f9e:	21 15       	cp	r18, r1
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	19 f0       	breq	.+6      	; 0x2faa <malloc+0x60>
    2fa4:	42 17       	cp	r20, r18
    2fa6:	53 07       	cpc	r21, r19
    2fa8:	18 f4       	brcc	.+6      	; 0x2fb0 <malloc+0x66>
    2faa:	9a 01       	movw	r18, r20
    2fac:	bd 01       	movw	r22, r26
    2fae:	ef 01       	movw	r28, r30
    2fb0:	df 01       	movw	r26, r30
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	db cf       	rjmp	.-74     	; 0x2f6c <malloc+0x22>
    2fb6:	21 15       	cp	r18, r1
    2fb8:	31 05       	cpc	r19, r1
    2fba:	f9 f0       	breq	.+62     	; 0x2ffa <malloc+0xb0>
    2fbc:	28 1b       	sub	r18, r24
    2fbe:	39 0b       	sbc	r19, r25
    2fc0:	24 30       	cpi	r18, 0x04	; 4
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	80 f4       	brcc	.+32     	; 0x2fe6 <malloc+0x9c>
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	61 15       	cp	r22, r1
    2fcc:	71 05       	cpc	r23, r1
    2fce:	21 f0       	breq	.+8      	; 0x2fd8 <malloc+0x8e>
    2fd0:	fb 01       	movw	r30, r22
    2fd2:	93 83       	std	Z+3, r25	; 0x03
    2fd4:	82 83       	std	Z+2, r24	; 0x02
    2fd6:	04 c0       	rjmp	.+8      	; 0x2fe0 <malloc+0x96>
    2fd8:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <__flp+0x1>
    2fdc:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <__flp>
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	32 96       	adiw	r30, 0x02	; 2
    2fe4:	44 c0       	rjmp	.+136    	; 0x306e <malloc+0x124>
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e2 0f       	add	r30, r18
    2fea:	f3 1f       	adc	r31, r19
    2fec:	81 93       	st	Z+, r24
    2fee:	91 93       	st	Z+, r25
    2ff0:	22 50       	subi	r18, 0x02	; 2
    2ff2:	31 09       	sbc	r19, r1
    2ff4:	39 83       	std	Y+1, r19	; 0x01
    2ff6:	28 83       	st	Y, r18
    2ff8:	3a c0       	rjmp	.+116    	; 0x306e <malloc+0x124>
    2ffa:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <__brkval>
    2ffe:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <__brkval+0x1>
    3002:	23 2b       	or	r18, r19
    3004:	41 f4       	brne	.+16     	; 0x3016 <malloc+0xcc>
    3006:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    300a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    300e:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <__brkval+0x1>
    3012:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <__brkval>
    3016:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    301a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    301e:	21 15       	cp	r18, r1
    3020:	31 05       	cpc	r19, r1
    3022:	41 f4       	brne	.+16     	; 0x3034 <malloc+0xea>
    3024:	2d b7       	in	r18, 0x3d	; 61
    3026:	3e b7       	in	r19, 0x3e	; 62
    3028:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    302c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3030:	24 1b       	sub	r18, r20
    3032:	35 0b       	sbc	r19, r21
    3034:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <__brkval>
    3038:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <__brkval+0x1>
    303c:	e2 17       	cp	r30, r18
    303e:	f3 07       	cpc	r31, r19
    3040:	a0 f4       	brcc	.+40     	; 0x306a <malloc+0x120>
    3042:	2e 1b       	sub	r18, r30
    3044:	3f 0b       	sbc	r19, r31
    3046:	28 17       	cp	r18, r24
    3048:	39 07       	cpc	r19, r25
    304a:	78 f0       	brcs	.+30     	; 0x306a <malloc+0x120>
    304c:	ac 01       	movw	r20, r24
    304e:	4e 5f       	subi	r20, 0xFE	; 254
    3050:	5f 4f       	sbci	r21, 0xFF	; 255
    3052:	24 17       	cp	r18, r20
    3054:	35 07       	cpc	r19, r21
    3056:	48 f0       	brcs	.+18     	; 0x306a <malloc+0x120>
    3058:	4e 0f       	add	r20, r30
    305a:	5f 1f       	adc	r21, r31
    305c:	50 93 54 03 	sts	0x0354, r21	; 0x800354 <__brkval+0x1>
    3060:	40 93 53 03 	sts	0x0353, r20	; 0x800353 <__brkval>
    3064:	81 93       	st	Z+, r24
    3066:	91 93       	st	Z+, r25
    3068:	02 c0       	rjmp	.+4      	; 0x306e <malloc+0x124>
    306a:	e0 e0       	ldi	r30, 0x00	; 0
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	cf 01       	movw	r24, r30
    3070:	df 91       	pop	r29
    3072:	cf 91       	pop	r28
    3074:	1f 91       	pop	r17
    3076:	0f 91       	pop	r16
    3078:	08 95       	ret

0000307a <free>:
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	09 f4       	brne	.+2      	; 0x3084 <free+0xa>
    3082:	81 c0       	rjmp	.+258    	; 0x3186 <free+0x10c>
    3084:	fc 01       	movw	r30, r24
    3086:	32 97       	sbiw	r30, 0x02	; 2
    3088:	13 82       	std	Z+3, r1	; 0x03
    308a:	12 82       	std	Z+2, r1	; 0x02
    308c:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <__flp>
    3090:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <__flp+0x1>
    3094:	10 97       	sbiw	r26, 0x00	; 0
    3096:	81 f4       	brne	.+32     	; 0x30b8 <free+0x3e>
    3098:	20 81       	ld	r18, Z
    309a:	31 81       	ldd	r19, Z+1	; 0x01
    309c:	82 0f       	add	r24, r18
    309e:	93 1f       	adc	r25, r19
    30a0:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <__brkval>
    30a4:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <__brkval+0x1>
    30a8:	28 17       	cp	r18, r24
    30aa:	39 07       	cpc	r19, r25
    30ac:	51 f5       	brne	.+84     	; 0x3102 <free+0x88>
    30ae:	f0 93 54 03 	sts	0x0354, r31	; 0x800354 <__brkval+0x1>
    30b2:	e0 93 53 03 	sts	0x0353, r30	; 0x800353 <__brkval>
    30b6:	67 c0       	rjmp	.+206    	; 0x3186 <free+0x10c>
    30b8:	ed 01       	movw	r28, r26
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	ce 17       	cp	r28, r30
    30c0:	df 07       	cpc	r29, r31
    30c2:	40 f4       	brcc	.+16     	; 0x30d4 <free+0x5a>
    30c4:	4a 81       	ldd	r20, Y+2	; 0x02
    30c6:	5b 81       	ldd	r21, Y+3	; 0x03
    30c8:	9e 01       	movw	r18, r28
    30ca:	41 15       	cp	r20, r1
    30cc:	51 05       	cpc	r21, r1
    30ce:	f1 f0       	breq	.+60     	; 0x310c <free+0x92>
    30d0:	ea 01       	movw	r28, r20
    30d2:	f5 cf       	rjmp	.-22     	; 0x30be <free+0x44>
    30d4:	d3 83       	std	Z+3, r29	; 0x03
    30d6:	c2 83       	std	Z+2, r28	; 0x02
    30d8:	40 81       	ld	r20, Z
    30da:	51 81       	ldd	r21, Z+1	; 0x01
    30dc:	84 0f       	add	r24, r20
    30de:	95 1f       	adc	r25, r21
    30e0:	c8 17       	cp	r28, r24
    30e2:	d9 07       	cpc	r29, r25
    30e4:	59 f4       	brne	.+22     	; 0x30fc <free+0x82>
    30e6:	88 81       	ld	r24, Y
    30e8:	99 81       	ldd	r25, Y+1	; 0x01
    30ea:	84 0f       	add	r24, r20
    30ec:	95 1f       	adc	r25, r21
    30ee:	02 96       	adiw	r24, 0x02	; 2
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	9b 81       	ldd	r25, Y+3	; 0x03
    30f8:	93 83       	std	Z+3, r25	; 0x03
    30fa:	82 83       	std	Z+2, r24	; 0x02
    30fc:	21 15       	cp	r18, r1
    30fe:	31 05       	cpc	r19, r1
    3100:	29 f4       	brne	.+10     	; 0x310c <free+0x92>
    3102:	f0 93 56 03 	sts	0x0356, r31	; 0x800356 <__flp+0x1>
    3106:	e0 93 55 03 	sts	0x0355, r30	; 0x800355 <__flp>
    310a:	3d c0       	rjmp	.+122    	; 0x3186 <free+0x10c>
    310c:	e9 01       	movw	r28, r18
    310e:	fb 83       	std	Y+3, r31	; 0x03
    3110:	ea 83       	std	Y+2, r30	; 0x02
    3112:	49 91       	ld	r20, Y+
    3114:	59 91       	ld	r21, Y+
    3116:	c4 0f       	add	r28, r20
    3118:	d5 1f       	adc	r29, r21
    311a:	ec 17       	cp	r30, r28
    311c:	fd 07       	cpc	r31, r29
    311e:	61 f4       	brne	.+24     	; 0x3138 <free+0xbe>
    3120:	80 81       	ld	r24, Z
    3122:	91 81       	ldd	r25, Z+1	; 0x01
    3124:	84 0f       	add	r24, r20
    3126:	95 1f       	adc	r25, r21
    3128:	02 96       	adiw	r24, 0x02	; 2
    312a:	e9 01       	movw	r28, r18
    312c:	99 83       	std	Y+1, r25	; 0x01
    312e:	88 83       	st	Y, r24
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	9b 83       	std	Y+3, r25	; 0x03
    3136:	8a 83       	std	Y+2, r24	; 0x02
    3138:	e0 e0       	ldi	r30, 0x00	; 0
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	12 96       	adiw	r26, 0x02	; 2
    313e:	8d 91       	ld	r24, X+
    3140:	9c 91       	ld	r25, X
    3142:	13 97       	sbiw	r26, 0x03	; 3
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	19 f0       	breq	.+6      	; 0x314e <free+0xd4>
    3148:	fd 01       	movw	r30, r26
    314a:	dc 01       	movw	r26, r24
    314c:	f7 cf       	rjmp	.-18     	; 0x313c <free+0xc2>
    314e:	8d 91       	ld	r24, X+
    3150:	9c 91       	ld	r25, X
    3152:	11 97       	sbiw	r26, 0x01	; 1
    3154:	9d 01       	movw	r18, r26
    3156:	2e 5f       	subi	r18, 0xFE	; 254
    3158:	3f 4f       	sbci	r19, 0xFF	; 255
    315a:	82 0f       	add	r24, r18
    315c:	93 1f       	adc	r25, r19
    315e:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <__brkval>
    3162:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <__brkval+0x1>
    3166:	28 17       	cp	r18, r24
    3168:	39 07       	cpc	r19, r25
    316a:	69 f4       	brne	.+26     	; 0x3186 <free+0x10c>
    316c:	30 97       	sbiw	r30, 0x00	; 0
    316e:	29 f4       	brne	.+10     	; 0x317a <free+0x100>
    3170:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <__flp+0x1>
    3174:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <__flp>
    3178:	02 c0       	rjmp	.+4      	; 0x317e <free+0x104>
    317a:	13 82       	std	Z+3, r1	; 0x03
    317c:	12 82       	std	Z+2, r1	; 0x02
    317e:	b0 93 54 03 	sts	0x0354, r27	; 0x800354 <__brkval+0x1>
    3182:	a0 93 53 03 	sts	0x0353, r26	; 0x800353 <__brkval>
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	08 95       	ret

0000318c <_exit>:
    318c:	f8 94       	cli

0000318e <__stop_program>:
    318e:	ff cf       	rjmp	.-2      	; 0x318e <__stop_program>

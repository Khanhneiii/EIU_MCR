
EIU MCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  0000314c  000031e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000314c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800288  00800288  00003268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000538b  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001991  00000000  00000000  00008a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000318b  00000000  00000000  0000a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000820  00000000  00000000  0000d530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb7  00000000  00000000  0000dd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a5d  00000000  00000000  0000ec07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00011664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c2       	rjmp	.+1264   	; 0x4f2 <__ctors_end>
       2:	00 00       	nop
       4:	97 c2       	rjmp	.+1326   	; 0x534 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c2       	rjmp	.+1322   	; 0x534 <__bad_interrupt>
       a:	00 00       	nop
       c:	0f c4       	rjmp	.+2078   	; 0x82c <__vector_3>
       e:	00 00       	nop
      10:	24 c4       	rjmp	.+2120   	; 0x85a <__vector_4>
      12:	00 00       	nop
      14:	8f c2       	rjmp	.+1310   	; 0x534 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c2       	rjmp	.+1306   	; 0x534 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c2       	rjmp	.+1302   	; 0x534 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c2       	rjmp	.+1298   	; 0x534 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c2       	rjmp	.+1294   	; 0x534 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c2       	rjmp	.+1290   	; 0x534 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c2       	rjmp	.+1286   	; 0x534 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c2       	rjmp	.+1282   	; 0x534 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c2       	rjmp	.+1278   	; 0x534 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c2       	rjmp	.+1274   	; 0x534 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c2       	rjmp	.+1270   	; 0x534 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c2       	rjmp	.+1266   	; 0x534 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c2       	rjmp	.+1262   	; 0x534 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c2       	rjmp	.+1258   	; 0x534 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c2       	rjmp	.+1254   	; 0x534 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c2       	rjmp	.+1250   	; 0x534 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c2       	rjmp	.+1246   	; 0x534 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c2       	rjmp	.+1242   	; 0x534 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__vector_23>
      60:	69 c2       	rjmp	.+1234   	; 0x534 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c2       	rjmp	.+1230   	; 0x534 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c2       	rjmp	.+1226   	; 0x534 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c2       	rjmp	.+1222   	; 0x534 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c2       	rjmp	.+1218   	; 0x534 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c2       	rjmp	.+1214   	; 0x534 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c2       	rjmp	.+1210   	; 0x534 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c2       	rjmp	.+1206   	; 0x534 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c2       	rjmp	.+1202   	; 0x534 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c2       	rjmp	.+1198   	; 0x534 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c2       	rjmp	.+1194   	; 0x534 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c2       	rjmp	.+1190   	; 0x534 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c2       	rjmp	.+1186   	; 0x534 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c2       	rjmp	.+1182   	; 0x534 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c2       	rjmp	.+1178   	; 0x534 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c2       	rjmp	.+1174   	; 0x534 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c2       	rjmp	.+1170   	; 0x534 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c2       	rjmp	.+1166   	; 0x534 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c2       	rjmp	.+1162   	; 0x534 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c2       	rjmp	.+1158   	; 0x534 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c2       	rjmp	.+1154   	; 0x534 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c2       	rjmp	.+1150   	; 0x534 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c2       	rjmp	.+1146   	; 0x534 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c2       	rjmp	.+1142   	; 0x534 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c2       	rjmp	.+1138   	; 0x534 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c2       	rjmp	.+1134   	; 0x534 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c2       	rjmp	.+1130   	; 0x534 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c2       	rjmp	.+1126   	; 0x534 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c2       	rjmp	.+1122   	; 0x534 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c2       	rjmp	.+1118   	; 0x534 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c2       	rjmp	.+1114   	; 0x534 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c2       	rjmp	.+1110   	; 0x534 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c2       	rjmp	.+1106   	; 0x534 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8f 07       	cpc	r24, r31
      e6:	cc 07       	cpc	r28, r28
      e8:	07 08       	sbc	r0, r7
      ea:	44 08       	sbc	r4, r4
      ec:	81 08       	sbc	r8, r1
      ee:	be 08       	sbc	r11, r14
      f0:	fb 08       	sbc	r15, r11
      f2:	38 09       	sbc	r19, r8
      f4:	77 09       	sbc	r23, r7
      f6:	50 0c       	add	r5, r0
      f8:	34 0c       	add	r3, r4
      fa:	ec 0b       	sbc	r30, r28
      fc:	18 0c       	add	r1, r8
      fe:	94 0b       	sbc	r25, r20
     100:	6d 0d       	add	r22, r13
     102:	c0 0b       	sbc	r28, r16
     104:	ec 0b       	sbc	r30, r28
     106:	5d 0b       	sbc	r21, r29
     108:	6d 0d       	add	r22, r13
     10a:	6d 0d       	add	r22, r13
     10c:	6d 0d       	add	r22, r13
     10e:	78 0b       	sbc	r23, r24
     110:	6d 0d       	add	r22, r13
     112:	94 0b       	sbc	r25, r20
     114:	75 0d       	add	r23, r5
     116:	63 0c       	add	r6, r3
     118:	6d 0d       	add	r22, r13
     11a:	6d 0d       	add	r22, r13
     11c:	6d 0d       	add	r22, r13
     11e:	6d 0d       	add	r22, r13
     120:	6d 0d       	add	r22, r13
     122:	6d 0d       	add	r22, r13
     124:	6d 0d       	add	r22, r13
     126:	4c 0b       	sbc	r20, r28
     128:	6d 0d       	add	r22, r13
     12a:	6d 0d       	add	r22, r13
     12c:	6d 0d       	add	r22, r13
     12e:	5d 0b       	sbc	r21, r29
     130:	6d 0d       	add	r22, r13
     132:	78 0b       	sbc	r23, r24
     134:	6d 0d       	add	r22, r13
     136:	a1 0c       	add	r10, r1
     138:	6d 0d       	add	r22, r13
     13a:	6d 0d       	add	r22, r13
     13c:	6d 0d       	add	r22, r13
     13e:	6d 0d       	add	r22, r13
     140:	6d 0d       	add	r22, r13
     142:	6d 0d       	add	r22, r13
     144:	6d 0d       	add	r22, r13
     146:	6d 0d       	add	r22, r13
     148:	6d 0d       	add	r22, r13
     14a:	6d 0d       	add	r22, r13
     14c:	6d 0d       	add	r22, r13
     14e:	6d 0d       	add	r22, r13
     150:	6d 0d       	add	r22, r13
     152:	6d 0d       	add	r22, r13
     154:	6d 0d       	add	r22, r13
     156:	82 0c       	add	r8, r2
     158:	6d 0d       	add	r22, r13
     15a:	6d 0d       	add	r22, r13
     15c:	6d 0d       	add	r22, r13
     15e:	6d 0d       	add	r22, r13
     160:	6d 0d       	add	r22, r13
     162:	6d 0d       	add	r22, r13
     164:	6d 0d       	add	r22, r13
     166:	63 0c       	add	r6, r3
     168:	6d 0d       	add	r22, r13
     16a:	6d 0d       	add	r22, r13
     16c:	6d 0d       	add	r22, r13
     16e:	4c 0b       	sbc	r20, r28
     170:	6d 0d       	add	r22, r13
     172:	6d 0d       	add	r22, r13
     174:	6d 0d       	add	r22, r13
     176:	00 0d       	add	r16, r0
     178:	6d 0d       	add	r22, r13
     17a:	6d 0d       	add	r22, r13
     17c:	6d 0d       	add	r22, r13
     17e:	6d 0d       	add	r22, r13
     180:	6d 0d       	add	r22, r13
     182:	6d 0d       	add	r22, r13
     184:	6d 0d       	add	r22, r13
     186:	6d 0d       	add	r22, r13
     188:	6d 0d       	add	r22, r13
     18a:	6d 0d       	add	r22, r13
     18c:	6d 0d       	add	r22, r13
     18e:	6d 0d       	add	r22, r13
     190:	6d 0d       	add	r22, r13
     192:	6d 0d       	add	r22, r13
     194:	6d 0d       	add	r22, r13
     196:	6d 0d       	add	r22, r13
     198:	6d 0d       	add	r22, r13
     19a:	6d 0d       	add	r22, r13
     19c:	6d 0d       	add	r22, r13
     19e:	6d 0d       	add	r22, r13
     1a0:	6d 0d       	add	r22, r13
     1a2:	6d 0d       	add	r22, r13
     1a4:	6d 0d       	add	r22, r13
     1a6:	6d 0d       	add	r22, r13
     1a8:	6d 0d       	add	r22, r13
     1aa:	6d 0d       	add	r22, r13
     1ac:	6d 0d       	add	r22, r13
     1ae:	6d 0d       	add	r22, r13
     1b0:	6d 0d       	add	r22, r13
     1b2:	6d 0d       	add	r22, r13
     1b4:	6d 0d       	add	r22, r13
     1b6:	d1 0c       	add	r13, r1
     1b8:	6d 0d       	add	r22, r13
     1ba:	6d 0d       	add	r22, r13
     1bc:	6d 0d       	add	r22, r13
     1be:	6d 0d       	add	r22, r13
     1c0:	6d 0d       	add	r22, r13
     1c2:	6d 0d       	add	r22, r13
     1c4:	6d 0d       	add	r22, r13
     1c6:	6d 0d       	add	r22, r13
     1c8:	6d 0d       	add	r22, r13
     1ca:	6d 0d       	add	r22, r13
     1cc:	6d 0d       	add	r22, r13
     1ce:	6d 0d       	add	r22, r13
     1d0:	6d 0d       	add	r22, r13
     1d2:	6d 0d       	add	r22, r13
     1d4:	6d 0d       	add	r22, r13
     1d6:	a1 0c       	add	r10, r1
     1d8:	6d 0d       	add	r22, r13
     1da:	6d 0d       	add	r22, r13
     1dc:	6d 0d       	add	r22, r13
     1de:	6d 0d       	add	r22, r13
     1e0:	6d 0d       	add	r22, r13
     1e2:	6d 0d       	add	r22, r13
     1e4:	6d 0d       	add	r22, r13
     1e6:	82 0c       	add	r8, r2
     1e8:	6d 0d       	add	r22, r13
     1ea:	6d 0d       	add	r22, r13
     1ec:	6d 0d       	add	r22, r13
     1ee:	6d 0d       	add	r22, r13
     1f0:	6d 0d       	add	r22, r13
     1f2:	6d 0d       	add	r22, r13
     1f4:	6d 0d       	add	r22, r13
     1f6:	4e 0d       	add	r20, r14
     1f8:	50 0c       	add	r5, r0
     1fa:	6d 0d       	add	r22, r13
     1fc:	50 0c       	add	r5, r0
     1fe:	6d 0d       	add	r22, r13
     200:	6d 0d       	add	r22, r13
     202:	6d 0d       	add	r22, r13
     204:	6d 0d       	add	r22, r13
     206:	6d 0d       	add	r22, r13
     208:	6d 0d       	add	r22, r13
     20a:	6d 0d       	add	r22, r13
     20c:	6d 0d       	add	r22, r13
     20e:	6d 0d       	add	r22, r13
     210:	6d 0d       	add	r22, r13
     212:	6d 0d       	add	r22, r13
     214:	6d 0d       	add	r22, r13
     216:	6d 0d       	add	r22, r13
     218:	6d 0d       	add	r22, r13
     21a:	6d 0d       	add	r22, r13
     21c:	6d 0d       	add	r22, r13
     21e:	6d 0d       	add	r22, r13
     220:	6d 0d       	add	r22, r13
     222:	6d 0d       	add	r22, r13
     224:	6d 0d       	add	r22, r13
     226:	6d 0d       	add	r22, r13
     228:	6d 0d       	add	r22, r13
     22a:	6d 0d       	add	r22, r13
     22c:	6d 0d       	add	r22, r13
     22e:	6d 0d       	add	r22, r13
     230:	6d 0d       	add	r22, r13
     232:	6d 0d       	add	r22, r13
     234:	6d 0d       	add	r22, r13
     236:	6d 0d       	add	r22, r13
     238:	6d 0d       	add	r22, r13
     23a:	6d 0d       	add	r22, r13
     23c:	6d 0d       	add	r22, r13
     23e:	6d 0d       	add	r22, r13
     240:	6d 0d       	add	r22, r13
     242:	6d 0d       	add	r22, r13
     244:	6d 0d       	add	r22, r13
     246:	6d 0d       	add	r22, r13
     248:	6d 0d       	add	r22, r13
     24a:	6d 0d       	add	r22, r13
     24c:	6d 0d       	add	r22, r13
     24e:	6d 0d       	add	r22, r13
     250:	6d 0d       	add	r22, r13
     252:	6d 0d       	add	r22, r13
     254:	6d 0d       	add	r22, r13
     256:	6d 0d       	add	r22, r13
     258:	6d 0d       	add	r22, r13
     25a:	6d 0d       	add	r22, r13
     25c:	6d 0d       	add	r22, r13
     25e:	6d 0d       	add	r22, r13
     260:	6d 0d       	add	r22, r13
     262:	6d 0d       	add	r22, r13
     264:	6d 0d       	add	r22, r13
     266:	6d 0d       	add	r22, r13
     268:	6d 0d       	add	r22, r13
     26a:	6d 0d       	add	r22, r13
     26c:	6d 0d       	add	r22, r13
     26e:	6d 0d       	add	r22, r13
     270:	6d 0d       	add	r22, r13
     272:	6d 0d       	add	r22, r13
     274:	6d 0d       	add	r22, r13
     276:	2f 0d       	add	r18, r15
     278:	50 0c       	add	r5, r0
     27a:	6d 0d       	add	r22, r13
     27c:	6d 0d       	add	r22, r13
     27e:	6d 0d       	add	r22, r13
     280:	6d 0d       	add	r22, r13
     282:	6d 0d       	add	r22, r13
     284:	6d 0d       	add	r22, r13
     286:	6d 0d       	add	r22, r13
     288:	6d 0d       	add	r22, r13
     28a:	6d 0d       	add	r22, r13
     28c:	6d 0d       	add	r22, r13
     28e:	6d 0d       	add	r22, r13
     290:	6d 0d       	add	r22, r13
     292:	6d 0d       	add	r22, r13
     294:	6d 0d       	add	r22, r13
     296:	6d 0d       	add	r22, r13
     298:	6d 0d       	add	r22, r13
     29a:	6d 0d       	add	r22, r13
     29c:	6d 0d       	add	r22, r13
     29e:	6d 0d       	add	r22, r13
     2a0:	6d 0d       	add	r22, r13
     2a2:	6d 0d       	add	r22, r13
     2a4:	6d 0d       	add	r22, r13
     2a6:	6d 0d       	add	r22, r13
     2a8:	6d 0d       	add	r22, r13
     2aa:	6d 0d       	add	r22, r13
     2ac:	6d 0d       	add	r22, r13
     2ae:	6d 0d       	add	r22, r13
     2b0:	6d 0d       	add	r22, r13
     2b2:	6d 0d       	add	r22, r13
     2b4:	6d 0d       	add	r22, r13
     2b6:	00 0d       	add	r16, r0
     2b8:	6d 0d       	add	r22, r13
     2ba:	6d 0d       	add	r22, r13
     2bc:	6d 0d       	add	r22, r13
     2be:	6d 0d       	add	r22, r13
     2c0:	6d 0d       	add	r22, r13
     2c2:	6d 0d       	add	r22, r13
     2c4:	6d 0d       	add	r22, r13
     2c6:	6d 0d       	add	r22, r13
     2c8:	6d 0d       	add	r22, r13
     2ca:	6d 0d       	add	r22, r13
     2cc:	6d 0d       	add	r22, r13
     2ce:	6d 0d       	add	r22, r13
     2d0:	6d 0d       	add	r22, r13
     2d2:	6d 0d       	add	r22, r13
     2d4:	6d 0d       	add	r22, r13
     2d6:	75 0d       	add	r23, r5
     2d8:	ef 0f       	add	r30, r31
     2da:	d7 0f       	add	r29, r23
     2dc:	97 0f       	add	r25, r23
     2de:	bf 0f       	add	r27, r31
     2e0:	47 0f       	add	r20, r23
     2e2:	ef 10       	cpse	r14, r15
     2e4:	6f 0f       	add	r22, r31
     2e6:	97 0f       	add	r25, r23
     2e8:	18 0f       	add	r17, r24
     2ea:	ef 10       	cpse	r14, r15
     2ec:	ef 10       	cpse	r14, r15
     2ee:	ef 10       	cpse	r14, r15
     2f0:	2f 0f       	add	r18, r31
     2f2:	ef 10       	cpse	r14, r15
     2f4:	47 0f       	add	r20, r23
     2f6:	f7 10       	cpse	r15, r7
     2f8:	02 10       	cpse	r0, r2
     2fa:	ef 10       	cpse	r14, r15
     2fc:	ef 10       	cpse	r14, r15
     2fe:	ef 10       	cpse	r14, r15
     300:	ef 10       	cpse	r14, r15
     302:	ef 10       	cpse	r14, r15
     304:	ef 10       	cpse	r14, r15
     306:	ef 10       	cpse	r14, r15
     308:	0b 0f       	add	r16, r27
     30a:	ef 10       	cpse	r14, r15
     30c:	ef 10       	cpse	r14, r15
     30e:	ef 10       	cpse	r14, r15
     310:	18 0f       	add	r17, r24
     312:	ef 10       	cpse	r14, r15
     314:	2f 0f       	add	r18, r31
     316:	ef 10       	cpse	r14, r15
     318:	38 10       	cpse	r3, r8
     31a:	ef 10       	cpse	r14, r15
     31c:	ef 10       	cpse	r14, r15
     31e:	ef 10       	cpse	r14, r15
     320:	ef 10       	cpse	r14, r15
     322:	ef 10       	cpse	r14, r15
     324:	ef 10       	cpse	r14, r15
     326:	ef 10       	cpse	r14, r15
     328:	ef 10       	cpse	r14, r15
     32a:	ef 10       	cpse	r14, r15
     32c:	ef 10       	cpse	r14, r15
     32e:	ef 10       	cpse	r14, r15
     330:	ef 10       	cpse	r14, r15
     332:	ef 10       	cpse	r14, r15
     334:	ef 10       	cpse	r14, r15
     336:	ef 10       	cpse	r14, r15
     338:	1d 10       	cpse	r1, r13
     33a:	ef 10       	cpse	r14, r15
     33c:	ef 10       	cpse	r14, r15
     33e:	ef 10       	cpse	r14, r15
     340:	ef 10       	cpse	r14, r15
     342:	ef 10       	cpse	r14, r15
     344:	ef 10       	cpse	r14, r15
     346:	ef 10       	cpse	r14, r15
     348:	02 10       	cpse	r0, r2
     34a:	ef 10       	cpse	r14, r15
     34c:	ef 10       	cpse	r14, r15
     34e:	ef 10       	cpse	r14, r15
     350:	0b 0f       	add	r16, r27
     352:	ef 10       	cpse	r14, r15
     354:	ef 10       	cpse	r14, r15
     356:	ef 10       	cpse	r14, r15
     358:	8e 10       	cpse	r8, r14
     35a:	ef 10       	cpse	r14, r15
     35c:	ef 10       	cpse	r14, r15
     35e:	ef 10       	cpse	r14, r15
     360:	ef 10       	cpse	r14, r15
     362:	ef 10       	cpse	r14, r15
     364:	ef 10       	cpse	r14, r15
     366:	ef 10       	cpse	r14, r15
     368:	ef 10       	cpse	r14, r15
     36a:	ef 10       	cpse	r14, r15
     36c:	ef 10       	cpse	r14, r15
     36e:	ef 10       	cpse	r14, r15
     370:	ef 10       	cpse	r14, r15
     372:	ef 10       	cpse	r14, r15
     374:	ef 10       	cpse	r14, r15
     376:	ef 10       	cpse	r14, r15
     378:	ef 10       	cpse	r14, r15
     37a:	ef 10       	cpse	r14, r15
     37c:	ef 10       	cpse	r14, r15
     37e:	ef 10       	cpse	r14, r15
     380:	ef 10       	cpse	r14, r15
     382:	ef 10       	cpse	r14, r15
     384:	ef 10       	cpse	r14, r15
     386:	ef 10       	cpse	r14, r15
     388:	ef 10       	cpse	r14, r15
     38a:	ef 10       	cpse	r14, r15
     38c:	ef 10       	cpse	r14, r15
     38e:	ef 10       	cpse	r14, r15
     390:	ef 10       	cpse	r14, r15
     392:	ef 10       	cpse	r14, r15
     394:	ef 10       	cpse	r14, r15
     396:	ef 10       	cpse	r14, r15
     398:	63 10       	cpse	r6, r3
     39a:	ef 10       	cpse	r14, r15
     39c:	ef 10       	cpse	r14, r15
     39e:	ef 10       	cpse	r14, r15
     3a0:	ef 10       	cpse	r14, r15
     3a2:	ef 10       	cpse	r14, r15
     3a4:	ef 10       	cpse	r14, r15
     3a6:	ef 10       	cpse	r14, r15
     3a8:	ef 10       	cpse	r14, r15
     3aa:	ef 10       	cpse	r14, r15
     3ac:	ef 10       	cpse	r14, r15
     3ae:	ef 10       	cpse	r14, r15
     3b0:	ef 10       	cpse	r14, r15
     3b2:	ef 10       	cpse	r14, r15
     3b4:	ef 10       	cpse	r14, r15
     3b6:	ef 10       	cpse	r14, r15
     3b8:	38 10       	cpse	r3, r8
     3ba:	ef 10       	cpse	r14, r15
     3bc:	ef 10       	cpse	r14, r15
     3be:	ef 10       	cpse	r14, r15
     3c0:	ef 10       	cpse	r14, r15
     3c2:	ef 10       	cpse	r14, r15
     3c4:	ef 10       	cpse	r14, r15
     3c6:	ef 10       	cpse	r14, r15
     3c8:	1d 10       	cpse	r1, r13
     3ca:	ef 10       	cpse	r14, r15
     3cc:	ef 10       	cpse	r14, r15
     3ce:	ef 10       	cpse	r14, r15
     3d0:	ef 10       	cpse	r14, r15
     3d2:	ef 10       	cpse	r14, r15
     3d4:	ef 10       	cpse	r14, r15
     3d6:	ef 10       	cpse	r14, r15
     3d8:	d4 10       	cpse	r13, r4
     3da:	ef 0f       	add	r30, r31
     3dc:	ef 10       	cpse	r14, r15
     3de:	ef 0f       	add	r30, r31
     3e0:	ef 10       	cpse	r14, r15
     3e2:	ef 10       	cpse	r14, r15
     3e4:	ef 10       	cpse	r14, r15
     3e6:	ef 10       	cpse	r14, r15
     3e8:	ef 10       	cpse	r14, r15
     3ea:	ef 10       	cpse	r14, r15
     3ec:	ef 10       	cpse	r14, r15
     3ee:	ef 10       	cpse	r14, r15
     3f0:	ef 10       	cpse	r14, r15
     3f2:	ef 10       	cpse	r14, r15
     3f4:	ef 10       	cpse	r14, r15
     3f6:	ef 10       	cpse	r14, r15
     3f8:	ef 10       	cpse	r14, r15
     3fa:	ef 10       	cpse	r14, r15
     3fc:	ef 10       	cpse	r14, r15
     3fe:	ef 10       	cpse	r14, r15
     400:	ef 10       	cpse	r14, r15
     402:	ef 10       	cpse	r14, r15
     404:	ef 10       	cpse	r14, r15
     406:	ef 10       	cpse	r14, r15
     408:	ef 10       	cpse	r14, r15
     40a:	ef 10       	cpse	r14, r15
     40c:	ef 10       	cpse	r14, r15
     40e:	ef 10       	cpse	r14, r15
     410:	ef 10       	cpse	r14, r15
     412:	ef 10       	cpse	r14, r15
     414:	ef 10       	cpse	r14, r15
     416:	ef 10       	cpse	r14, r15
     418:	ef 10       	cpse	r14, r15
     41a:	ef 10       	cpse	r14, r15
     41c:	ef 10       	cpse	r14, r15
     41e:	ef 10       	cpse	r14, r15
     420:	ef 10       	cpse	r14, r15
     422:	ef 10       	cpse	r14, r15
     424:	ef 10       	cpse	r14, r15
     426:	ef 10       	cpse	r14, r15
     428:	ef 10       	cpse	r14, r15
     42a:	ef 10       	cpse	r14, r15
     42c:	ef 10       	cpse	r14, r15
     42e:	ef 10       	cpse	r14, r15
     430:	ef 10       	cpse	r14, r15
     432:	ef 10       	cpse	r14, r15
     434:	ef 10       	cpse	r14, r15
     436:	ef 10       	cpse	r14, r15
     438:	ef 10       	cpse	r14, r15
     43a:	ef 10       	cpse	r14, r15
     43c:	ef 10       	cpse	r14, r15
     43e:	ef 10       	cpse	r14, r15
     440:	ef 10       	cpse	r14, r15
     442:	ef 10       	cpse	r14, r15
     444:	ef 10       	cpse	r14, r15
     446:	ef 10       	cpse	r14, r15
     448:	ef 10       	cpse	r14, r15
     44a:	ef 10       	cpse	r14, r15
     44c:	ef 10       	cpse	r14, r15
     44e:	ef 10       	cpse	r14, r15
     450:	ef 10       	cpse	r14, r15
     452:	ef 10       	cpse	r14, r15
     454:	ef 10       	cpse	r14, r15
     456:	ef 10       	cpse	r14, r15
     458:	b9 10       	cpse	r11, r9
     45a:	ef 0f       	add	r30, r31
     45c:	ef 10       	cpse	r14, r15
     45e:	ef 10       	cpse	r14, r15
     460:	ef 10       	cpse	r14, r15
     462:	ef 10       	cpse	r14, r15
     464:	ef 10       	cpse	r14, r15
     466:	ef 10       	cpse	r14, r15
     468:	ef 10       	cpse	r14, r15
     46a:	ef 10       	cpse	r14, r15
     46c:	ef 10       	cpse	r14, r15
     46e:	ef 10       	cpse	r14, r15
     470:	ef 10       	cpse	r14, r15
     472:	ef 10       	cpse	r14, r15
     474:	ef 10       	cpse	r14, r15
     476:	ef 10       	cpse	r14, r15
     478:	ef 10       	cpse	r14, r15
     47a:	ef 10       	cpse	r14, r15
     47c:	ef 10       	cpse	r14, r15
     47e:	ef 10       	cpse	r14, r15
     480:	ef 10       	cpse	r14, r15
     482:	ef 10       	cpse	r14, r15
     484:	ef 10       	cpse	r14, r15
     486:	ef 10       	cpse	r14, r15
     488:	ef 10       	cpse	r14, r15
     48a:	ef 10       	cpse	r14, r15
     48c:	ef 10       	cpse	r14, r15
     48e:	ef 10       	cpse	r14, r15
     490:	ef 10       	cpse	r14, r15
     492:	ef 10       	cpse	r14, r15
     494:	ef 10       	cpse	r14, r15
     496:	ef 10       	cpse	r14, r15
     498:	8e 10       	cpse	r8, r14
     49a:	ef 10       	cpse	r14, r15
     49c:	ef 10       	cpse	r14, r15
     49e:	ef 10       	cpse	r14, r15
     4a0:	ef 10       	cpse	r14, r15
     4a2:	ef 10       	cpse	r14, r15
     4a4:	ef 10       	cpse	r14, r15
     4a6:	ef 10       	cpse	r14, r15
     4a8:	ef 10       	cpse	r14, r15
     4aa:	ef 10       	cpse	r14, r15
     4ac:	ef 10       	cpse	r14, r15
     4ae:	ef 10       	cpse	r14, r15
     4b0:	ef 10       	cpse	r14, r15
     4b2:	ef 10       	cpse	r14, r15
     4b4:	ef 10       	cpse	r14, r15
     4b6:	ef 10       	cpse	r14, r15
     4b8:	f7 10       	cpse	r15, r7
     4ba:	37 11       	cpse	r19, r7
     4bc:	f6 12       	cpse	r15, r22
     4be:	f6 12       	cpse	r15, r22
     4c0:	f6 12       	cpse	r15, r22
     4c2:	45 11       	cpse	r20, r5
     4c4:	87 11       	cpse	r24, r7
     4c6:	f6 12       	cpse	r15, r22
     4c8:	f6 12       	cpse	r15, r22
     4ca:	f6 12       	cpse	r15, r22
     4cc:	f6 12       	cpse	r15, r22
     4ce:	f6 12       	cpse	r15, r22
     4d0:	f6 12       	cpse	r15, r22
     4d2:	b7 11       	cpse	r27, r7
     4d4:	d9 11       	cpse	r29, r9
     4d6:	ea 11       	cpse	r30, r10
     4d8:	fa 11       	cpse	r31, r10
     4da:	12 12       	cpse	r1, r18
     4dc:	f6 12       	cpse	r15, r22
     4de:	f6 12       	cpse	r15, r22
     4e0:	f6 12       	cpse	r15, r22
     4e2:	f6 12       	cpse	r15, r22
     4e4:	f6 12       	cpse	r15, r22
     4e6:	2f 12       	cpse	r2, r31
     4e8:	53 12       	cpse	r5, r19
     4ea:	69 12       	cpse	r6, r25
     4ec:	7e 12       	cpse	r7, r30
     4ee:	9b 12       	cpse	r9, r27
     4f0:	b8 12       	cpse	r11, r24

000004f2 <__ctors_end>:
     4f2:	11 24       	eor	r1, r1
     4f4:	1f be       	out	0x3f, r1	; 63
     4f6:	cf ef       	ldi	r28, 0xFF	; 255
     4f8:	d1 e2       	ldi	r29, 0x21	; 33
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	00 e0       	ldi	r16, 0x00	; 0
     500:	0c bf       	out	0x3c, r16	; 60

00000502 <__do_copy_data>:
     502:	12 e0       	ldi	r17, 0x02	; 2
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b2 e0       	ldi	r27, 0x02	; 2
     508:	ec e4       	ldi	r30, 0x4C	; 76
     50a:	f1 e3       	ldi	r31, 0x31	; 49
     50c:	00 e0       	ldi	r16, 0x00	; 0
     50e:	0b bf       	out	0x3b, r16	; 59
     510:	02 c0       	rjmp	.+4      	; 0x516 <__do_copy_data+0x14>
     512:	07 90       	elpm	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	a8 38       	cpi	r26, 0x88	; 136
     518:	b1 07       	cpc	r27, r17
     51a:	d9 f7       	brne	.-10     	; 0x512 <__do_copy_data+0x10>

0000051c <__do_clear_bss>:
     51c:	23 e0       	ldi	r18, 0x03	; 3
     51e:	a8 e8       	ldi	r26, 0x88	; 136
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	01 c0       	rjmp	.+2      	; 0x526 <.do_clear_bss_start>

00000524 <.do_clear_bss_loop>:
     524:	1d 92       	st	X+, r1

00000526 <.do_clear_bss_start>:
     526:	a5 35       	cpi	r26, 0x55	; 85
     528:	b2 07       	cpc	r27, r18
     52a:	e1 f7       	brne	.-8      	; 0x524 <.do_clear_bss_loop>
     52c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <main>
     530:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <_exit>

00000534 <__bad_interrupt>:
     534:	65 cd       	rjmp	.-1334   	; 0x0 <__vectors>

00000536 <adc_init>:
/*				 color is BLACK       */
/*				or WHITE			  */
/*====================================*/
void save_sensor(unsigned char color)
{
	isUpdate = 0;
     536:	80 e4       	ldi	r24, 0x40	; 64
     538:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     53c:	84 e8       	ldi	r24, 0x84	; 132
     53e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     542:	8c e2       	ldi	r24, 0x2C	; 44
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <compareValue+0x1>
     54a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <compareValue>
     54e:	08 95       	ret

00000550 <read_adc>:
     550:	80 64       	ori	r24, 0x40	; 64
     552:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     556:	ea e7       	ldi	r30, 0x7A	; 122
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	80 64       	ori	r24, 0x40	; 64
     55e:	80 83       	st	Z, r24
     560:	80 81       	ld	r24, Z
     562:	84 ff       	sbrs	r24, 4
     564:	fd cf       	rjmp	.-6      	; 0x560 <read_adc+0x10>
     566:	ea e7       	ldi	r30, 0x7A	; 122
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	80 83       	st	Z, r24
     570:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     574:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     578:	08 95       	ret

0000057a <read_bat>:
     57a:	80 e4       	ldi	r24, 0x40	; 64
     57c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     580:	eb e7       	ldi	r30, 0x7B	; 123
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	88 60       	ori	r24, 0x08	; 8
     588:	80 83       	st	Z, r24
     58a:	ea e7       	ldi	r30, 0x7A	; 122
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	80 64       	ori	r24, 0x40	; 64
     592:	80 83       	st	Z, r24
     594:	80 81       	ld	r24, Z
     596:	84 ff       	sbrs	r24, 4
     598:	fd cf       	rjmp	.-6      	; 0x594 <read_bat+0x1a>
     59a:	ea e7       	ldi	r30, 0x7A	; 122
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 61       	ori	r24, 0x10	; 16
     5a2:	80 83       	st	Z, r24
     5a4:	eb e7       	ldi	r30, 0x7B	; 123
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	87 7f       	andi	r24, 0xF7	; 247
     5ac:	80 83       	st	Z, r24
     5ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     5b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     5b6:	08 95       	ret

000005b8 <read_volt>:
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	0c ee       	ldi	r16, 0xEC	; 236
     5c0:	12 e0       	ldi	r17, 0x02	; 2
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	8c 2f       	mov	r24, r28
     5c6:	c4 df       	rcall	.-120    	; 0x550 <read_adc>
     5c8:	f8 01       	movw	r30, r16
     5ca:	92 93       	st	-Z, r25
     5cc:	82 93       	st	-Z, r24
     5ce:	8f 01       	movw	r16, r30
     5d0:	cf 5f       	subi	r28, 0xFF	; 255
     5d2:	c8 30       	cpi	r28, 0x08	; 8
     5d4:	b9 f7       	brne	.-18     	; 0x5c4 <read_volt+0xc>
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <read_sensor>:
     5de:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     5e2:	81 11       	cpse	r24, r1
     5e4:	16 c0       	rjmp	.+44     	; 0x612 <read_sensor+0x34>
     5e6:	e8 df       	rcall	.-48     	; 0x5b8 <read_volt>
     5e8:	ec ed       	ldi	r30, 0xDC	; 220
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	a9 e8       	ldi	r26, 0x89	; 137
     5ee:	b2 e0       	ldi	r27, 0x02	; 2
     5f0:	6c ee       	ldi	r22, 0xEC	; 236
     5f2:	72 e0       	ldi	r23, 0x02	; 2
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	88 0f       	add	r24, r24
     5f8:	41 91       	ld	r20, Z+
     5fa:	51 91       	ld	r21, Z+
     5fc:	2d 91       	ld	r18, X+
     5fe:	3d 91       	ld	r19, X+
     600:	24 17       	cp	r18, r20
     602:	35 07       	cpc	r19, r21
     604:	08 f4       	brcc	.+2      	; 0x608 <read_sensor+0x2a>
     606:	81 60       	ori	r24, 0x01	; 1
     608:	e6 17       	cp	r30, r22
     60a:	f7 07       	cpc	r31, r23
     60c:	a1 f7       	brne	.-24     	; 0x5f6 <read_sensor+0x18>
     60e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <sensor>
     612:	08 95       	ret

00000614 <update_vcompare>:
/*  Parameter: null                   */
/*  Description: update value of      */
/*               v_compare[8] and save*/
/*               in eeprom of MCU     */
/*====================================*/
void update_vcompare(){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	e9 ea       	ldi	r30, 0xA9	; 169
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	c9 eb       	ldi	r28, 0xB9	; 185
     61e:	d2 e0       	ldi	r29, 0x02	; 2
     620:	a9 e8       	ldi	r26, 0x89	; 137
     622:	b2 e0       	ldi	r27, 0x02	; 2
     624:	49 eb       	ldi	r20, 0xB9	; 185
     626:	52 e0       	ldi	r21, 0x02	; 2
	int i;
	for (i=0; i<8; i++)
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
     628:	21 91       	ld	r18, Z+
     62a:	31 91       	ld	r19, Z+
     62c:	89 91       	ld	r24, Y+
     62e:	99 91       	ld	r25, Y+
     630:	82 0f       	add	r24, r18
     632:	93 1f       	adc	r25, r19
     634:	96 95       	lsr	r25
     636:	87 95       	ror	r24
     638:	8d 93       	st	X+, r24
     63a:	9d 93       	st	X+, r25
/*               v_compare[8] and save*/
/*               in eeprom of MCU     */
/*====================================*/
void update_vcompare(){
	int i;
	for (i=0; i<8; i++)
     63c:	e4 17       	cp	r30, r20
     63e:	f5 07       	cpc	r31, r21
     640:	99 f7       	brne	.-26     	; 0x628 <update_vcompare+0x14>
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
	}
	eeprom_writestr(V_COMPARE_POS, v_compare, 16);
     642:	40 e1       	ldi	r20, 0x10	; 16
     644:	69 e8       	ldi	r22, 0x89	; 137
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	88 e1       	ldi	r24, 0x18	; 24
     64a:	8c d0       	rcall	.+280    	; 0x764 <eeprom_writestr>
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <update_white>:

void update_white(){
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec ed       	ldi	r30, 0xDC	; 220
     658:	f2 e0       	ldi	r31, 0x02	; 2
     65a:	a9 eb       	ldi	r26, 0xB9	; 185
     65c:	b2 e0       	ldi	r27, 0x02	; 2
     65e:	2c ee       	ldi	r18, 0xEC	; 236
     660:	32 e0       	ldi	r19, 0x02	; 2
     662:	ed 01       	movw	r28, r26
	int i;
	for (i=0; i<8; i++)
	{
		minOfMaxSensorValue[i] = sensor_value[i];
     664:	81 91       	ld	r24, Z+
     666:	91 91       	ld	r25, Z+
     668:	89 93       	st	Y+, r24
     66a:	99 93       	st	Y+, r25
	eeprom_writestr(V_COMPARE_POS, v_compare, 16);
}

void update_white(){
	int i;
	for (i=0; i<8; i++)
     66c:	e2 17       	cp	r30, r18
     66e:	f3 07       	cpc	r31, r19
     670:	c9 f7       	brne	.-14     	; 0x664 <update_white+0x12>
     672:	e9 ea       	ldi	r30, 0xA9	; 169
     674:	f2 e0       	ldi	r31, 0x02	; 2
     676:	c9 e8       	ldi	r28, 0x89	; 137
     678:	d2 e0       	ldi	r29, 0x02	; 2
     67a:	49 eb       	ldi	r20, 0xB9	; 185
     67c:	52 e0       	ldi	r21, 0x02	; 2
	{
		minOfMaxSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
     67e:	21 91       	ld	r18, Z+
     680:	31 91       	ld	r19, Z+
     682:	8d 91       	ld	r24, X+
     684:	9d 91       	ld	r25, X+
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	89 93       	st	Y+, r24
     690:	99 93       	st	Y+, r25
	int i;
	for (i=0; i<8; i++)
	{
		minOfMaxSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
     692:	e4 17       	cp	r30, r20
     694:	f5 07       	cpc	r31, r21
     696:	99 f7       	brne	.-26     	; 0x67e <update_white+0x2c>
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
	}
	
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <update_black>:
void update_black(){
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ac ed       	ldi	r26, 0xDC	; 220
     6a4:	b2 e0       	ldi	r27, 0x02	; 2
     6a6:	e9 ea       	ldi	r30, 0xA9	; 169
     6a8:	f2 e0       	ldi	r31, 0x02	; 2
     6aa:	2c ee       	ldi	r18, 0xEC	; 236
     6ac:	32 e0       	ldi	r19, 0x02	; 2
     6ae:	ef 01       	movw	r28, r30
	int i;
	for (i=0; i<8; i++)
	{
		maxOfMinSensorValue[i] = sensor_value[i];
     6b0:	8d 91       	ld	r24, X+
     6b2:	9d 91       	ld	r25, X+
     6b4:	89 93       	st	Y+, r24
     6b6:	99 93       	st	Y+, r25
	}
	
}
void update_black(){
	int i;
	for (i=0; i<8; i++)
     6b8:	a2 17       	cp	r26, r18
     6ba:	b3 07       	cpc	r27, r19
     6bc:	c9 f7       	brne	.-14     	; 0x6b0 <update_black+0x12>
     6be:	c9 eb       	ldi	r28, 0xB9	; 185
     6c0:	d2 e0       	ldi	r29, 0x02	; 2
     6c2:	a9 e8       	ldi	r26, 0x89	; 137
     6c4:	b2 e0       	ldi	r27, 0x02	; 2
     6c6:	49 eb       	ldi	r20, 0xB9	; 185
     6c8:	52 e0       	ldi	r21, 0x02	; 2
	{
		maxOfMinSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
     6ca:	21 91       	ld	r18, Z+
     6cc:	31 91       	ld	r19, Z+
     6ce:	89 91       	ld	r24, Y+
     6d0:	99 91       	ld	r25, Y+
     6d2:	82 0f       	add	r24, r18
     6d4:	93 1f       	adc	r25, r19
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	8d 93       	st	X+, r24
     6dc:	9d 93       	st	X+, r25
	int i;
	for (i=0; i<8; i++)
	{
		maxOfMinSensorValue[i] = sensor_value[i];
	}
	for (i=0; i<8; i++)
     6de:	e4 17       	cp	r30, r20
     6e0:	f5 07       	cpc	r31, r21
     6e2:	99 f7       	brne	.-26     	; 0x6ca <update_black+0x2c>
	{
		v_compare[i] = (maxOfMinSensorValue[i] + minOfMaxSensorValue[i])/2;
	}
	
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <read_vcompare>:
/*  Parameter: null                   */
/*  Description: read v_compare[8]    */
/*               from eeprom          */
/*====================================*/
void read_vcompare(){
	eeprom_readstr(V_COMPARE_POS, v_compare, 16);
     6ea:	40 e1       	ldi	r20, 0x10	; 16
     6ec:	69 e8       	ldi	r22, 0x89	; 137
     6ee:	72 e0       	ldi	r23, 0x02	; 2
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	60 c0       	rjmp	.+192    	; 0x7b4 <eeprom_readstr>
     6f4:	08 95       	ret

000006f6 <beep_init>:
/*  Parameter: null                   */
/*  Description: configure hardware   */
/*               for beep speaker     */
/*====================================*/
void beep_init(){
	BEEP_DDR |= _BV(BEEP_PIN);
     6f6:	24 9a       	sbi	0x04, 4	; 4
	beep_cn = 0;
     6f8:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <beep_cn+0x1>
     6fc:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <beep_cn>
	beep_flag = 0;
     700:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <beep_flag>
     704:	08 95       	ret

00000706 <beep_on>:
/*  Function name: beep_on            */
/*  Parameter: null                   */
/*  Description: speaker on          */
/*====================================*/
void beep_on(){
	BEEP_PORT |= _BV(BEEP_PIN);
     706:	2c 9a       	sbi	0x05, 4	; 5
     708:	08 95       	ret

0000070a <beep_off>:
/*  Function name: beep_off           */
/*  Parameter: null                   */
/*  Description: speaker off          */
/*====================================*/
void beep_off(){
	BEEP_PORT &= ~_BV(BEEP_PIN);
     70a:	2c 98       	cbi	0x05, 4	; 5
     70c:	08 95       	ret

0000070e <beep_mod>:
/*				 This function is	  */
/*				called by interrupt	  */
/* 				timer				  */
/*====================================*/
void beep_mod(){
	if(beep_flag){
     70e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <beep_flag>
     712:	88 23       	and	r24, r24
     714:	71 f0       	breq	.+28     	; 0x732 <beep_mod+0x24>
		beep_cn--;
     716:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <beep_cn>
     71a:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <beep_cn+0x1>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <beep_cn+0x1>
     724:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <beep_cn>
		if(beep_cn==0){
     728:	89 2b       	or	r24, r25
     72a:	19 f4       	brne	.+6      	; 0x732 <beep_mod+0x24>
			beep_flag = 0;
     72c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <beep_flag>
			beep_off();
     730:	ec cf       	rjmp	.-40     	; 0x70a <beep_off>
     732:	08 95       	ret

00000734 <beep_long>:
/*  Parameter: timer                  */
/*  Description: speaker on during    */
/*               "_timer"             */
/*====================================*/
void beep_long(unsigned int _timer){
	beep_cn = _timer/TIMER_DIV;
     734:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <beep_cn+0x1>
     738:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <beep_cn>
	beep_flag = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <beep_flag>
	beep_on();
     742:	e1 cf       	rjmp	.-62     	; 0x706 <beep_on>
     744:	08 95       	ret

00000746 <eeprom_writebyte>:
/*  Parameter: uiAddress,ucData       */
/*  Description : write ucData into   */
/*              eeprom at uiAddress   */
/*====================================*/
void eeprom_writebyte(unsigned char uiAddress, unsigned char ucData){
	while(EECR & _BV(EEPE)); 	//Wait for completion of previous write
     746:	f9 99       	sbic	0x1f, 1	; 31
     748:	fe cf       	rjmp	.-4      	; 0x746 <eeprom_writebyte>
	EEAR = uiAddress;			//Set up address and data registers
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	92 bd       	out	0x22, r25	; 34
     74e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     750:	60 bd       	out	0x20, r22	; 32
	SREG = SREG & DISABLE_INT;			//disable interrup
     752:	8f b7       	in	r24, 0x3f	; 63
     754:	8f 77       	andi	r24, 0x7F	; 127
     756:	8f bf       	out	0x3f, r24	; 63

	asm volatile("sbi %0,%1" :: "I" (_SFR_IO_ADDR(EECR)) , "I" (2));
     758:	fa 9a       	sbi	0x1f, 2	; 31
	asm volatile("sbi %0,%1" :: "I" (_SFR_IO_ADDR(EECR)) , "I" (1));
     75a:	f9 9a       	sbi	0x1f, 1	; 31

	SREG = SREG | ENABLE_INT;			//re-enable interrupt
     75c:	8f b7       	in	r24, 0x3f	; 63
     75e:	80 68       	ori	r24, 0x80	; 128
     760:	8f bf       	out	0x3f, r24	; 63
     762:	08 95       	ret

00000764 <eeprom_writestr>:
/*  Description : write string from   */
/*           *ucData_buff with length */
/*           is "len" into eeprom     */
/*           from uiAddress_start     */
/*====================================*/
void eeprom_writestr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
	unsigned char i__;
	if(!ucData_buff)return;
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	71 f0       	breq	.+28     	; 0x78e <eeprom_writestr+0x2a>
	for(i__=0;i__<ucData_len;i__++){
     772:	44 23       	and	r20, r20
     774:	61 f0       	breq	.+24     	; 0x78e <eeprom_writestr+0x2a>
     776:	c8 2f       	mov	r28, r24
     778:	8b 01       	movw	r16, r22
     77a:	d4 2f       	mov	r29, r20
     77c:	d8 0f       	add	r29, r24
		eeprom_writebyte(uiAddress_start + i__, ucData_buff[i__]);
     77e:	f8 01       	movw	r30, r16
     780:	61 91       	ld	r22, Z+
     782:	8f 01       	movw	r16, r30
     784:	8c 2f       	mov	r24, r28
     786:	df df       	rcall	.-66     	; 0x746 <eeprom_writebyte>
     788:	cf 5f       	subi	r28, 0xFF	; 255
/*           from uiAddress_start     */
/*====================================*/
void eeprom_writestr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
	unsigned char i__;
	if(!ucData_buff)return;
	for(i__=0;i__<ucData_len;i__++){
     78a:	cd 13       	cpse	r28, r29
     78c:	f8 cf       	rjmp	.-16     	; 0x77e <eeprom_writestr+0x1a>
		eeprom_writebyte(uiAddress_start + i__, ucData_buff[i__]);
	}
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <eeprom_readbyte>:
/*  Parameter: uiAddress,ucData       */
/*  Description : read ucData form    */
/*              eeprom at uiAddress   */
/*====================================*/
unsigned char eeprom_readbyte(unsigned char uiAddress){
	while(EECR & _BV(EEPE)); 	//Wait for completion of previous write
     798:	f9 99       	sbic	0x1f, 1	; 31
     79a:	fe cf       	rjmp	.-4      	; 0x798 <eeprom_readbyte>
	SREG = SREG & 0x7f;			//disable interrup
     79c:	9f b7       	in	r25, 0x3f	; 63
     79e:	9f 77       	andi	r25, 0x7F	; 127
     7a0:	9f bf       	out	0x3f, r25	; 63
	EEAR = uiAddress;			//Set up address register
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	92 bd       	out	0x22, r25	; 34
     7a6:	81 bd       	out	0x21, r24	; 33
	EECR |= _BV(EERE);			//Start eeprom read by writing EERE
     7a8:	f8 9a       	sbi	0x1f, 0	; 31
	SREG = SREG | 0x80;			//re-enable interrupt
     7aa:	8f b7       	in	r24, 0x3f	; 63
     7ac:	80 68       	ori	r24, 0x80	; 128
     7ae:	8f bf       	out	0x3f, r24	; 63
	return EEDR;				//Return data from data register
     7b0:	80 b5       	in	r24, 0x20	; 32
}
     7b2:	08 95       	ret

000007b4 <eeprom_readstr>:
/*  Description : read string from    */
/*           *ucData_buff with length */
/*           is "len" from eeprom     */
/*           at uiAddress_start       */
/*====================================*/
void eeprom_readstr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	c8 2f       	mov	r28, r24
     7be:	d4 2f       	mov	r29, r20
	unsigned char i__;
	if(!ucData_buff)
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <eeprom_readstr+0x20>
		ucData_buff = malloc(ucData_len);
     7c6:	84 2f       	mov	r24, r20
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 83 17 	call	0x2f06	; 0x2f06 <malloc>
     7ce:	bc 01       	movw	r22, r24
	if(!ucData_buff)return;
     7d0:	89 2b       	or	r24, r25
     7d2:	61 f0       	breq	.+24     	; 0x7ec <eeprom_readstr+0x38>
	for(i__=0;i__<ucData_len;i__++){
     7d4:	dd 23       	and	r29, r29
     7d6:	51 f0       	breq	.+20     	; 0x7ec <eeprom_readstr+0x38>
     7d8:	8b 01       	movw	r16, r22
     7da:	dc 0f       	add	r29, r28
		*ucData_buff++ = eeprom_readbyte(uiAddress_start + i__);
     7dc:	8c 2f       	mov	r24, r28
     7de:	dc df       	rcall	.-72     	; 0x798 <eeprom_readbyte>
     7e0:	f8 01       	movw	r30, r16
     7e2:	81 93       	st	Z+, r24
     7e4:	8f 01       	movw	r16, r30
     7e6:	cf 5f       	subi	r28, 0xFF	; 255
void eeprom_readstr(unsigned char uiAddress_start, unsigned char *ucData_buff, unsigned char ucData_len){
	unsigned char i__;
	if(!ucData_buff)
		ucData_buff = malloc(ucData_len);
	if(!ucData_buff)return;
	for(i__=0;i__<ucData_len;i__++){
     7e8:	cd 13       	cpse	r28, r29
     7ea:	f8 cf       	rjmp	.-16     	; 0x7dc <eeprom_readstr+0x28>
		*ucData_buff++ = eeprom_readbyte(uiAddress_start + i__);
	}
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <encoder_init>:
     7f6:	80 ea       	ldi	r24, 0xA0	; 160
     7f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     7fc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     800:	8c e0       	ldi	r24, 0x0C	; 12
     802:	8d bb       	out	0x1d, r24	; 29
     804:	8c bb       	out	0x1c, r24	; 28
     806:	8a b1       	in	r24, 0x0a	; 10
     808:	83 7f       	andi	r24, 0xF3	; 243
     80a:	8a b9       	out	0x0a, r24	; 10
     80c:	8e b1       	in	r24, 0x0e	; 14
     80e:	8c 60       	ori	r24, 0x0C	; 12
     810:	8e b9       	out	0x0e, r24	; 14
     812:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <distance1+0x1>
     816:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <distance1>
     81a:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <vantoc1>
     81e:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <distance2+0x1>
     822:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <distance2>
     826:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <vantoc2>
     82a:	08 95       	ret

0000082c <__vector_3>:
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <distance1>
     83e:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <distance1+0x1>
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <distance1+0x1>
     848:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <distance1>
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_4>:
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <distance2>
     86c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <distance2+0x1>
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <distance2+0x1>
     876:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <distance2>
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <handle_init>:
/*                  Servo motor       */
/*====================================*/
unsigned int handle_center = 1500;
void handle_init(){

	DDRB  |=  _BV(PB5);
     888:	25 9a       	sbi	0x04, 5	; 4
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
     88a:	80 e8       	ldi	r24, 0x80	; 128
     88c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
     890:	82 e1       	ldi	r24, 0x12	; 18
     892:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
TCNT1H=0x00;
     896:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
TCNT1L=0x00;
     89a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
ICR1H=0x13;
     89e:	83 e1       	ldi	r24, 0x13	; 19
     8a0:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
ICR1L=0x88;
     8a4:	88 e8       	ldi	r24, 0x88	; 136
     8a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
OCR1AH=0x05;
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
OCR1AL=0xDC;
     8b0:	8c ed       	ldi	r24, 0xDC	; 220
     8b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
OCR1BH=0x00;
     8b6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
OCR1BL=0x00;
     8ba:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
OCR1CH=0x00;
     8be:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
OCR1CL=0x00;
     8c2:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
     8c6:	08 95       	ret

000008c8 <handle>:
/*  Parameter: _angle                 */
/*  Description: used to control Servo*/
/*               to turn to "_angle"  */
/*====================================*/
void handle(int _angle){
	RC_ANGLE = handle_center - HANDLE_STEP * _angle;
     8c8:	26 ef       	ldi	r18, 0xF6	; 246
     8ca:	ac 01       	movw	r20, r24
     8cc:	24 03       	mulsu	r18, r20
     8ce:	c0 01       	movw	r24, r0
     8d0:	25 9f       	mul	r18, r21
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     8da:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     8e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     8ea:	08 95       	ret

000008ec <handleMicro>:
}
void handleMicro(int _angle){
	RC_ANGLE = handle_center - _angle;
     8ec:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     8f0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     8f4:	28 1b       	sub	r18, r24
     8f6:	39 0b       	sbc	r19, r25
     8f8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     8fc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     900:	08 95       	ret

00000902 <save_handle_center>:
}
void save_handle_center ()
{
	eeprom_writebyte (HANDLE_CENTER_POS, 	handle_center);			//low byte
     902:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <handle_center>
     906:	88 e2       	ldi	r24, 0x28	; 40
     908:	1e df       	rcall	.-452    	; 0x746 <eeprom_writebyte>
	eeprom_writebyte (HANDLE_CENTER_POS+1, 	handle_center>>8);		//hight byte
     90a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <handle_center+0x1>
     90e:	89 e2       	ldi	r24, 0x29	; 41
     910:	1a cf       	rjmp	.-460    	; 0x746 <eeprom_writebyte>
     912:	08 95       	ret

00000914 <read_handle_center>:
}
void read_handle_center ()
{
	handle_center = eeprom_readbyte (HANDLE_CENTER_POS+1);
     914:	89 e2       	ldi	r24, 0x29	; 41
     916:	40 df       	rcall	.-384    	; 0x798 <eeprom_readbyte>
	handle_center <<= 8;
     918:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <handle_center>
     91c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <handle_center+0x1>
	handle_center = handle_center + eeprom_readbyte (HANDLE_CENTER_POS);
     920:	88 e2       	ldi	r24, 0x28	; 40
     922:	3a df       	rcall	.-396    	; 0x798 <eeprom_readbyte>
     924:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <handle_center>
     928:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <handle_center+0x1>
     92c:	a9 01       	movw	r20, r18
     92e:	48 0f       	add	r20, r24
     930:	51 1d       	adc	r21, r1
     932:	ca 01       	movw	r24, r20
     934:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <handle_center+0x1>
     938:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <handle_center>
	if (handle_center < 700)
     93c:	8c 3b       	cpi	r24, 0xBC	; 188
     93e:	52 e0       	ldi	r21, 0x02	; 2
     940:	95 07       	cpc	r25, r21
     942:	38 f4       	brcc	.+14     	; 0x952 <read_handle_center+0x3e>
		handle_center = 1500;
     944:	8c ed       	ldi	r24, 0xDC	; 220
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
     94c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
     950:	08 95       	ret
	if (handle_center > 2300)
     952:	8d 3f       	cpi	r24, 0xFD	; 253
     954:	98 40       	sbci	r25, 0x08	; 8
     956:	30 f0       	brcs	.+12     	; 0x964 <read_handle_center+0x50>
		handle_center = 1500;
     958:	8c ed       	ldi	r24, 0xDC	; 220
     95a:	95 e0       	ldi	r25, 0x05	; 5
     95c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
     960:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
     964:	08 95       	ret

00000966 <input_init>:
/*               for input function   */
/*              2. Dipswitch, push    */
/*                 button             */
/*====================================*/
void input_init(){
	BUTTON_DIR  &= ~(_BV(KEY0_PIN) | _BV(KEY1_PIN) | _BV(KEY2_PIN) | _BV(KEY3_PIN));
     966:	a1 e0       	ldi	r26, 0x01	; 1
     968:	b1 e0       	ldi	r27, 0x01	; 1
     96a:	8c 91       	ld	r24, X
     96c:	80 7f       	andi	r24, 0xF0	; 240
     96e:	8c 93       	st	X, r24
	BUTTON_PORT |= _BV(KEY0_PIN) | _BV(KEY1_PIN) | _BV(KEY2_PIN) | _BV(KEY3_PIN);			// 4 push button on MCU Circuit
     970:	e2 e0       	ldi	r30, 0x02	; 2
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	80 81       	ld	r24, Z
     976:	8f 60       	ori	r24, 0x0F	; 15
     978:	80 83       	st	Z, r24
	DIPSW_DIR  &= ~(_BV(SW0_PIN) | _BV(SW1_PIN) | _BV(SW2_PIN) | _BV(SW3_PIN));
     97a:	8c 91       	ld	r24, X
     97c:	8f 70       	andi	r24, 0x0F	; 15
     97e:	8c 93       	st	X, r24
	DIPSW_PORT |= _BV(SW0_PIN) | _BV(SW1_PIN) | _BV(SW2_PIN) | _BV(SW3_PIN);				// dip switch 4 on MCU Circuit
     980:	80 81       	ld	r24, Z
     982:	80 6f       	ori	r24, 0xF0	; 240
     984:	80 83       	st	Z, r24
	//DDRE  &= ~_BV(PE2);
//	DDRE  &= ~_BV(GATE_SENSOR_PIN);
//	PORTE |= _BV(GATE_SENSOR_PIN);		// sensor to recognize gate
	

	key1 = key2 = key0 = key_input = 0x0f;
     986:	8f e0       	ldi	r24, 0x0F	; 15
     988:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <key_input>
     98c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <key0>
     990:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <key2>
     994:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <key1>
	dipsw1 = dipsw2 = dipsw0 = dipsw_input = 0xf0;
     998:	80 ef       	ldi	r24, 0xF0	; 240
     99a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <dipsw_input>
     99e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <dipsw0>
     9a2:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <dipsw2>
     9a6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <dipsw1>
     9aa:	08 95       	ret

000009ac <update_input>:
/*             button                 */
/*====================================*/
void update_input(){
	unsigned char _temp;

	key2 = key1;
     9ac:	40 91 fd 02 	lds	r20, 0x02FD	; 0x8002fd <key1>
     9b0:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <key2>
	key1 = key0;
     9b4:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <key0>
     9b8:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <key1>
	dipsw2  = dipsw1;
     9bc:	50 91 f9 02 	lds	r21, 0x02F9	; 0x8002f9 <dipsw1>
     9c0:	50 93 ff 02 	sts	0x02FF, r21	; 0x8002ff <dipsw2>
	dipsw1  = dipsw0;
     9c4:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <dipsw0>
     9c8:	20 93 f9 02 	sts	0x02F9, r18	; 0x8002f9 <dipsw1>

	_temp = PINH;
     9cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
	dipsw0  = _temp & SW_MASK;
     9d0:	38 2f       	mov	r19, r24
     9d2:	30 7f       	andi	r19, 0xF0	; 240
     9d4:	30 93 f8 02 	sts	0x02F8, r19	; 0x8002f8 <dipsw0>
	key0 = _temp & KEY_MASK;
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <key0>

	if((dipsw0==dipsw1)&&(dipsw1==dipsw2))
     9de:	23 13       	cpse	r18, r19
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <update_input+0x3e>
     9e2:	52 13       	cpse	r21, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <update_input+0x3e>
		dipsw_input = dipsw0;
     9e6:	50 93 01 03 	sts	0x0301, r21	; 0x800301 <dipsw_input>

  	if ((key0 == key1) && (key1 == key2)){
     9ea:	98 13       	cpse	r25, r24
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <update_input+0x4a>
     9ee:	49 13       	cpse	r20, r25
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <update_input+0x4a>
		key_input = key0;
     9f2:	40 93 fa 02 	sts	0x02FA, r20	; 0x8002fa <key_input>
     9f6:	08 95       	ret

000009f8 <get_key>:
/*  Description: get state of push    */
/*         button on MCU circuit      */
/*		   _key_id is KEY0, KEY1, KEY2*/
/*			or KEY3					  */
/*====================================*/
unsigned char get_key(unsigned char _key_id){
     9f8:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <key_input>
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	a9 01       	movw	r20, r18
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <get_key+0xe>
     a02:	55 95       	asr	r21
     a04:	47 95       	ror	r20
     a06:	8a 95       	dec	r24
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <get_key+0xa>
     a0a:	ca 01       	movw	r24, r20
     a0c:	51 e0       	ldi	r21, 0x01	; 1
     a0e:	85 27       	eor	r24, r21
	if(key_input & _BV(_key_id))
		return 0;
	return 1;
}
     a10:	81 70       	andi	r24, 0x01	; 1
     a12:	08 95       	ret

00000a14 <get_dipsw>:
/*  Return value: unsigned char       */
/*  Description: get state of         */
/*                          dipswitch */
/*====================================*/
unsigned char get_dipsw(){
	return (dipsw_input>>4);
     a14:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <dipsw_input>
}
     a18:	82 95       	swap	r24
     a1a:	8f 70       	andi	r24, 0x0F	; 15
     a1c:	08 95       	ret

00000a1e <getGateSensor>:
/*               sensor               */
/*====================================*/
unsigned char getGateSensor(){
	
	return gatesensorMaskut;
}
     a1e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <gatesensorMaskut>
     a22:	08 95       	ret

00000a24 <LCD_Enable>:
     a24:	47 9a       	sbi	0x08, 7	; 8
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	8a 95       	dec	r24
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <LCD_Enable+0x4>
     a2c:	47 98       	cbi	0x08, 7	; 8
     a2e:	87 e5       	ldi	r24, 0x57	; 87
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <LCD_Enable+0xe>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <LCD_Enable+0x14>
     a38:	00 00       	nop
     a3a:	08 95       	ret

00000a3c <LCD_Send4Bit>:
     a3c:	98 b1       	in	r25, 0x08	; 8
     a3e:	8f 70       	andi	r24, 0x0F	; 15
     a40:	90 7f       	andi	r25, 0xF0	; 240
     a42:	89 2b       	or	r24, r25
     a44:	88 b9       	out	0x08, r24	; 8
     a46:	08 95       	ret

00000a48 <LCD_SendData>:
     a48:	cf 93       	push	r28
     a4a:	c8 2f       	mov	r28, r24
     a4c:	82 95       	swap	r24
     a4e:	8f 70       	andi	r24, 0x0F	; 15
     a50:	f5 df       	rcall	.-22     	; 0xa3c <LCD_Send4Bit>
     a52:	e8 df       	rcall	.-48     	; 0xa24 <LCD_Enable>
     a54:	8c 2f       	mov	r24, r28
     a56:	f2 df       	rcall	.-28     	; 0xa3c <LCD_Send4Bit>
     a58:	e5 df       	rcall	.-54     	; 0xa24 <LCD_Enable>
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <LCD_SendCommand>:
     a5e:	cf 93       	push	r28
     a60:	c8 2f       	mov	r28, r24
     a62:	45 98       	cbi	0x08, 5	; 8
     a64:	82 95       	swap	r24
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	e9 df       	rcall	.-46     	; 0xa3c <LCD_Send4Bit>
     a6a:	dc df       	rcall	.-72     	; 0xa24 <LCD_Enable>
     a6c:	8c 2f       	mov	r24, r28
     a6e:	e6 df       	rcall	.-52     	; 0xa3c <LCD_Send4Bit>
     a70:	d9 df       	rcall	.-78     	; 0xa24 <LCD_Enable>
     a72:	45 9a       	sbi	0x08, 5	; 8
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <LCD_Gotoxy>:
     a78:	45 98       	cbi	0x08, 5	; 8
     a7a:	61 11       	cpse	r22, r1
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <LCD_Gotoxy+0xa>
     a7e:	80 58       	subi	r24, 0x80	; 128
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <LCD_Gotoxy+0xc>
     a82:	80 54       	subi	r24, 0x40	; 64
     a84:	ef ed       	ldi	r30, 0xDF	; 223
     a86:	fe e2       	ldi	r31, 0x2E	; 46
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <LCD_Gotoxy+0x10>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <LCD_Gotoxy+0x16>
     a8e:	00 00       	nop
     a90:	e6 df       	rcall	.-52     	; 0xa5e <LCD_SendCommand>
     a92:	8f e9       	ldi	r24, 0x9F	; 159
     a94:	9f e0       	ldi	r25, 0x0F	; 15
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <LCD_Gotoxy+0x1e>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCD_Gotoxy+0x24>
     a9c:	00 00       	nop
     a9e:	08 95       	ret

00000aa0 <LCD_Clr>:
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	dd df       	rcall	.-70     	; 0xa5e <LCD_SendCommand>
     aa4:	8f e3       	ldi	r24, 0x3F	; 63
     aa6:	9c e9       	ldi	r25, 0x9C	; 156
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCD_Clr+0x8>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <LCD_Clr+0xe>
     aae:	00 00       	nop
     ab0:	08 95       	ret

00000ab2 <LCD_Init>:
     ab2:	87 b1       	in	r24, 0x07	; 7
     ab4:	8f 60       	ori	r24, 0x0F	; 15
     ab6:	87 b9       	out	0x07, r24	; 7
     ab8:	87 b1       	in	r24, 0x07	; 7
     aba:	80 6a       	ori	r24, 0xA0	; 160
     abc:	87 b9       	out	0x07, r24	; 7
     abe:	3e 9a       	sbi	0x07, 6	; 7
     ac0:	88 b1       	in	r24, 0x08	; 8
     ac2:	80 7f       	andi	r24, 0xF0	; 240
     ac4:	88 b9       	out	0x08, r24	; 8
     ac6:	2f ef       	ldi	r18, 0xFF	; 255
     ac8:	89 ef       	ldi	r24, 0xF9	; 249
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	21 50       	subi	r18, 0x01	; 1
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <LCD_Init+0x1a>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <LCD_Init+0x24>
     ad6:	00 00       	nop
     ad8:	45 98       	cbi	0x08, 5	; 8
     ada:	8f e1       	ldi	r24, 0x1F	; 31
     adc:	9e e4       	ldi	r25, 0x4E	; 78
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <LCD_Init+0x2c>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <LCD_Init+0x32>
     ae4:	00 00       	nop
     ae6:	46 98       	cbi	0x08, 6	; 8
     ae8:	8f e1       	ldi	r24, 0x1F	; 31
     aea:	9e e4       	ldi	r25, 0x4E	; 78
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <LCD_Init+0x3a>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <LCD_Init+0x40>
     af2:	00 00       	nop
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	b3 df       	rcall	.-154    	; 0xa5e <LCD_SendCommand>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	9c e9       	ldi	r25, 0x9C	; 156
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <LCD_Init+0x4a>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <LCD_Init+0x50>
     b02:	00 00       	nop
     b04:	8f df       	rcall	.-226    	; 0xa24 <LCD_Enable>
     b06:	8f e3       	ldi	r24, 0x3F	; 63
     b08:	9c e9       	ldi	r25, 0x9C	; 156
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <LCD_Init+0x58>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <LCD_Init+0x5e>
     b10:	00 00       	nop
     b12:	88 df       	rcall	.-240    	; 0xa24 <LCD_Enable>
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	9c e9       	ldi	r25, 0x9C	; 156
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <LCD_Init+0x66>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <LCD_Init+0x6c>
     b1e:	00 00       	nop
     b20:	81 df       	rcall	.-254    	; 0xa24 <LCD_Enable>
     b22:	8f e3       	ldi	r24, 0x3F	; 63
     b24:	9c e9       	ldi	r25, 0x9C	; 156
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <LCD_Init+0x74>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <LCD_Init+0x7a>
     b2c:	00 00       	nop
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	96 df       	rcall	.-212    	; 0xa5e <LCD_SendCommand>
     b32:	8f e3       	ldi	r24, 0x3F	; 63
     b34:	9c e9       	ldi	r25, 0x9C	; 156
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_Init+0x84>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <LCD_Init+0x8a>
     b3c:	00 00       	nop
     b3e:	88 e2       	ldi	r24, 0x28	; 40
     b40:	83 df       	rcall	.-250    	; 0xa48 <LCD_SendData>
     b42:	8f e3       	ldi	r24, 0x3F	; 63
     b44:	9c e9       	ldi	r25, 0x9C	; 156
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <LCD_Init+0x94>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <LCD_Init+0x9a>
     b4c:	00 00       	nop
     b4e:	8c e0       	ldi	r24, 0x0C	; 12
     b50:	86 df       	rcall	.-244    	; 0xa5e <LCD_SendCommand>
     b52:	8f e3       	ldi	r24, 0x3F	; 63
     b54:	9c e9       	ldi	r25, 0x9C	; 156
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <LCD_Init+0xa4>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <LCD_Init+0xaa>
     b5c:	00 00       	nop
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	7e df       	rcall	.-260    	; 0xa5e <LCD_SendCommand>
     b62:	8f e3       	ldi	r24, 0x3F	; 63
     b64:	9c e9       	ldi	r25, 0x9C	; 156
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <LCD_Init+0xb4>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <LCD_Init+0xba>
     b6c:	00 00       	nop
     b6e:	98 df       	rcall	.-208    	; 0xaa0 <LCD_Clr>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	81 cf       	rjmp	.-254    	; 0xa78 <LCD_Gotoxy>
     b76:	08 95       	ret

00000b78 <LCD_PutD>:
     b78:	80 5d       	subi	r24, 0xD0	; 208
     b7a:	66 cf       	rjmp	.-308    	; 0xa48 <LCD_SendData>
     b7c:	08 95       	ret

00000b7e <LCD_Puts>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	ec 01       	movw	r28, r24
     b84:	45 9a       	sbi	0x08, 5	; 8
     b86:	88 81       	ld	r24, Y
     b88:	88 23       	and	r24, r24
     b8a:	29 f0       	breq	.+10     	; 0xb96 <LCD_Puts+0x18>
     b8c:	21 96       	adiw	r28, 0x01	; 1
     b8e:	5c df       	rcall	.-328    	; 0xa48 <LCD_SendData>
     b90:	89 91       	ld	r24, Y+
     b92:	81 11       	cpse	r24, r1
     b94:	fc cf       	rjmp	.-8      	; 0xb8e <LCD_Puts+0x10>
     b96:	45 98       	cbi	0x08, 5	; 8
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <LCD_PutDec>:
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ac 01       	movw	r20, r24
     ba8:	8a 30       	cpi	r24, 0x0A	; 10
     baa:	91 05       	cpc	r25, r1
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <LCD_PutDec+0x12>
     bae:	69 c0       	rjmp	.+210    	; 0xc82 <LCD_PutDec+0xe4>
     bb0:	9c 01       	movw	r18, r24
     bb2:	32 95       	swap	r19
     bb4:	22 95       	swap	r18
     bb6:	2f 70       	andi	r18, 0x0F	; 15
     bb8:	23 27       	eor	r18, r19
     bba:	3f 70       	andi	r19, 0x0F	; 15
     bbc:	23 27       	eor	r18, r19
     bbe:	a7 e4       	ldi	r26, 0x47	; 71
     bc0:	b3 e0       	ldi	r27, 0x03	; 3
     bc2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	60 e1       	ldi	r22, 0x10	; 16
     bd4:	77 e2       	ldi	r23, 0x27	; 39
     bd6:	86 9f       	mul	r24, r22
     bd8:	90 01       	movw	r18, r0
     bda:	87 9f       	mul	r24, r23
     bdc:	30 0d       	add	r19, r0
     bde:	96 9f       	mul	r25, r22
     be0:	30 0d       	add	r19, r0
     be2:	11 24       	eor	r1, r1
     be4:	42 1b       	sub	r20, r18
     be6:	53 0b       	sbc	r21, r19
     be8:	9a 01       	movw	r18, r20
     bea:	36 95       	lsr	r19
     bec:	27 95       	ror	r18
     bee:	36 95       	lsr	r19
     bf0:	27 95       	ror	r18
     bf2:	36 95       	lsr	r19
     bf4:	27 95       	ror	r18
     bf6:	a5 ec       	ldi	r26, 0xC5	; 197
     bf8:	b0 e2       	ldi	r27, 0x20	; 32
     bfa:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     bfe:	92 95       	swap	r25
     c00:	82 95       	swap	r24
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	89 27       	eor	r24, r25
     c06:	9f 70       	andi	r25, 0x0F	; 15
     c08:	89 27       	eor	r24, r25
     c0a:	68 ee       	ldi	r22, 0xE8	; 232
     c0c:	73 e0       	ldi	r23, 0x03	; 3
     c0e:	86 9f       	mul	r24, r22
     c10:	90 01       	movw	r18, r0
     c12:	87 9f       	mul	r24, r23
     c14:	30 0d       	add	r19, r0
     c16:	96 9f       	mul	r25, r22
     c18:	30 0d       	add	r19, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	42 1b       	sub	r20, r18
     c1e:	53 0b       	sbc	r21, r19
     c20:	9a 01       	movw	r18, r20
     c22:	36 95       	lsr	r19
     c24:	27 95       	ror	r18
     c26:	36 95       	lsr	r19
     c28:	27 95       	ror	r18
     c2a:	ab e7       	ldi	r26, 0x7B	; 123
     c2c:	b4 e1       	ldi	r27, 0x14	; 20
     c2e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	64 e6       	ldi	r22, 0x64	; 100
     c38:	68 9f       	mul	r22, r24
     c3a:	90 01       	movw	r18, r0
     c3c:	69 9f       	mul	r22, r25
     c3e:	30 0d       	add	r19, r0
     c40:	11 24       	eor	r1, r1
     c42:	42 1b       	sub	r20, r18
     c44:	53 0b       	sbc	r21, r19
     c46:	9a 01       	movw	r18, r20
     c48:	ad ec       	ldi	r26, 0xCD	; 205
     c4a:	bc ec       	ldi	r27, 0xCC	; 204
     c4c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	9c 01       	movw	r18, r24
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	24 2f       	mov	r18, r20
     c74:	28 1b       	sub	r18, r24
     c76:	82 2f       	mov	r24, r18
     c78:	7f df       	rcall	.-258    	; 0xb78 <LCD_PutD>
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	7f df       	rcall	.-258    	; 0xb7e <LCD_Puts>
     c80:	e2 c0       	rjmp	.+452    	; 0xe46 <LCD_PutDec+0x2a8>
     c82:	84 36       	cpi	r24, 0x64	; 100
     c84:	91 05       	cpc	r25, r1
     c86:	08 f0       	brcs	.+2      	; 0xc8a <LCD_PutDec+0xec>
     c88:	6d c0       	rjmp	.+218    	; 0xd64 <LCD_PutDec+0x1c6>
     c8a:	9c 01       	movw	r18, r24
     c8c:	32 95       	swap	r19
     c8e:	22 95       	swap	r18
     c90:	2f 70       	andi	r18, 0x0F	; 15
     c92:	23 27       	eor	r18, r19
     c94:	3f 70       	andi	r19, 0x0F	; 15
     c96:	23 27       	eor	r18, r19
     c98:	a7 e4       	ldi	r26, 0x47	; 71
     c9a:	b3 e0       	ldi	r27, 0x03	; 3
     c9c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     ca0:	96 95       	lsr	r25
     ca2:	87 95       	ror	r24
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	60 e1       	ldi	r22, 0x10	; 16
     cae:	77 e2       	ldi	r23, 0x27	; 39
     cb0:	86 9f       	mul	r24, r22
     cb2:	90 01       	movw	r18, r0
     cb4:	87 9f       	mul	r24, r23
     cb6:	30 0d       	add	r19, r0
     cb8:	96 9f       	mul	r25, r22
     cba:	30 0d       	add	r19, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	42 1b       	sub	r20, r18
     cc0:	53 0b       	sbc	r21, r19
     cc2:	9a 01       	movw	r18, r20
     cc4:	36 95       	lsr	r19
     cc6:	27 95       	ror	r18
     cc8:	36 95       	lsr	r19
     cca:	27 95       	ror	r18
     ccc:	36 95       	lsr	r19
     cce:	27 95       	ror	r18
     cd0:	a5 ec       	ldi	r26, 0xC5	; 197
     cd2:	b0 e2       	ldi	r27, 0x20	; 32
     cd4:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     cd8:	92 95       	swap	r25
     cda:	82 95       	swap	r24
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	89 27       	eor	r24, r25
     ce0:	9f 70       	andi	r25, 0x0F	; 15
     ce2:	89 27       	eor	r24, r25
     ce4:	68 ee       	ldi	r22, 0xE8	; 232
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	86 9f       	mul	r24, r22
     cea:	90 01       	movw	r18, r0
     cec:	87 9f       	mul	r24, r23
     cee:	30 0d       	add	r19, r0
     cf0:	96 9f       	mul	r25, r22
     cf2:	30 0d       	add	r19, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	42 1b       	sub	r20, r18
     cf8:	53 0b       	sbc	r21, r19
     cfa:	9a 01       	movw	r18, r20
     cfc:	36 95       	lsr	r19
     cfe:	27 95       	ror	r18
     d00:	36 95       	lsr	r19
     d02:	27 95       	ror	r18
     d04:	ab e7       	ldi	r26, 0x7B	; 123
     d06:	b4 e1       	ldi	r27, 0x14	; 20
     d08:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     d0c:	8c 01       	movw	r16, r24
     d0e:	16 95       	lsr	r17
     d10:	07 95       	ror	r16
     d12:	24 e6       	ldi	r18, 0x64	; 100
     d14:	20 9f       	mul	r18, r16
     d16:	c0 01       	movw	r24, r0
     d18:	21 9f       	mul	r18, r17
     d1a:	90 0d       	add	r25, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	8a 01       	movw	r16, r20
     d20:	08 1b       	sub	r16, r24
     d22:	19 0b       	sbc	r17, r25
     d24:	98 01       	movw	r18, r16
     d26:	ad ec       	ldi	r26, 0xCD	; 205
     d28:	bc ec       	ldi	r27, 0xCC	; 204
     d2a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     d2e:	ec 01       	movw	r28, r24
     d30:	d6 95       	lsr	r29
     d32:	c7 95       	ror	r28
     d34:	d6 95       	lsr	r29
     d36:	c7 95       	ror	r28
     d38:	d6 95       	lsr	r29
     d3a:	c7 95       	ror	r28
     d3c:	8c 2f       	mov	r24, r28
     d3e:	1c df       	rcall	.-456    	; 0xb78 <LCD_PutD>
     d40:	ce 01       	movw	r24, r28
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	cc 0f       	add	r28, r28
     d48:	dd 1f       	adc	r29, r29
     d4a:	cc 0f       	add	r28, r28
     d4c:	dd 1f       	adc	r29, r29
     d4e:	cc 0f       	add	r28, r28
     d50:	dd 1f       	adc	r29, r29
     d52:	c8 0f       	add	r28, r24
     d54:	d9 1f       	adc	r29, r25
     d56:	80 2f       	mov	r24, r16
     d58:	8c 1b       	sub	r24, r28
     d5a:	0e df       	rcall	.-484    	; 0xb78 <LCD_PutD>
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	0e df       	rcall	.-484    	; 0xb7e <LCD_Puts>
     d62:	71 c0       	rjmp	.+226    	; 0xe46 <LCD_PutDec+0x2a8>
     d64:	88 3e       	cpi	r24, 0xE8	; 232
     d66:	23 e0       	ldi	r18, 0x03	; 3
     d68:	92 07       	cpc	r25, r18
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <LCD_PutDec+0x1d0>
     d6c:	6c c0       	rjmp	.+216    	; 0xe46 <LCD_PutDec+0x2a8>
     d6e:	9c 01       	movw	r18, r24
     d70:	32 95       	swap	r19
     d72:	22 95       	swap	r18
     d74:	2f 70       	andi	r18, 0x0F	; 15
     d76:	23 27       	eor	r18, r19
     d78:	3f 70       	andi	r19, 0x0F	; 15
     d7a:	23 27       	eor	r18, r19
     d7c:	a7 e4       	ldi	r26, 0x47	; 71
     d7e:	b3 e0       	ldi	r27, 0x03	; 3
     d80:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     d84:	96 95       	lsr	r25
     d86:	87 95       	ror	r24
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	60 e1       	ldi	r22, 0x10	; 16
     d92:	77 e2       	ldi	r23, 0x27	; 39
     d94:	86 9f       	mul	r24, r22
     d96:	90 01       	movw	r18, r0
     d98:	87 9f       	mul	r24, r23
     d9a:	30 0d       	add	r19, r0
     d9c:	96 9f       	mul	r25, r22
     d9e:	30 0d       	add	r19, r0
     da0:	11 24       	eor	r1, r1
     da2:	42 1b       	sub	r20, r18
     da4:	53 0b       	sbc	r21, r19
     da6:	9a 01       	movw	r18, r20
     da8:	36 95       	lsr	r19
     daa:	27 95       	ror	r18
     dac:	36 95       	lsr	r19
     dae:	27 95       	ror	r18
     db0:	36 95       	lsr	r19
     db2:	27 95       	ror	r18
     db4:	a5 ec       	ldi	r26, 0xC5	; 197
     db6:	b0 e2       	ldi	r27, 0x20	; 32
     db8:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     dbc:	8c 01       	movw	r16, r24
     dbe:	12 95       	swap	r17
     dc0:	02 95       	swap	r16
     dc2:	0f 70       	andi	r16, 0x0F	; 15
     dc4:	01 27       	eor	r16, r17
     dc6:	1f 70       	andi	r17, 0x0F	; 15
     dc8:	01 27       	eor	r16, r17
     dca:	28 ee       	ldi	r18, 0xE8	; 232
     dcc:	33 e0       	ldi	r19, 0x03	; 3
     dce:	02 9f       	mul	r16, r18
     dd0:	c0 01       	movw	r24, r0
     dd2:	03 9f       	mul	r16, r19
     dd4:	90 0d       	add	r25, r0
     dd6:	12 9f       	mul	r17, r18
     dd8:	90 0d       	add	r25, r0
     dda:	11 24       	eor	r1, r1
     ddc:	8a 01       	movw	r16, r20
     dde:	08 1b       	sub	r16, r24
     de0:	19 0b       	sbc	r17, r25
     de2:	98 01       	movw	r18, r16
     de4:	36 95       	lsr	r19
     de6:	27 95       	ror	r18
     de8:	36 95       	lsr	r19
     dea:	27 95       	ror	r18
     dec:	ab e7       	ldi	r26, 0x7B	; 123
     dee:	b4 e1       	ldi	r27, 0x14	; 20
     df0:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     df4:	ec 01       	movw	r28, r24
     df6:	d6 95       	lsr	r29
     df8:	c7 95       	ror	r28
     dfa:	8c 2f       	mov	r24, r28
     dfc:	bd de       	rcall	.-646    	; 0xb78 <LCD_PutD>
     dfe:	24 e6       	ldi	r18, 0x64	; 100
     e00:	2c 9f       	mul	r18, r28
     e02:	c0 01       	movw	r24, r0
     e04:	2d 9f       	mul	r18, r29
     e06:	90 0d       	add	r25, r0
     e08:	11 24       	eor	r1, r1
     e0a:	08 1b       	sub	r16, r24
     e0c:	19 0b       	sbc	r17, r25
     e0e:	98 01       	movw	r18, r16
     e10:	ad ec       	ldi	r26, 0xCD	; 205
     e12:	bc ec       	ldi	r27, 0xCC	; 204
     e14:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__umulhisi3>
     e18:	ec 01       	movw	r28, r24
     e1a:	d6 95       	lsr	r29
     e1c:	c7 95       	ror	r28
     e1e:	d6 95       	lsr	r29
     e20:	c7 95       	ror	r28
     e22:	d6 95       	lsr	r29
     e24:	c7 95       	ror	r28
     e26:	8c 2f       	mov	r24, r28
     e28:	a7 de       	rcall	.-690    	; 0xb78 <LCD_PutD>
     e2a:	ce 01       	movw	r24, r28
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	cc 0f       	add	r28, r28
     e32:	dd 1f       	adc	r29, r29
     e34:	cc 0f       	add	r28, r28
     e36:	dd 1f       	adc	r29, r29
     e38:	cc 0f       	add	r28, r28
     e3a:	dd 1f       	adc	r29, r29
     e3c:	c8 0f       	add	r28, r24
     e3e:	d9 1f       	adc	r29, r25
     e40:	80 2f       	mov	r24, r16
     e42:	8c 1b       	sub	r24, r28
     e44:	99 de       	rcall	.-718    	; 0xb78 <LCD_PutD>
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

00000e50 <led_init>:
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	81 b9       	out	0x01, r24	; 1
     e54:	82 b9       	out	0x02, r24	; 2
     e56:	ea e0       	ldi	r30, 0x0A	; 10
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	88 63       	ori	r24, 0x38	; 56
     e5e:	80 83       	st	Z, r24
     e60:	eb e0       	ldi	r30, 0x0B	; 11
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	80 81       	ld	r24, Z
     e66:	87 7c       	andi	r24, 0xC7	; 199
     e68:	80 83       	st	Z, r24
     e6a:	08 95       	ret

00000e6c <led_put>:
     e6c:	80 95       	com	r24
     e6e:	82 b9       	out	0x02, r24	; 2
     e70:	08 95       	ret

00000e72 <RGB>:
     e72:	88 23       	and	r24, r24
     e74:	31 f0       	breq	.+12     	; 0xe82 <RGB+0x10>
     e76:	eb e0       	ldi	r30, 0x0B	; 11
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	80 81       	ld	r24, Z
     e7c:	80 61       	ori	r24, 0x10	; 16
     e7e:	80 83       	st	Z, r24
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <RGB+0x1a>
     e82:	eb e0       	ldi	r30, 0x0B	; 11
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	80 81       	ld	r24, Z
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	80 83       	st	Z, r24
     e8c:	66 23       	and	r22, r22
     e8e:	31 f0       	breq	.+12     	; 0xe9c <RGB+0x2a>
     e90:	eb e0       	ldi	r30, 0x0B	; 11
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	80 83       	st	Z, r24
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <RGB+0x34>
     e9c:	eb e0       	ldi	r30, 0x0B	; 11
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7d       	andi	r24, 0xDF	; 223
     ea4:	80 83       	st	Z, r24
     ea6:	44 23       	and	r20, r20
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <RGB+0x44>
     eaa:	eb e0       	ldi	r30, 0x0B	; 11
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	80 83       	st	Z, r24
     eb4:	08 95       	ret
     eb6:	eb e0       	ldi	r30, 0x0B	; 11
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	80 81       	ld	r24, Z
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	80 83       	st	Z, r24
     ec0:	08 95       	ret

00000ec2 <setup>:
		handleAndSpeed (5,speedRun);
		break;
		case 0x0e://
		case 0x0c://
		case 0x04:
		handleAndSpeed (10,speedRun);
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	fc dc       	rcall	.-1544   	; 0x8c8 <handle>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
     edc:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
     ee0:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
     ee4:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <cnt4+0x1>
     ee8:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <cnt4>
     eec:	80 e3       	ldi	r24, 0x30	; 48
     eee:	95 e7       	ldi	r25, 0x75	; 117
     ef0:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <RunTimer+0x1>
     ef4:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <RunTimer>
     ef8:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <sensorPos>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
     f02:	88 dd       	rcall	.-1264   	; 0xa14 <get_dipsw>
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	fc 01       	movw	r30, r24
     f08:	37 97       	sbiw	r30, 0x07	; 7
     f0a:	e9 30       	cpi	r30, 0x09	; 9
     f0c:	f1 05       	cpc	r31, r1
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <setup+0x50>
     f10:	2f c2       	rjmp	.+1118   	; 0x1370 <__EEPROM_REGION_LENGTH__+0x370>
     f12:	88 27       	eor	r24, r24
     f14:	ee 58       	subi	r30, 0x8E	; 142
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	8f 4f       	sbci	r24, 0xFF	; 255
     f1a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__tablejump2__>
     f1e:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
     f22:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
     f26:	84 e6       	ldi	r24, 0x64	; 100
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
     f2e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
     f32:	42 e3       	ldi	r20, 0x32	; 50
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
     f3a:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
     f3e:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
     f42:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
     f46:	28 ec       	ldi	r18, 0xC8	; 200
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
     f4e:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
     f52:	6a e0       	ldi	r22, 0x0A	; 10
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <angleChangeLanes+0x1>
     f5a:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <angleChangeLanes>
     f5e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
     f62:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
     f66:	68 e7       	ldi	r22, 0x78	; 120
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
     f6e:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
     f72:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedChangeLanes+0x1>
     f76:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedChangeLanes>
     f7a:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
     f7e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
     f82:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <timerBoostAfterChangeLanes+0x1>
     f86:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <timerBoostAfterChangeLanes>
     f8a:	8d e2       	ldi	r24, 0x2D	; 45
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
     f92:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
     f96:	1c c2       	rjmp	.+1080   	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
     f98:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
     f9c:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
     fa0:	24 e6       	ldi	r18, 0x64	; 100
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	30 93 2d 03 	sts	0x032D, r19	; 0x80032d <timerBrake90+0x1>
     fa8:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <timerBrake90>
     fac:	82 e3       	ldi	r24, 0x32	; 50
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <speed90+0x1>
     fb4:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <speed90>
     fb8:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <speedBoostAfter90+0x1>
     fbc:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <speedBoostAfter90>
     fc0:	48 ec       	ldi	r20, 0xC8	; 200
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	50 93 43 03 	sts	0x0343, r21	; 0x800343 <timerBoostAfter90+0x1>
     fc8:	40 93 42 03 	sts	0x0342, r20	; 0x800342 <timerBoostAfter90>
     fcc:	6a e0       	ldi	r22, 0x0A	; 10
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <angleChangeLanes+0x1>
     fd4:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <angleChangeLanes>
     fd8:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
     fdc:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
     fe0:	68 e7       	ldi	r22, 0x78	; 120
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
     fe8:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
     fec:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <speedChangeLanes+0x1>
     ff0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <speedChangeLanes>
     ff4:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <speedBoostAfterChangeLanes+0x1>
     ff8:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <speedBoostAfterChangeLanes>
     ffc:	50 93 29 03 	sts	0x0329, r21	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    1000:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <timerBoostAfterChangeLanes>
    1004:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    1008:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    100c:	e1 c1       	rjmp	.+962    	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    100e:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
    1012:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
    1016:	84 e6       	ldi	r24, 0x64	; 100
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
    101e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
    1022:	42 e3       	ldi	r20, 0x32	; 50
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    102a:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    102e:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    1032:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    1036:	28 ec       	ldi	r18, 0xC8	; 200
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
    103e:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
    1042:	6a e0       	ldi	r22, 0x0A	; 10
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <angleChangeLanes+0x1>
    104a:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <angleChangeLanes>
    104e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    1052:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    1056:	68 e7       	ldi	r22, 0x78	; 120
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    105e:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    1062:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedChangeLanes+0x1>
    1066:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedChangeLanes>
    106a:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    106e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
    1072:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    1076:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <timerBoostAfterChangeLanes>
    107a:	87 e3       	ldi	r24, 0x37	; 55
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    1082:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    1086:	a4 c1       	rjmp	.+840    	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    1088:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
    108c:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
    1090:	84 e6       	ldi	r24, 0x64	; 100
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
    1098:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
    109c:	42 e3       	ldi	r20, 0x32	; 50
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    10a4:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    10a8:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    10ac:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    10b0:	28 ec       	ldi	r18, 0xC8	; 200
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
    10b8:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
    10bc:	6a e0       	ldi	r22, 0x0A	; 10
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <angleChangeLanes+0x1>
    10c4:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <angleChangeLanes>
    10c8:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    10cc:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    10d0:	68 e7       	ldi	r22, 0x78	; 120
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    10d8:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    10dc:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedChangeLanes+0x1>
    10e0:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedChangeLanes>
    10e4:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    10e8:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
    10ec:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    10f0:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <timerBoostAfterChangeLanes>
    10f4:	8c e3       	ldi	r24, 0x3C	; 60
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    10fc:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    1100:	67 c1       	rjmp	.+718    	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    1102:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
    1106:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
    110a:	84 e6       	ldi	r24, 0x64	; 100
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
    1112:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
    1116:	42 e3       	ldi	r20, 0x32	; 50
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    111e:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    1122:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    1126:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    112a:	28 ec       	ldi	r18, 0xC8	; 200
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
    1132:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
    1136:	6a e0       	ldi	r22, 0x0A	; 10
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <angleChangeLanes+0x1>
    113e:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <angleChangeLanes>
    1142:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    1146:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    114a:	68 e7       	ldi	r22, 0x78	; 120
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    1152:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    1156:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedChangeLanes+0x1>
    115a:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedChangeLanes>
    115e:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    1162:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
    1166:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    116a:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <timerBoostAfterChangeLanes>
    116e:	81 e4       	ldi	r24, 0x41	; 65
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    1176:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    117a:	2a c1       	rjmp	.+596    	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    117c:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
    1180:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
    1184:	84 e6       	ldi	r24, 0x64	; 100
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
    118c:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
    1190:	42 e3       	ldi	r20, 0x32	; 50
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    1198:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    119c:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    11a0:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    11a4:	28 ec       	ldi	r18, 0xC8	; 200
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
    11ac:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
    11b0:	6a e0       	ldi	r22, 0x0A	; 10
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <angleChangeLanes+0x1>
    11b8:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <angleChangeLanes>
    11bc:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    11c0:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    11c4:	68 e7       	ldi	r22, 0x78	; 120
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    11cc:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    11d0:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedChangeLanes+0x1>
    11d4:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedChangeLanes>
    11d8:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    11dc:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
    11e0:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    11e4:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <timerBoostAfterChangeLanes>
    11e8:	86 e4       	ldi	r24, 0x46	; 70
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    11f0:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    11f4:	ed c0       	rjmp	.+474    	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    11f6:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
    11fa:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
    11fe:	84 e6       	ldi	r24, 0x64	; 100
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
    1206:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
    120a:	42 e3       	ldi	r20, 0x32	; 50
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	50 93 07 03 	sts	0x0307, r21	; 0x800307 <speed90+0x1>
    1212:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <speed90>
    1216:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    121a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    121e:	28 ec       	ldi	r18, 0xC8	; 200
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
    1226:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
    122a:	6a e0       	ldi	r22, 0x0A	; 10
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <angleChangeLanes+0x1>
    1232:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <angleChangeLanes>
    1236:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    123a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    123e:	68 e7       	ldi	r22, 0x78	; 120
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <timerBrakeChangeLanes+0x1>
    1246:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <timerBrakeChangeLanes>
    124a:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedChangeLanes+0x1>
    124e:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedChangeLanes>
    1252:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    1256:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
    125a:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    125e:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <timerBoostAfterChangeLanes>
    1262:	8b e4       	ldi	r24, 0x4B	; 75
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    126a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    126e:	b0 c0       	rjmp	.+352    	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    1270:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
    1274:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
    1278:	86 e9       	ldi	r24, 0x96	; 150
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
    1280:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
    1284:	84 e6       	ldi	r24, 0x64	; 100
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <speed90+0x1>
    128c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <speed90>
    1290:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    1294:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    1298:	28 ec       	ldi	r18, 0xC8	; 200
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
    12a0:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
    12a4:	4a e0       	ldi	r20, 0x0A	; 10
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	50 93 27 03 	sts	0x0327, r21	; 0x800327 <angleChangeLanes+0x1>
    12ac:	40 93 26 03 	sts	0x0326, r20	; 0x800326 <angleChangeLanes>
    12b0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    12b4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    12b8:	48 e7       	ldi	r20, 0x78	; 120
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	50 93 0b 03 	sts	0x030B, r21	; 0x80030b <timerBrakeChangeLanes+0x1>
    12c0:	40 93 0a 03 	sts	0x030A, r20	; 0x80030a <timerBrakeChangeLanes>
    12c4:	42 e3       	ldi	r20, 0x32	; 50
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	50 93 23 03 	sts	0x0323, r21	; 0x800323 <speedChangeLanes+0x1>
    12cc:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <speedChangeLanes>
    12d0:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    12d4:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
    12d8:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    12dc:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <timerBoostAfterChangeLanes>
    12e0:	80 e5       	ldi	r24, 0x50	; 80
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    12e8:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    12ec:	71 c0       	rjmp	.+226    	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    12ee:	82 e3       	ldi	r24, 0x32	; 50
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <speedBrake90+0x1>
    12f6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <speedBrake90>
    12fa:	89 e1       	ldi	r24, 0x19	; 25
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timerBrake90+0x1>
    1302:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timerBrake90>
    1306:	80 e5       	ldi	r24, 0x50	; 80
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <speed90+0x1>
    130e:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <speed90>
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <speedBoostAfter90+0x1>
    131a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <speedBoostAfter90>
    131e:	24 e6       	ldi	r18, 0x64	; 100
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <timerBoostAfter90+0x1>
    1326:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <timerBoostAfter90>
    132a:	2f e0       	ldi	r18, 0x0F	; 15
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	30 93 27 03 	sts	0x0327, r19	; 0x800327 <angleChangeLanes+0x1>
    1332:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <angleChangeLanes>
    1336:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    133a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    133e:	24 e1       	ldi	r18, 0x14	; 20
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	30 93 0b 03 	sts	0x030B, r19	; 0x80030b <timerBrakeChangeLanes+0x1>
    1346:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <timerBrakeChangeLanes>
    134a:	26 e9       	ldi	r18, 0x96	; 150
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <speedChangeLanes+0x1>
    1352:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <speedChangeLanes>
    1356:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    135a:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <speedBoostAfterChangeLanes>
    135e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    1362:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <timerBoostAfterChangeLanes>
    1366:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <speedRunForward+0x1>
    136a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <speedRunForward>
    136e:	30 c0       	rjmp	.+96     	; 0x13d0 <__EEPROM_REGION_LENGTH__+0x3d0>
    1370:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <speedBrake90+0x1>
    1374:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <speedBrake90>
    1378:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <timerBrake90+0x1>
    137c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <timerBrake90>
    1380:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <speed90+0x1>
    1384:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <speed90>
    1388:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <speedBoostAfter90+0x1>
    138c:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <speedBoostAfter90>
    1390:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <timerBoostAfter90+0x1>
    1394:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <timerBoostAfter90>
    1398:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <angleChangeLanes+0x1>
    139c:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <angleChangeLanes>
    13a0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <speedBrakeChangeLanes+0x1>
    13a4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <speedBrakeChangeLanes>
    13a8:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <timerBrakeChangeLanes+0x1>
    13ac:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <timerBrakeChangeLanes>
    13b0:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <speedChangeLanes+0x1>
    13b4:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <speedChangeLanes>
    13b8:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    13bc:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <speedBoostAfterChangeLanes>
    13c0:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    13c4:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <timerBoostAfterChangeLanes>
    13c8:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <speedRunForward+0x1>
    13cc:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <speedRunForward>
    13d0:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <speedRunForward>
    13d4:	30 91 1b 03 	lds	r19, 0x031B	; 0x80031b <speedRunForward+0x1>
    13d8:	30 93 05 03 	sts	0x0305, r19	; 0x800305 <speedRun0+0x1>
    13dc:	20 93 04 03 	sts	0x0304, r18	; 0x800304 <speedRun0>
    13e0:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <angle0+0x1>
    13e4:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <angle0>
    13e8:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <speedRun1+0x1>
    13ec:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <speedRun1>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <angle1+0x1>
    13f8:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <angle1>
    13fc:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <speedRun2+0x1>
    1400:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <speedRun2>
    1404:	03 e0       	ldi	r16, 0x03	; 3
    1406:	10 e0       	ldi	r17, 0x00	; 0
    1408:	10 93 25 03 	sts	0x0325, r17	; 0x800325 <angle2+0x1>
    140c:	00 93 24 03 	sts	0x0324, r16	; 0x800324 <angle2>
    1410:	43 e6       	ldi	r20, 0x63	; 99
    1412:	42 9f       	mul	r20, r18
    1414:	c0 01       	movw	r24, r0
    1416:	43 9f       	mul	r20, r19
    1418:	90 0d       	add	r25, r0
    141a:	11 24       	eor	r1, r1
    141c:	e4 e6       	ldi	r30, 0x64	; 100
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	bf 01       	movw	r22, r30
    1422:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    1426:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <speedRun3+0x1>
    142a:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <speedRun3>
    142e:	c7 e0       	ldi	r28, 0x07	; 7
    1430:	d0 e0       	ldi	r29, 0x00	; 0
    1432:	d0 93 3b 03 	sts	0x033B, r29	; 0x80033b <angle3+0x1>
    1436:	c0 93 3a 03 	sts	0x033A, r28	; 0x80033a <angle3>
    143a:	45 e5       	ldi	r20, 0x55	; 85
    143c:	42 9f       	mul	r20, r18
    143e:	c0 01       	movw	r24, r0
    1440:	43 9f       	mul	r20, r19
    1442:	90 0d       	add	r25, r0
    1444:	11 24       	eor	r1, r1
    1446:	bf 01       	movw	r22, r30
    1448:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    144c:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <speedRun4+0x1>
    1450:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <speedRun4>
    1454:	10 93 21 03 	sts	0x0321, r17	; 0x800321 <angle4+0x1>
    1458:	00 93 20 03 	sts	0x0320, r16	; 0x800320 <angle4>
    145c:	40 e5       	ldi	r20, 0x50	; 80
    145e:	42 9f       	mul	r20, r18
    1460:	c0 01       	movw	r24, r0
    1462:	43 9f       	mul	r20, r19
    1464:	90 0d       	add	r25, r0
    1466:	11 24       	eor	r1, r1
    1468:	bf 01       	movw	r22, r30
    146a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    146e:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <speedRun5+0x1>
    1472:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <speedRun5>
    1476:	85 e0       	ldi	r24, 0x05	; 5
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <angle5+0x1>
    147e:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <angle5>
    1482:	4b e4       	ldi	r20, 0x4B	; 75
    1484:	42 9f       	mul	r20, r18
    1486:	c0 01       	movw	r24, r0
    1488:	43 9f       	mul	r20, r19
    148a:	90 0d       	add	r25, r0
    148c:	11 24       	eor	r1, r1
    148e:	bf 01       	movw	r22, r30
    1490:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    1494:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <speedRun6+0x1>
    1498:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <speedRun6>
    149c:	d0 93 19 03 	sts	0x0319, r29	; 0x800319 <angle6+0x1>
    14a0:	c0 93 18 03 	sts	0x0318, r28	; 0x800318 <angle6>
    14a4:	41 e4       	ldi	r20, 0x41	; 65
    14a6:	42 9f       	mul	r20, r18
    14a8:	c0 01       	movw	r24, r0
    14aa:	43 9f       	mul	r20, r19
    14ac:	90 0d       	add	r25, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	bf 01       	movw	r22, r30
    14b2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    14b6:	70 93 3f 03 	sts	0x033F, r23	; 0x80033f <speedRun7+0x1>
    14ba:	60 93 3e 03 	sts	0x033E, r22	; 0x80033e <speedRun7>
    14be:	8b e0       	ldi	r24, 0x0B	; 11
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angle7+0x1>
    14c6:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angle7>
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <checkCrossLine>:
    14d4:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <sensor>
    14d8:	93 7c       	andi	r25, 0xC3	; 195
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	93 3c       	cpi	r25, 0xC3	; 195
    14de:	09 f0       	breq	.+2      	; 0x14e2 <checkCrossLine+0xe>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	08 95       	ret

000014e4 <checkCrossHalfLine>:
    14e4:	f7 df       	rcall	.-18     	; 0x14d4 <checkCrossLine>
    14e6:	81 11       	cpse	r24, r1
    14e8:	0d c0       	rjmp	.+26     	; 0x1504 <checkCrossHalfLine+0x20>
    14ea:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    14ee:	98 2f       	mov	r25, r24
    14f0:	90 7f       	andi	r25, 0xF0	; 240
    14f2:	90 3f       	cpi	r25, 0xF0	; 240
    14f4:	49 f0       	breq	.+18     	; 0x1508 <checkCrossHalfLine+0x24>
    14f6:	98 2f       	mov	r25, r24
    14f8:	9f 70       	andi	r25, 0x0F	; 15
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	9f 30       	cpi	r25, 0x0F	; 15
    14fe:	29 f0       	breq	.+10     	; 0x150a <checkCrossHalfLine+0x26>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	08 95       	ret
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	08 95       	ret
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	08 95       	ret

0000150c <handleAndSpeed>:
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	ec 01       	movw	r28, r24
    1516:	8b 01       	movw	r16, r22
    1518:	d7 d9       	rcall	.-3154   	; 0x8c8 <handle>
    151a:	dd 23       	and	r29, r29
    151c:	14 f5       	brge	.+68     	; 0x1562 <handleAndSpeed+0x56>
    151e:	d1 95       	neg	r29
    1520:	c1 95       	neg	r28
    1522:	d1 09       	sbc	r29, r1
    1524:	fe 01       	movw	r30, r28
    1526:	e0 5f       	subi	r30, 0xF0	; 240
    1528:	fd 4f       	sbci	r31, 0xFD	; 253
    152a:	20 81       	ld	r18, Z
    152c:	20 9f       	mul	r18, r16
    152e:	c0 01       	movw	r24, r0
    1530:	21 9f       	mul	r18, r17
    1532:	90 0d       	add	r25, r0
    1534:	11 24       	eor	r1, r1
    1536:	24 e6       	ldi	r18, 0x64	; 100
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	b9 01       	movw	r22, r18
    153c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    1540:	fb 01       	movw	r30, r22
    1542:	ce 5b       	subi	r28, 0xBE	; 190
    1544:	dd 4f       	sbci	r29, 0xFD	; 253
    1546:	48 81       	ld	r20, Y
    1548:	40 9f       	mul	r20, r16
    154a:	c0 01       	movw	r24, r0
    154c:	41 9f       	mul	r20, r17
    154e:	90 0d       	add	r25, r0
    1550:	11 24       	eor	r1, r1
    1552:	b9 01       	movw	r22, r18
    1554:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    1558:	cb 01       	movw	r24, r22
    155a:	bf 01       	movw	r22, r30
    155c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
    1560:	25 c0       	rjmp	.+74     	; 0x15ac <handleAndSpeed+0xa0>
    1562:	20 97       	sbiw	r28, 0x00	; 0
    1564:	29 f4       	brne	.+10     	; 0x1570 <handleAndSpeed+0x64>
    1566:	b8 01       	movw	r22, r16
    1568:	c8 01       	movw	r24, r16
    156a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
    156e:	1e c0       	rjmp	.+60     	; 0x15ac <handleAndSpeed+0xa0>
    1570:	fe 01       	movw	r30, r28
    1572:	ee 5b       	subi	r30, 0xBE	; 190
    1574:	fd 4f       	sbci	r31, 0xFD	; 253
    1576:	20 81       	ld	r18, Z
    1578:	20 9f       	mul	r18, r16
    157a:	c0 01       	movw	r24, r0
    157c:	21 9f       	mul	r18, r17
    157e:	90 0d       	add	r25, r0
    1580:	11 24       	eor	r1, r1
    1582:	24 e6       	ldi	r18, 0x64	; 100
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	b9 01       	movw	r22, r18
    1588:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    158c:	fb 01       	movw	r30, r22
    158e:	c0 5f       	subi	r28, 0xF0	; 240
    1590:	dd 4f       	sbci	r29, 0xFD	; 253
    1592:	48 81       	ld	r20, Y
    1594:	40 9f       	mul	r20, r16
    1596:	c0 01       	movw	r24, r0
    1598:	41 9f       	mul	r20, r17
    159a:	90 0d       	add	r25, r0
    159c:	11 24       	eor	r1, r1
    159e:	b9 01       	movw	r22, r18
    15a0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    15a4:	cb 01       	movw	r24, r22
    15a6:	bf 01       	movw	r22, r30
    15a8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <handleAndSpeedMicro>:
		break;
	}
}
void handleAndSpeedMicro (int angle,int speed1)
{
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	ec 01       	movw	r28, r24
    15c0:	8b 01       	movw	r16, r22
	int speed2;
	int speed3;
	handleMicro(angle);
    15c2:	94 d9       	rcall	.-3288   	; 0x8ec <handleMicro>
	if (angle<0){
    15c4:	dd 23       	and	r29, r29
    15c6:	4c f5       	brge	.+82     	; 0x161a <handleAndSpeedMicro+0x64>
		angle = -angle;
		speed2 = speed1*coeffR1[angle/10]/100;
    15c8:	88 27       	eor	r24, r24
    15ca:	99 27       	eor	r25, r25
    15cc:	8c 1b       	sub	r24, r28
    15ce:	9d 0b       	sbc	r25, r29
    15d0:	6a e0       	ldi	r22, 0x0A	; 10
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    15d8:	9b 01       	movw	r18, r22
		speed3 = speed1*coeffR3[angle/10]/100;
    15da:	fb 01       	movw	r30, r22
    15dc:	e0 5f       	subi	r30, 0xF0	; 240
    15de:	fd 4f       	sbci	r31, 0xFD	; 253
		speed (speed2,speed3);
    15e0:	40 81       	ld	r20, Z
    15e2:	40 9f       	mul	r20, r16
    15e4:	c0 01       	movw	r24, r0
    15e6:	41 9f       	mul	r20, r17
    15e8:	90 0d       	add	r25, r0
    15ea:	11 24       	eor	r1, r1
    15ec:	e4 e6       	ldi	r30, 0x64	; 100
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	bf 01       	movw	r22, r30
    15f2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    15f6:	eb 01       	movw	r28, r22
	int speed2;
	int speed3;
	handleMicro(angle);
	if (angle<0){
		angle = -angle;
		speed2 = speed1*coeffR1[angle/10]/100;
    15f8:	d9 01       	movw	r26, r18
    15fa:	ae 5b       	subi	r26, 0xBE	; 190
    15fc:	bd 4f       	sbci	r27, 0xFD	; 253
		speed3 = speed1*coeffR3[angle/10]/100;
		speed (speed2,speed3);
    15fe:	2c 91       	ld	r18, X
    1600:	20 9f       	mul	r18, r16
    1602:	c0 01       	movw	r24, r0
    1604:	21 9f       	mul	r18, r17
    1606:	90 0d       	add	r25, r0
    1608:	11 24       	eor	r1, r1
    160a:	bf 01       	movw	r22, r30
    160c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    1610:	cb 01       	movw	r24, r22
    1612:	be 01       	movw	r22, r28
    1614:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
    1618:	2c c0       	rjmp	.+88     	; 0x1672 <handleAndSpeedMicro+0xbc>
	}
	else if (angle == 0 )
    161a:	20 97       	sbiw	r28, 0x00	; 0
    161c:	29 f4       	brne	.+10     	; 0x1628 <handleAndSpeedMicro+0x72>
	{
		speed (speed1,speed1);
    161e:	b8 01       	movw	r22, r16
    1620:	c8 01       	movw	r24, r16
    1622:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
    1626:	25 c0       	rjmp	.+74     	; 0x1672 <handleAndSpeedMicro+0xbc>
	}
	else {
		speed2 = speed1*coeffR1[angle/10]/100;
    1628:	ce 01       	movw	r24, r28
    162a:	6a e0       	ldi	r22, 0x0A	; 10
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    1632:	9b 01       	movw	r18, r22
    1634:	fb 01       	movw	r30, r22
    1636:	ee 5b       	subi	r30, 0xBE	; 190
    1638:	fd 4f       	sbci	r31, 0xFD	; 253
		speed3 = speed1*coeffR3[angle/10]/100;
		speed (speed3,speed2);
    163a:	40 81       	ld	r20, Z
    163c:	40 9f       	mul	r20, r16
    163e:	c0 01       	movw	r24, r0
    1640:	41 9f       	mul	r20, r17
    1642:	90 0d       	add	r25, r0
    1644:	11 24       	eor	r1, r1
    1646:	e4 e6       	ldi	r30, 0x64	; 100
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	bf 01       	movw	r22, r30
    164c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    1650:	eb 01       	movw	r28, r22
	{
		speed (speed1,speed1);
	}
	else {
		speed2 = speed1*coeffR1[angle/10]/100;
		speed3 = speed1*coeffR3[angle/10]/100;
    1652:	d9 01       	movw	r26, r18
    1654:	a0 5f       	subi	r26, 0xF0	; 240
    1656:	bd 4f       	sbci	r27, 0xFD	; 253
		speed (speed3,speed2);
    1658:	2c 91       	ld	r18, X
    165a:	20 9f       	mul	r18, r16
    165c:	c0 01       	movw	r24, r0
    165e:	21 9f       	mul	r18, r17
    1660:	90 0d       	add	r25, r0
    1662:	11 24       	eor	r1, r1
    1664:	bf 01       	movw	r22, r30
    1666:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    166a:	cb 01       	movw	r24, r22
    166c:	be 01       	movw	r22, r28
    166e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
	}
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	08 95       	ret

0000167c <runForwardLine>:
		speed (speed3,speed2);
	}
}
void runForwardLine (int speedRun)
{
	switch(sensor) {
    167c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	81 3f       	cpi	r24, 0xF1	; 241
    1684:	91 05       	cpc	r25, r1
    1686:	08 f0       	brcs	.+2      	; 0x168a <runForwardLine+0xe>
    1688:	28 c2       	rjmp	.+1104   	; 0x1ada <runForwardLine+0x45e>
    168a:	fc 01       	movw	r30, r24
    168c:	88 27       	eor	r24, r24
    168e:	e5 58       	subi	r30, 0x85	; 133
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__tablejump2__>
		case 0x18:// 00011000
		case 0x3c:// 00111100
		handleAndSpeed(angle0,speedRun0);
    1698:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <speedRun0>
    169c:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <speedRun0+0x1>
    16a0:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <angle0>
    16a4:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <angle0+0x1>
    16a8:	31 df       	rcall	.-414    	; 0x150c <handleAndSpeed>
		curveFlag = 0;
    16aa:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = 0;
    16ae:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <sensorPos>
		straightLine = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
    16b8:	08 95       	ret
		case 0x1C:// 00011100
		case 0x08:// 00001000
		if ( sensorPos < -3)
    16ba:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    16be:	8d 3f       	cpi	r24, 0xFD	; 253
    16c0:	34 f4       	brge	.+12     	; 0x16ce <runForwardLine+0x52>
		{
			handleAndSpeed (-30,0);
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	82 ee       	ldi	r24, 0xE2	; 226
    16c8:	9f ef       	ldi	r25, 0xFF	; 255
    16ca:	20 cf       	rjmp	.-448    	; 0x150c <handleAndSpeed>
			break;
    16cc:	08 95       	ret
		}
		else
		handleAndSpeed(angle1,speedRun1);
    16ce:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <speedRun1>
    16d2:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <speedRun1+0x1>
    16d6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    16da:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    16de:	16 df       	rcall	.-468    	; 0x150c <handleAndSpeed>
		curveFlag = 0;
    16e0:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 1;
    16ea:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
    16ee:	08 95       	ret
		case 0x0c:// 00001100
		case 0x1e:// 00011110
		if ( sensorPos < -3)
    16f0:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    16f4:	8d 3f       	cpi	r24, 0xFD	; 253
    16f6:	34 f4       	brge	.+12     	; 0x1704 <runForwardLine+0x88>
		{
			handleAndSpeed(-30,0);
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	82 ee       	ldi	r24, 0xE2	; 226
    16fe:	9f ef       	ldi	r25, 0xFF	; 255
    1700:	05 cf       	rjmp	.-502    	; 0x150c <handleAndSpeed>
			break;
    1702:	08 95       	ret
		}
		else
		handleAndSpeed(angle2,speedRun2);
    1704:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <speedRun2>
    1708:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <speedRun2+0x1>
    170c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle2>
    1710:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle2+0x1>
    1714:	fb de       	rcall	.-522    	; 0x150c <handleAndSpeed>
		curveFlag = 0;
    1716:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = 2;
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
    1726:	08 95       	ret
		case 0x04:// 00000100
		case 0x0e:// 00001110
		if ( sensorPos < -3)
    1728:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    172c:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    172e:	34 f4       	brge	.+12     	; 0x173c <runForwardLine+0xc0>
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	82 ee       	ldi	r24, 0xE2	; 226
    1736:	9f ef       	ldi	r25, 0xFF	; 255
    1738:	e9 ce       	rjmp	.-558    	; 0x150c <handleAndSpeed>
			break;
    173a:	08 95       	ret
		}
		else if (brakeCurve > 11)
    173c:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    1740:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    1744:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(7);
    1746:	50 f0       	brcs	.+20     	; 0x175c <runForwardLine+0xe0>
    1748:	87 e0       	ldi	r24, 0x07	; 7
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	bd d8       	rcall	.-3718   	; 0x8c8 <handle>
			speed(-20,-20);
    174e:	6c ee       	ldi	r22, 0xEC	; 236
    1750:	7f ef       	ldi	r23, 0xFF	; 255
    1752:	8c ee       	ldi	r24, 0xEC	; 236
    1754:	9f ef       	ldi	r25, 0xFF	; 255
    1756:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
    175a:	09 c0       	rjmp	.+18     	; 0x176e <runForwardLine+0xf2>
		}
		else
		handleAndSpeed(angle3,speedRun3);
    175c:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <speedRun3>
    1760:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <speedRun3+0x1>
    1764:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <angle3>
    1768:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <angle3+0x1>
    176c:	cf de       	rcall	.-610    	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 3;
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    177a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
    177e:	08 95       	ret
		case 0x06:// 00000110
		if ( sensorPos < -3)
    1780:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1784:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1786:	34 f4       	brge	.+12     	; 0x1794 <runForwardLine+0x118>
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	82 ee       	ldi	r24, 0xE2	; 226
    178e:	9f ef       	ldi	r25, 0xFF	; 255
    1790:	bd ce       	rjmp	.-646    	; 0x150c <handleAndSpeed>
			break;
		}
		else if (brakeCurve > 11)
    1792:	08 95       	ret
    1794:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    1798:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    179c:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    179e:	50 f0       	brcs	.+20     	; 0x17b4 <runForwardLine+0x138>
    17a0:	8f e0       	ldi	r24, 0x0F	; 15
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	91 d8       	rcall	.-3806   	; 0x8c8 <handle>
			speed(-20,-20);
    17a6:	6c ee       	ldi	r22, 0xEC	; 236
    17a8:	7f ef       	ldi	r23, 0xFF	; 255
    17aa:	8c ee       	ldi	r24, 0xEC	; 236
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(angle4,speedRun4);
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <runForwardLine+0x14a>
    17b4:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <speedRun4>
    17b8:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <speedRun4+0x1>
    17bc:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    17c0:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    17c4:	a3 de       	rcall	.-698    	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 4;
    17cc:	84 e0       	ldi	r24, 0x04	; 4
    17ce:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    17d2:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
		case 0x02:// 00000010
		case 0x07:// 00000111
		if ( sensorPos < -3)
    17d6:	08 95       	ret
    17d8:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    17dc:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    17de:	34 f4       	brge	.+12     	; 0x17ec <runForwardLine+0x170>
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	82 ee       	ldi	r24, 0xE2	; 226
    17e6:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    17e8:	91 ce       	rjmp	.-734    	; 0x150c <handleAndSpeed>
		}
		else if (brakeCurve > 11)
    17ea:	08 95       	ret
    17ec:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    17f0:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    17f4:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    17f6:	50 f0       	brcs	.+20     	; 0x180c <runForwardLine+0x190>
    17f8:	8f e0       	ldi	r24, 0x0F	; 15
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	65 d8       	rcall	.-3894   	; 0x8c8 <handle>
			speed(-20,-20);
    17fe:	6c ee       	ldi	r22, 0xEC	; 236
    1800:	7f ef       	ldi	r23, 0xFF	; 255
    1802:	8c ee       	ldi	r24, 0xEC	; 236
    1804:	9f ef       	ldi	r25, 0xFF	; 255
    1806:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(angle5,speedRun5);
    180a:	09 c0       	rjmp	.+18     	; 0x181e <runForwardLine+0x1a2>
    180c:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <speedRun5>
    1810:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <speedRun5+0x1>
    1814:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <angle5>
    1818:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <angle5+0x1>
    181c:	77 de       	rcall	.-786    	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 5;
    1824:	85 e0       	ldi	r24, 0x05	; 5
    1826:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    182a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
		case 0x03:// 00000011
		if ( sensorPos < -3)
    182e:	08 95       	ret
    1830:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1834:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1836:	34 f4       	brge	.+12     	; 0x1844 <runForwardLine+0x1c8>
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	82 ee       	ldi	r24, 0xE2	; 226
    183e:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1840:	65 ce       	rjmp	.-822    	; 0x150c <handleAndSpeed>
		}
		else
		handleAndSpeed(angle6,speedRun6);
    1842:	08 95       	ret
    1844:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <speedRun6>
    1848:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <speedRun6+0x1>
    184c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    1850:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    1854:	5b de       	rcall	.-842    	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 6;
    185c:	86 e0       	ldi	r24, 0x06	; 6
    185e:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    1862:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
		case 0x01:// 00000001
		if ( sensorPos < -3)
    1866:	08 95       	ret
    1868:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    186c:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    186e:	34 f4       	brge	.+12     	; 0x187c <runForwardLine+0x200>
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	82 ee       	ldi	r24, 0xE2	; 226
    1876:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1878:	49 ce       	rjmp	.-878    	; 0x150c <handleAndSpeed>
		}
		handleAndSpeed(angle7,speedRun7);
    187a:	08 95       	ret
    187c:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <speedRun7>
    1880:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <speedRun7+0x1>
    1884:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle7>
    1888:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle7+0x1>
    188c:	3f de       	rcall	.-898    	; 0x150c <handleAndSpeed>
		curveFlag = 1;   //RYGB(0,0,0,0);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		straightLine = 0;
    1894:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		sensorPos = 6;
    1898:	86 e0       	ldi	r24, 0x06	; 6
    189a:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
		case 0x81:// 10000001
		case 0xc1:// 11000001
		case 0x00:// 00000000
		case 0x83:// 10000011
		if ( sensorPos < -4)
    189e:	08 95       	ret
    18a0:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(-30,0);
    18a4:	8c 3f       	cpi	r24, 0xFC	; 252
    18a6:	34 f4       	brge	.+12     	; 0x18b4 <runForwardLine+0x238>
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	82 ee       	ldi	r24, 0xE2	; 226
    18ae:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    18b0:	2d ce       	rjmp	.-934    	; 0x150c <handleAndSpeed>
		}
		else if ( sensorPos > 4)
    18b2:	08 95       	ret
    18b4:	85 30       	cpi	r24, 0x05	; 5
		{
			handleAndSpeed(30,0);
    18b6:	0c f4       	brge	.+2      	; 0x18ba <runForwardLine+0x23e>
    18b8:	18 c1       	rjmp	.+560    	; 0x1aea <runForwardLine+0x46e>
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	8e e1       	ldi	r24, 0x1E	; 30
    18c0:	90 e0       	ldi	r25, 0x00	; 0
			break;
    18c2:	24 ce       	rjmp	.-952    	; 0x150c <handleAndSpeed>
		}
		break;
		case 0x10:// 00010000
		case 0x38:// 00111000
		if ( sensorPos > 3)
    18c4:	08 95       	ret
    18c6:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	34 f0       	brlt	.+12     	; 0x18da <runForwardLine+0x25e>
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	8e e1       	ldi	r24, 0x1E	; 30
    18d4:	90 e0       	ldi	r25, 0x00	; 0
			break;
    18d6:	1a ce       	rjmp	.-972    	; 0x150c <handleAndSpeed>
		}
		else
		handleAndSpeedMicro (-angle1,speedRun1);
    18d8:	08 95       	ret
    18da:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <speedRun1>
    18de:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <speedRun1+0x1>
    18e2:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    18e6:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    18ea:	91 95       	neg	r25
    18ec:	81 95       	neg	r24
    18ee:	91 09       	sbc	r25, r1
		curveFlag = 0;
    18f0:	62 de       	rcall	.-828    	; 0x15b6 <handleAndSpeedMicro>
    18f2:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = -1;
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
		case 0x30:// 00110000
		case 0x78:// 01111000
		if ( sensorPos > 3)
    1902:	08 95       	ret
    1904:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	34 f0       	brlt	.+12     	; 0x1918 <runForwardLine+0x29c>
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	8e e1       	ldi	r24, 0x1E	; 30
    1912:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1914:	fb cd       	rjmp	.-1034   	; 0x150c <handleAndSpeed>
		}
		else
		handleAndSpeed(-angle2,speedRun2);
    1916:	08 95       	ret
    1918:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <speedRun2>
    191c:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <speedRun2+0x1>
    1920:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle2>
    1924:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle2+0x1>
    1928:	91 95       	neg	r25
    192a:	81 95       	neg	r24
    192c:	91 09       	sbc	r25, r1
		curveFlag = 0;
    192e:	ee dd       	rcall	.-1060   	; 0x150c <handleAndSpeed>
    1930:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = -2;
    1934:	8e ef       	ldi	r24, 0xFE	; 254
    1936:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
		case 0x20:// 00100000
		case 0x70:// 01110000
		if ( sensorPos > 3)
    1940:	08 95       	ret
    1942:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1946:	84 30       	cpi	r24, 0x04	; 4
		{
			handleAndSpeed(30,0);
    1948:	34 f0       	brlt	.+12     	; 0x1956 <runForwardLine+0x2da>
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	8e e1       	ldi	r24, 0x1E	; 30
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	dc cd       	rjmp	.-1096   	; 0x150c <handleAndSpeed>
			break;
    1954:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1956:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    195a:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    195e:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(-7);
    1960:	58 f0       	brcs	.+22     	; 0x1978 <runForwardLine+0x2fc>
    1962:	89 ef       	ldi	r24, 0xF9	; 249
    1964:	9f ef       	ldi	r25, 0xFF	; 255
    1966:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(-20,-20);
    196a:	6c ee       	ldi	r22, 0xEC	; 236
    196c:	7f ef       	ldi	r23, 0xFF	; 255
    196e:	8c ee       	ldi	r24, 0xEC	; 236
    1970:	9f ef       	ldi	r25, 0xFF	; 255
    1972:	0e 94 db 14 	call	0x29b6	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(-angle3,speedRun3);
    1976:	0c c0       	rjmp	.+24     	; 0x1990 <runForwardLine+0x314>
    1978:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <speedRun3>
    197c:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <speedRun3+0x1>
    1980:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <angle3>
    1984:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <angle3+0x1>
    1988:	91 95       	neg	r25
    198a:	81 95       	neg	r24
    198c:	91 09       	sbc	r25, r1
		curveFlag = 1;
    198e:	be dd       	rcall	.-1156   	; 0x150c <handleAndSpeed>
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = -3;
    1996:	8d ef       	ldi	r24, 0xFD	; 253
    1998:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
		break;
    199c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0x60:// 01100000
		if ( sensorPos > 3)
    19a0:	08 95       	ret
    19a2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    19a6:	84 30       	cpi	r24, 0x04	; 4
    19a8:	34 f0       	brlt	.+12     	; 0x19b6 <runForwardLine+0x33a>
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	8e e1       	ldi	r24, 0x1E	; 30
    19b0:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19b2:	ac cd       	rjmp	.-1192   	; 0x150c <handleAndSpeed>
		}
		else if (brakeCurve > 11)
    19b4:	08 95       	ret
    19b6:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    19ba:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
		{
			handle(-15);
    19be:	0c 97       	sbiw	r24, 0x0c	; 12
    19c0:	50 f0       	brcs	.+20     	; 0x19d6 <runForwardLine+0x35a>
    19c2:	81 ef       	ldi	r24, 0xF1	; 241
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    19c6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    19ca:	6c ee       	ldi	r22, 0xEC	; 236
    19cc:	7f ef       	ldi	r23, 0xFF	; 255
    19ce:	8c ee       	ldi	r24, 0xEC	; 236
    19d0:	9f ef       	ldi	r25, 0xFF	; 255
    19d2:	f1 d7       	rcall	.+4066   	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(-angle4,speedRun4);
    19d4:	0c c0       	rjmp	.+24     	; 0x19ee <runForwardLine+0x372>
    19d6:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <speedRun4>
    19da:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <speedRun4+0x1>
    19de:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    19e2:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    19e6:	91 95       	neg	r25
    19e8:	81 95       	neg	r24
    19ea:	91 09       	sbc	r25, r1
		curveFlag = 1;
    19ec:	8f dd       	rcall	.-1250   	; 0x150c <handleAndSpeed>
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = -4;
    19f4:	8c ef       	ldi	r24, 0xFC	; 252
		straightLine = 0;
    19f6:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
    19fa:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0x40:// 01000000
		case 0xe0:// 11100000
		if ( sensorPos > 3)
    19fe:	08 95       	ret
    1a00:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	34 f0       	brlt	.+12     	; 0x1a14 <runForwardLine+0x398>
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	8e e1       	ldi	r24, 0x1E	; 30
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a10:	7d cd       	rjmp	.-1286   	; 0x150c <handleAndSpeed>
		}
		else if (brakeCurve > 11)
    1a12:	08 95       	ret
    1a14:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    1a18:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
		{
			handle(-15);
    1a1c:	0c 97       	sbiw	r24, 0x0c	; 12
    1a1e:	50 f0       	brcs	.+20     	; 0x1a34 <runForwardLine+0x3b8>
    1a20:	81 ef       	ldi	r24, 0xF1	; 241
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
			speed(0,0);
    1a24:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	c2 d7       	rcall	.+3972   	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(-angle5,speedRun5);
    1a32:	0c c0       	rjmp	.+24     	; 0x1a4c <runForwardLine+0x3d0>
    1a34:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <speedRun5>
    1a38:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <speedRun5+0x1>
    1a3c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <angle5>
    1a40:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <angle5+0x1>
    1a44:	91 95       	neg	r25
    1a46:	81 95       	neg	r24
    1a48:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1a4a:	60 dd       	rcall	.-1344   	; 0x150c <handleAndSpeed>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -5;
    1a4e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
    1a52:	8b ef       	ldi	r24, 0xFB	; 251
		straightLine = 0;
    1a54:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
    1a58:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0xc0:// 11000000
		if ( sensorPos > 3)
    1a5c:	08 95       	ret
    1a5e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	34 f0       	brlt	.+12     	; 0x1a72 <runForwardLine+0x3f6>
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	8e e1       	ldi	r24, 0x1E	; 30
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a6e:	4e cd       	rjmp	.-1380   	; 0x150c <handleAndSpeed>
		}
		else
		handleAndSpeed(-angle6,speedRun6);
    1a70:	08 95       	ret
    1a72:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <speedRun6>
    1a76:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <speedRun6+0x1>
    1a7a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    1a7e:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    1a82:	91 95       	neg	r25
    1a84:	81 95       	neg	r24
    1a86:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1a88:	41 dd       	rcall	.-1406   	; 0x150c <handleAndSpeed>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -6;
    1a8c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
    1a90:	8a ef       	ldi	r24, 0xFA	; 250
		straightLine = 0;
    1a92:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
    1a96:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0x80:// 10000000
		if ( sensorPos > 3)
    1a9a:	08 95       	ret
    1a9c:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    1aa0:	84 30       	cpi	r24, 0x04	; 4
    1aa2:	34 f0       	brlt	.+12     	; 0x1ab0 <runForwardLine+0x434>
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle7,speedRun7);
    1aac:	2f cd       	rjmp	.-1442   	; 0x150c <handleAndSpeed>
    1aae:	08 95       	ret
    1ab0:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <speedRun7>
    1ab4:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <speedRun7+0x1>
    1ab8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle7>
    1abc:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle7+0x1>
    1ac0:	91 95       	neg	r25
    1ac2:	81 95       	neg	r24
    1ac4:	91 09       	sbc	r25, r1
		curveFlag = 1;
    1ac6:	22 dd       	rcall	.-1468   	; 0x150c <handleAndSpeed>
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = -6;
    1ace:	8a ef       	ldi	r24, 0xFA	; 250
    1ad0:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    1ad4:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
		case 0x0f: break;
		case 0xf0: break;
		default:
		straightLine = 1;
    1ad8:	08 95       	ret
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		speed(0,0);
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	66 c7       	rjmp	.+3788   	; 0x29b6 <speed>
    1aea:	08 95       	ret

00001aec <brakeTheCar>:
		return 0;
	}
	else return 0;
}
void brakeTheCar(int time,int speedRun)
{
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	8b 01       	movw	r16, r22
	cnt2 = 0;
    1af6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    1afa:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
	while (cnt2<time)
    1afe:	ec 01       	movw	r28, r24
    1b00:	89 2b       	or	r24, r25
    1b02:	49 f0       	breq	.+18     	; 0x1b16 <brakeTheCar+0x2a>
	{
		runForwardLine(speedRun);
    1b04:	c8 01       	movw	r24, r16
    1b06:	ba dd       	rcall	.-1164   	; 0x167c <runForwardLine>
	else return 0;
}
void brakeTheCar(int time,int speedRun)
{
	cnt2 = 0;
	while (cnt2<time)
    1b08:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    1b0c:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    1b10:	8c 17       	cp	r24, r28
    1b12:	9d 07       	cpc	r25, r29
    1b14:	b8 f3       	brcs	.-18     	; 0x1b04 <brakeTheCar+0x18>
	{
		runForwardLine(speedRun);
	}
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <leftLaneChange>:
			return 11;
			break;
		}
	}
}
int leftLaneChange (int speedRun){
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	8c 01       	movw	r16, r24
	int runCase3 = 50;
	cnt1 = 0;
    1b2a:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    1b2e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
			break;
		}
	}
}
int leftLaneChange (int speedRun){
	int runCase3 = 50;
    1b32:	c2 e3       	ldi	r28, 0x32	; 50
    1b34:	d0 e0       	ldi	r29, 0x00	; 0
	cnt1 = 0;
	while (1)
	{
		if (checkCrossLine())
    1b36:	ce dc       	rcall	.-1636   	; 0x14d4 <checkCrossLine>
    1b38:	88 23       	and	r24, r24
    1b3a:	39 f0       	breq	.+14     	; 0x1b4a <leftLaneChange+0x2a>
		{
			cnt1 = 0;
    1b3c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    1b40:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
			return 21;
    1b44:	85 e1       	ldi	r24, 0x15	; 21
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	b1 c0       	rjmp	.+354    	; 0x1cac <leftLaneChange+0x18c>
		}
		switch (runCase3)
    1b4a:	c8 33       	cpi	r28, 0x38	; 56
    1b4c:	d1 05       	cpc	r29, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <leftLaneChange+0x32>
    1b50:	64 c0       	rjmp	.+200    	; 0x1c1a <leftLaneChange+0xfa>
    1b52:	3c f4       	brge	.+14     	; 0x1b62 <leftLaneChange+0x42>
    1b54:	c2 33       	cpi	r28, 0x32	; 50
    1b56:	d1 05       	cpc	r29, r1
    1b58:	11 f1       	breq	.+68     	; 0x1b9e <leftLaneChange+0x7e>
    1b5a:	c3 33       	cpi	r28, 0x33	; 51
    1b5c:	d1 05       	cpc	r29, r1
    1b5e:	a1 f1       	breq	.+104    	; 0x1bc8 <leftLaneChange+0xa8>
    1b60:	a3 c0       	rjmp	.+326    	; 0x1ca8 <leftLaneChange+0x188>
    1b62:	ca 33       	cpi	r28, 0x3A	; 58
    1b64:	d1 05       	cpc	r29, r1
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <leftLaneChange+0x52>
    1b68:	0c f4       	brge	.+2      	; 0x1b6c <leftLaneChange+0x4c>
    1b6a:	67 c0       	rjmp	.+206    	; 0x1c3a <leftLaneChange+0x11a>
    1b6c:	eb 97       	sbiw	r28, 0x3b	; 59
    1b6e:	51 f0       	breq	.+20     	; 0x1b84 <leftLaneChange+0x64>
    1b70:	9b c0       	rjmp	.+310    	; 0x1ca8 <leftLaneChange+0x188>
				runCase3 = 58;
				break;
			}
			break;
			case 58:
			while(cnt2 < 300)
    1b72:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    1b76:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    1b7a:	8c 32       	cpi	r24, 0x2C	; 44
    1b7c:	91 40       	sbci	r25, 0x01	; 1
    1b7e:	08 f4       	brcc	.+2      	; 0x1b82 <leftLaneChange+0x62>
    1b80:	6c c0       	rjmp	.+216    	; 0x1c5a <leftLaneChange+0x13a>
    1b82:	74 c0       	rjmp	.+232    	; 0x1c6c <leftLaneChange+0x14c>
			}
			cnt2 = 0;
			runCase3 = 59;
			break;
			case 59:
			while(cnt2 < timerBoostAfterChangeLanes)
    1b84:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <timerBoostAfterChangeLanes>
    1b88:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    1b8c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    1b90:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    1b94:	82 17       	cp	r24, r18
    1b96:	93 07       	cpc	r25, r19
    1b98:	08 f4       	brcc	.+2      	; 0x1b9c <leftLaneChange+0x7c>
    1b9a:	6f c0       	rjmp	.+222    	; 0x1c7a <leftLaneChange+0x15a>
    1b9c:	7e c0       	rjmp	.+252    	; 0x1c9a <leftLaneChange+0x17a>
			return 21;
		}
		switch (runCase3)
		{
			case 50:
			if (cnt1 < 50)
    1b9e:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <cnt1>
    1ba2:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <cnt1+0x1>
    1ba6:	c2 97       	sbiw	r24, 0x32	; 50
    1ba8:	60 f4       	brcc	.+24     	; 0x1bc2 <leftLaneChange+0xa2>
			{
				brakeTheCar(speedBrakeChangeLanes,timerBrakeChangeLanes);
    1baa:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <timerBrakeChangeLanes>
    1bae:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <timerBrakeChangeLanes+0x1>
    1bb2:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <speedBrakeChangeLanes>
    1bb6:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <speedBrakeChangeLanes+0x1>
    1bba:	98 df       	rcall	.-208    	; 0x1aec <brakeTheCar>
				runCase3 = 61;
    1bbc:	cd e3       	ldi	r28, 0x3D	; 61
    1bbe:	d0 e0       	ldi	r29, 0x00	; 0
				break;
			}
			runForwardLine(speedRun);
    1bc0:	ba cf       	rjmp	.-140    	; 0x1b36 <leftLaneChange+0x16>
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	5b dd       	rcall	.-1354   	; 0x167c <runForwardLine>
			break;
    1bc6:	b7 cf       	rjmp	.-146    	; 0x1b36 <leftLaneChange+0x16>
			case 51:
			if (sensorMask (MASK4_4) == 0x00){
    1bc8:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1bcc:	81 11       	cpse	r24, r1
    1bce:	10 c0       	rjmp	.+32     	; 0x1bf0 <leftLaneChange+0xd0>
				handleAndSpeed (-angleChangeLanes,speedRun);
    1bd0:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <angleChangeLanes>
    1bd4:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <angleChangeLanes+0x1>
    1bd8:	b8 01       	movw	r22, r16
    1bda:	91 95       	neg	r25
    1bdc:	81 95       	neg	r24
    1bde:	91 09       	sbc	r25, r1
    1be0:	95 dc       	rcall	.-1750   	; 0x150c <handleAndSpeed>
				runCase3 = 56;
				cnt1 = 0;
    1be2:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    1be6:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
			runForwardLine(speedRun);
			break;
			case 51:
			if (sensorMask (MASK4_4) == 0x00){
				handleAndSpeed (-angleChangeLanes,speedRun);
				runCase3 = 56;
    1bea:	c8 e3       	ldi	r28, 0x38	; 56
    1bec:	d0 e0       	ldi	r29, 0x00	; 0
				cnt1 = 0;
				break;
			}
			else
			{
				RGB(0,1,0);
    1bee:	a3 cf       	rjmp	.-186    	; 0x1b36 <leftLaneChange+0x16>
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
				runForwardLine(speedRun);
    1bf6:	3d d9       	rcall	.-3462   	; 0xe72 <RGB>
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	40 dd       	rcall	.-1408   	; 0x167c <runForwardLine>
			}
			if (cnt1>5000)
    1bfc:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <cnt1>
    1c00:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <cnt1+0x1>
    1c04:	89 38       	cpi	r24, 0x89	; 137
    1c06:	93 41       	sbci	r25, 0x13	; 19
    1c08:	08 f4       	brcc	.+2      	; 0x1c0c <leftLaneChange+0xec>
    1c0a:	95 cf       	rjmp	.-214    	; 0x1b36 <leftLaneChange+0x16>
			{
				cnt1 = 0;
    1c0c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    1c10:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				
				return 11;
    1c14:	8b e0       	ldi	r24, 0x0B	; 11
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	49 c0       	rjmp	.+146    	; 0x1cac <leftLaneChange+0x18c>
			}
			break;
			case 56:
			if (sensorMask(0x80)!=0)
    1c1a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1c1e:	88 23       	and	r24, r24
    1c20:	0c f0       	brlt	.+2      	; 0x1c24 <leftLaneChange+0x104>
    1c22:	89 cf       	rjmp	.-238    	; 0x1b36 <leftLaneChange+0x16>
			{
				cnt1 = 0;
    1c24:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    1c28:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				handleAndSpeed(0,speedRun);
    1c2c:	b8 01       	movw	r22, r16
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	6c dc       	rcall	.-1832   	; 0x150c <handleAndSpeed>
				runCase3 = 57;
    1c34:	c9 e3       	ldi	r28, 0x39	; 57
    1c36:	d0 e0       	ldi	r29, 0x00	; 0
    1c38:	7e cf       	rjmp	.-260    	; 0x1b36 <leftLaneChange+0x16>
			}
			break;
			case 57:
			cnt2 = 0;
    1c3a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    1c3e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			if (sensorMask(MASK0_4)!=0)
    1c42:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1c46:	8f 70       	andi	r24, 0x0F	; 15
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <leftLaneChange+0x12c>
    1c4a:	75 cf       	rjmp	.-278    	; 0x1b36 <leftLaneChange+0x16>
			{
				cnt1 = 0;
    1c4c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    1c50:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				
				runCase3 = 58;
    1c54:	ca e3       	ldi	r28, 0x3A	; 58
				break;
    1c56:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
			case 58:
			while(cnt2 < 300)
			{
				runForwardLine(speedRun);
    1c58:	6e cf       	rjmp	.-292    	; 0x1b36 <leftLaneChange+0x16>
    1c5a:	c8 01       	movw	r24, r16
    1c5c:	0f dd       	rcall	.-1506   	; 0x167c <runForwardLine>
				runCase3 = 58;
				break;
			}
			break;
			case 58:
			while(cnt2 < 300)
    1c5e:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    1c62:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    1c66:	8c 32       	cpi	r24, 0x2C	; 44
    1c68:	91 40       	sbci	r25, 0x01	; 1
    1c6a:	b8 f3       	brcs	.-18     	; 0x1c5a <leftLaneChange+0x13a>
			{
				runForwardLine(speedRun);
			}
			cnt2 = 0;
    1c6c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    1c70:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			runCase3 = 59;
    1c74:	cb e3       	ldi	r28, 0x3B	; 59
			break;
    1c76:	d0 e0       	ldi	r29, 0x00	; 0
			case 59:
			while(cnt2 < timerBoostAfterChangeLanes)
			{
				runForwardLine(speedBoostAfterChangeLanes);
    1c78:	5e cf       	rjmp	.-324    	; 0x1b36 <leftLaneChange+0x16>
    1c7a:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <speedBoostAfterChangeLanes>
    1c7e:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    1c82:	fc dc       	rcall	.-1544   	; 0x167c <runForwardLine>
			}
			cnt2 = 0;
			runCase3 = 59;
			break;
			case 59:
			while(cnt2 < timerBoostAfterChangeLanes)
    1c84:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <cnt2>
    1c88:	30 91 45 03 	lds	r19, 0x0345	; 0x800345 <cnt2+0x1>
    1c8c:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timerBoostAfterChangeLanes>
    1c90:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    1c94:	28 17       	cp	r18, r24
    1c96:	39 07       	cpc	r19, r25
    1c98:	80 f3       	brcs	.-32     	; 0x1c7a <leftLaneChange+0x15a>
			{
				runForwardLine(speedBoostAfterChangeLanes);
			}
			cnt2 = 0;
    1c9a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    1c9e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			return 11;
    1ca2:	8b e0       	ldi	r24, 0x0B	; 11
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <leftLaneChange+0x18c>
			break;
			default:
			return 11;
    1ca8:	8b e0       	ldi	r24, 0x0B	; 11
    1caa:	90 e0       	ldi	r25, 0x00	; 0

		}
	}
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <rightLaneChange>:
int rightLaneChange(int speedRun)
{
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	8c 01       	movw	r16, r24
	beep_long(100);
    1cc0:	84 e6       	ldi	r24, 0x64	; 100
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	int runCase4 = 60;
    1cc8:	cc e3       	ldi	r28, 0x3C	; 60
    1cca:	d0 e0       	ldi	r29, 0x00	; 0
	int cnt1  = 0;
	while (1)
	{
		if (checkCrossLine())
    1ccc:	03 dc       	rcall	.-2042   	; 0x14d4 <checkCrossLine>
    1cce:	81 11       	cpse	r24, r1
    1cd0:	89 c0       	rjmp	.+274    	; 0x1de4 <rightLaneChange+0x12e>
		{
			cnt1 = 0;
			return 21;
		}
		switch (runCase4)
    1cd2:	c2 34       	cpi	r28, 0x42	; 66
    1cd4:	d1 05       	cpc	r29, r1
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <rightLaneChange+0x24>
    1cd8:	47 c0       	rjmp	.+142    	; 0x1d68 <rightLaneChange+0xb2>
    1cda:	3c f4       	brge	.+14     	; 0x1cea <rightLaneChange+0x34>
    1cdc:	cc 33       	cpi	r28, 0x3C	; 60
    1cde:	d1 05       	cpc	r29, r1
    1ce0:	19 f1       	breq	.+70     	; 0x1d28 <rightLaneChange+0x72>
    1ce2:	cd 33       	cpi	r28, 0x3D	; 61
    1ce4:	d1 05       	cpc	r29, r1
    1ce6:	61 f1       	breq	.+88     	; 0x1d40 <rightLaneChange+0x8a>
    1ce8:	80 c0       	rjmp	.+256    	; 0x1dea <rightLaneChange+0x134>
    1cea:	c4 34       	cpi	r28, 0x44	; 68
    1cec:	d1 05       	cpc	r29, r1
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <rightLaneChange+0x46>
    1cf0:	0c f4       	brge	.+2      	; 0x1cf4 <rightLaneChange+0x3e>
    1cf2:	45 c0       	rjmp	.+138    	; 0x1d7e <rightLaneChange+0xc8>
    1cf4:	c5 34       	cpi	r28, 0x45	; 69
    1cf6:	d1 05       	cpc	r29, r1
    1cf8:	51 f0       	breq	.+20     	; 0x1d0e <rightLaneChange+0x58>
    1cfa:	77 c0       	rjmp	.+238    	; 0x1dea <rightLaneChange+0x134>
				runCase4 = 68;
				break;
			}
			break;
			case 68:
			while(cnt2 < 200)
    1cfc:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    1d00:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    1d04:	88 3c       	cpi	r24, 0xC8	; 200
    1d06:	91 05       	cpc	r25, r1
    1d08:	08 f4       	brcc	.+2      	; 0x1d0c <rightLaneChange+0x56>
    1d0a:	45 c0       	rjmp	.+138    	; 0x1d96 <rightLaneChange+0xe0>
    1d0c:	4d c0       	rjmp	.+154    	; 0x1da8 <rightLaneChange+0xf2>
			runCase4 = 69;
			cnt1 = 0;
			cnt2 = 0;
			break;
			case 69:
			while(cnt2 < timerBoostAfterChangeLanes)
    1d0e:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <timerBoostAfterChangeLanes>
    1d12:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    1d16:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    1d1a:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    1d1e:	82 17       	cp	r24, r18
    1d20:	93 07       	cpc	r25, r19
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <rightLaneChange+0x70>
    1d24:	48 c0       	rjmp	.+144    	; 0x1db6 <rightLaneChange+0x100>
    1d26:	57 c0       	rjmp	.+174    	; 0x1dd6 <rightLaneChange+0x120>
		switch (runCase4)
		{
			case 60:
			if (cnt1 < 50)
			{
				brakeTheCar(speedBrakeChangeLanes,timerBrakeChangeLanes);
    1d28:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <timerBrakeChangeLanes>
    1d2c:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <timerBrakeChangeLanes+0x1>
    1d30:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <speedBrakeChangeLanes>
    1d34:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <speedBrakeChangeLanes+0x1>
    1d38:	d9 de       	rcall	.-590    	; 0x1aec <brakeTheCar>
				runCase4 = 61;
    1d3a:	cd e3       	ldi	r28, 0x3D	; 61
    1d3c:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    1d3e:	c6 cf       	rjmp	.-116    	; 0x1ccc <rightLaneChange+0x16>
			}
			runForwardLine(speedRun);
			break;
			case 61:
			if (sensorMask (MASK4_4) == 0x00){
    1d40:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1d44:	81 11       	cpse	r24, r1
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <rightLaneChange+0xac>
				handleAndSpeed (angleChangeLanes,speedRun);
    1d48:	b8 01       	movw	r22, r16
    1d4a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <angleChangeLanes>
    1d4e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <angleChangeLanes+0x1>
    1d52:	dc db       	rcall	.-2120   	; 0x150c <handleAndSpeed>
				runCase4 = 66;
				cnt1 = 0;
				beep_long(100);
    1d54:	84 e6       	ldi	r24, 0x64	; 100
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			runForwardLine(speedRun);
			break;
			case 61:
			if (sensorMask (MASK4_4) == 0x00){
				handleAndSpeed (angleChangeLanes,speedRun);
				runCase4 = 66;
    1d5c:	c2 e4       	ldi	r28, 0x42	; 66
				cnt1 = 0;
				beep_long(100);
				break;
    1d5e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else
			{
				runForwardLine(speedRun);
    1d60:	b5 cf       	rjmp	.-150    	; 0x1ccc <rightLaneChange+0x16>
    1d62:	c8 01       	movw	r24, r16
    1d64:	8b dc       	rcall	.-1770   	; 0x167c <runForwardLine>
    1d66:	b2 cf       	rjmp	.-156    	; 0x1ccc <rightLaneChange+0x16>
				
				return 11;
			}
			break;
			case 66:
			if (sensorMask(0x01)!=0)
    1d68:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1d6c:	80 ff       	sbrs	r24, 0
			{
				cnt1 = 0;
				handleAndSpeed(0,speedRun);
    1d6e:	ae cf       	rjmp	.-164    	; 0x1ccc <rightLaneChange+0x16>
    1d70:	b8 01       	movw	r22, r16
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	ca db       	rcall	.-2156   	; 0x150c <handleAndSpeed>
				runCase4 = 67;
    1d78:	c3 e4       	ldi	r28, 0x43	; 67
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
    1d7c:	a7 cf       	rjmp	.-178    	; 0x1ccc <rightLaneChange+0x16>
			}
			break;
			case 67:
			cnt2 = 0;
    1d7e:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    1d82:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			if (sensorMask(MASK4_0)!=0)
    1d86:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1d8a:	80 7f       	andi	r24, 0xF0	; 240
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <rightLaneChange+0xda>
			{
				cnt1 = 0;
				
				runCase4 = 68;
    1d8e:	9e cf       	rjmp	.-196    	; 0x1ccc <rightLaneChange+0x16>
    1d90:	c4 e4       	ldi	r28, 0x44	; 68
    1d92:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
			case 68:
			while(cnt2 < 200)
			{
				runForwardLine(speedRun);
    1d94:	9b cf       	rjmp	.-202    	; 0x1ccc <rightLaneChange+0x16>
    1d96:	c8 01       	movw	r24, r16
    1d98:	71 dc       	rcall	.-1822   	; 0x167c <runForwardLine>
				runCase4 = 68;
				break;
			}
			break;
			case 68:
			while(cnt2 < 200)
    1d9a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    1d9e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    1da2:	88 3c       	cpi	r24, 0xC8	; 200
    1da4:	91 05       	cpc	r25, r1
    1da6:	b8 f3       	brcs	.-18     	; 0x1d96 <rightLaneChange+0xe0>
			{
				runForwardLine(speedRun);
			}
			runCase4 = 69;
			cnt1 = 0;
			cnt2 = 0;
    1da8:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    1dac:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			case 68:
			while(cnt2 < 200)
			{
				runForwardLine(speedRun);
			}
			runCase4 = 69;
    1db0:	c5 e4       	ldi	r28, 0x45	; 69
			cnt1 = 0;
			cnt2 = 0;
			break;
    1db2:	d0 e0       	ldi	r29, 0x00	; 0
			case 69:
			while(cnt2 < timerBoostAfterChangeLanes)
			{
				runForwardLine(speedBoostAfterChangeLanes);
    1db4:	8b cf       	rjmp	.-234    	; 0x1ccc <rightLaneChange+0x16>
    1db6:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <speedBoostAfterChangeLanes>
    1dba:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <speedBoostAfterChangeLanes+0x1>
    1dbe:	5e dc       	rcall	.-1860   	; 0x167c <runForwardLine>
			runCase4 = 69;
			cnt1 = 0;
			cnt2 = 0;
			break;
			case 69:
			while(cnt2 < timerBoostAfterChangeLanes)
    1dc0:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <cnt2>
    1dc4:	30 91 45 03 	lds	r19, 0x0345	; 0x800345 <cnt2+0x1>
    1dc8:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timerBoostAfterChangeLanes>
    1dcc:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timerBoostAfterChangeLanes+0x1>
    1dd0:	28 17       	cp	r18, r24
    1dd2:	39 07       	cpc	r19, r25
    1dd4:	80 f3       	brcs	.-32     	; 0x1db6 <rightLaneChange+0x100>
			{
				runForwardLine(speedBoostAfterChangeLanes);
			}
			cnt1 = 0;
			cnt2 = 0;
    1dd6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    1dda:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			return 11;
    1dde:	8b e0       	ldi	r24, 0x0B	; 11
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	05 c0       	rjmp	.+10     	; 0x1dee <rightLaneChange+0x138>
	while (1)
	{
		if (checkCrossLine())
		{
			cnt1 = 0;
			return 21;
    1de4:	85 e1       	ldi	r24, 0x15	; 21
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <rightLaneChange+0x138>
			cnt1 = 0;
			cnt2 = 0;
			return 11;
			break;
			default:
			return 11;
    1dea:	8b e0       	ldi	r24, 0x0B	; 11
    1dec:	90 e0       	ldi	r25, 0x00	; 0

		}
	}
}
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

00001df8 <runForwardLine90>:
		speed(0,0);
		break;
	}
}
void runForwardLine90 (int speedRun90)
{
    1df8:	bc 01       	movw	r22, r24
	switch(sensor) {
    1dfa:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	81 3f       	cpi	r24, 0xF1	; 241
    1e02:	91 05       	cpc	r25, r1
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <runForwardLine90+0x10>
    1e06:	eb c1       	rjmp	.+982    	; 0x21de <__DATA_REGION_LENGTH__+0x1de>
    1e08:	fc 01       	movw	r30, r24
    1e0a:	88 27       	eor	r24, r24
    1e0c:	e4 59       	subi	r30, 0x94	; 148
    1e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__tablejump2__>
		case 0x18:// 00011000
		case 0x3c:// 00111100
		handleAndSpeed(angle0,speedRun90);
    1e16:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <angle0>
    1e1a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <angle0+0x1>
    1e1e:	76 db       	rcall	.-2324   	; 0x150c <handleAndSpeed>
		curveFlag = 0;
    1e20:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = 0;
    1e24:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <sensorPos>
		straightLine = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
    1e2e:	08 95       	ret
		case 0x1C:// 00011100
		case 0x08:// 00001000
		if ( sensorPos < -3)
    1e30:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1e34:	8d 3f       	cpi	r24, 0xFD	; 253
    1e36:	34 f4       	brge	.+12     	; 0x1e44 <runForwardLine90+0x4c>
		{
			handleAndSpeed (-30,0);
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	82 ee       	ldi	r24, 0xE2	; 226
    1e3e:	9f ef       	ldi	r25, 0xFF	; 255
    1e40:	65 cb       	rjmp	.-2358   	; 0x150c <handleAndSpeed>
			break;
    1e42:	08 95       	ret
		}
		else
		handleAndSpeed(angle1,speedRun90);
    1e44:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    1e48:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    1e4c:	5f db       	rcall	.-2370   	; 0x150c <handleAndSpeed>
		curveFlag = 0;
    1e4e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 1;
    1e58:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
    1e5c:	08 95       	ret
		case 0x0c:// 00001100
		case 0x1e:// 00011110
		if ( sensorPos < -3)
    1e5e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1e62:	8d 3f       	cpi	r24, 0xFD	; 253
    1e64:	34 f4       	brge	.+12     	; 0x1e72 <runForwardLine90+0x7a>
		{
			handleAndSpeed(-30,0);
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	82 ee       	ldi	r24, 0xE2	; 226
    1e6c:	9f ef       	ldi	r25, 0xFF	; 255
    1e6e:	4e cb       	rjmp	.-2404   	; 0x150c <handleAndSpeed>
			break;
    1e70:	08 95       	ret
		}
		else
		handleAndSpeed(angle2,speedRun90);
    1e72:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle2>
    1e76:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle2+0x1>
    1e7a:	48 db       	rcall	.-2416   	; 0x150c <handleAndSpeed>
		curveFlag = 0;
    1e7c:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = 2;
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 1;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
    1e8c:	08 95       	ret
		case 0x04:// 00000100
		case 0x0e:// 00001110
		if ( sensorPos < -3)
    1e8e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1e92:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1e94:	34 f4       	brge	.+12     	; 0x1ea2 <runForwardLine90+0xaa>
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	82 ee       	ldi	r24, 0xE2	; 226
    1e9c:	9f ef       	ldi	r25, 0xFF	; 255
    1e9e:	36 cb       	rjmp	.-2452   	; 0x150c <handleAndSpeed>
			break;
    1ea0:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1ea2:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    1ea6:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    1eaa:	0c 97       	sbiw	r24, 0x0c	; 12
    1eac:	50 f0       	brcs	.+20     	; 0x1ec2 <runForwardLine90+0xca>
		{
			handle(7);
    1eae:	87 e0       	ldi	r24, 0x07	; 7
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(-20,-20);
    1eb6:	6c ee       	ldi	r22, 0xEC	; 236
    1eb8:	7f ef       	ldi	r23, 0xFF	; 255
    1eba:	8c ee       	ldi	r24, 0xEC	; 236
    1ebc:	9f ef       	ldi	r25, 0xFF	; 255
    1ebe:	7b d5       	rcall	.+2806   	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(angle3,speedRun90);
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <runForwardLine90+0xd4>
    1ec2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <angle3>
    1ec6:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <angle3+0x1>
    1eca:	20 db       	rcall	.-2496   	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 3;
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    1ed8:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
    1edc:	08 95       	ret
		case 0x06:// 00000110
		if ( sensorPos < -3)
    1ede:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1ee2:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1ee4:	34 f4       	brge	.+12     	; 0x1ef2 <runForwardLine90+0xfa>
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	82 ee       	ldi	r24, 0xE2	; 226
    1eec:	9f ef       	ldi	r25, 0xFF	; 255
    1eee:	0e cb       	rjmp	.-2532   	; 0x150c <handleAndSpeed>
			break;
    1ef0:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1ef2:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    1ef6:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    1efa:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    1efc:	50 f0       	brcs	.+20     	; 0x1f12 <runForwardLine90+0x11a>
    1efe:	8f e0       	ldi	r24, 0x0F	; 15
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed(-20,-20);
    1f06:	6c ee       	ldi	r22, 0xEC	; 236
    1f08:	7f ef       	ldi	r23, 0xFF	; 255
    1f0a:	8c ee       	ldi	r24, 0xEC	; 236
    1f0c:	9f ef       	ldi	r25, 0xFF	; 255
    1f0e:	53 d5       	rcall	.+2726   	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(angle4,speedRun90);
    1f10:	05 c0       	rjmp	.+10     	; 0x1f1c <runForwardLine90+0x124>
    1f12:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    1f16:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    1f1a:	f8 da       	rcall	.-2576   	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 4;
    1f22:	84 e0       	ldi	r24, 0x04	; 4
    1f24:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    1f28:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
		case 0x02:// 00000010
		case 0x07:// 00000111
		if ( sensorPos < -3)
    1f2c:	08 95       	ret
    1f2e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
    1f32:	8d 3f       	cpi	r24, 0xFD	; 253
		{
			handleAndSpeed(-30,0);
    1f34:	34 f4       	brge	.+12     	; 0x1f42 <runForwardLine90+0x14a>
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	82 ee       	ldi	r24, 0xE2	; 226
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	e6 ca       	rjmp	.-2612   	; 0x150c <handleAndSpeed>
			break;
    1f40:	08 95       	ret
		}
		else if (brakeCurve > 11)
    1f42:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    1f46:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    1f4a:	0c 97       	sbiw	r24, 0x0c	; 12
		{
			handle(15);
    1f4c:	50 f0       	brcs	.+20     	; 0x1f62 <runForwardLine90+0x16a>
    1f4e:	8f e0       	ldi	r24, 0x0F	; 15
    1f50:	90 e0       	ldi	r25, 0x00	; 0
			speed(-20,-20);
    1f52:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    1f56:	6c ee       	ldi	r22, 0xEC	; 236
    1f58:	7f ef       	ldi	r23, 0xFF	; 255
    1f5a:	8c ee       	ldi	r24, 0xEC	; 236
    1f5c:	9f ef       	ldi	r25, 0xFF	; 255
    1f5e:	2b d5       	rcall	.+2646   	; 0x29b6 <speed>
		}
		else
		handleAndSpeed(angle5,speedRun90);
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <runForwardLine90+0x174>
    1f62:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <angle5>
    1f66:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <angle5+0x1>
    1f6a:	d0 da       	rcall	.-2656   	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 5;
    1f72:	85 e0       	ldi	r24, 0x05	; 5
    1f74:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    1f78:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
		case 0x03:// 00000011
		if ( sensorPos < -3)
    1f7c:	08 95       	ret
    1f7e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(-30,0);
    1f82:	8d 3f       	cpi	r24, 0xFD	; 253
    1f84:	34 f4       	brge	.+12     	; 0x1f92 <runForwardLine90+0x19a>
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	82 ee       	ldi	r24, 0xE2	; 226
    1f8c:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1f8e:	be ca       	rjmp	.-2692   	; 0x150c <handleAndSpeed>
		}
		else
		handleAndSpeed(angle6,speedRun90);
    1f90:	08 95       	ret
    1f92:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    1f96:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    1f9a:	b8 da       	rcall	.-2704   	; 0x150c <handleAndSpeed>
		curveFlag = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = 6;
    1fa2:	86 e0       	ldi	r24, 0x06	; 6
    1fa4:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
		break;
    1fa8:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0x01:// 00000001
		if ( sensorPos < -3)
    1fac:	08 95       	ret
    1fae:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(-30,0);
    1fb2:	8d 3f       	cpi	r24, 0xFD	; 253
    1fb4:	34 f4       	brge	.+12     	; 0x1fc2 <runForwardLine90+0x1ca>
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	82 ee       	ldi	r24, 0xE2	; 226
    1fbc:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1fbe:	a6 ca       	rjmp	.-2740   	; 0x150c <handleAndSpeed>
		}
		handleAndSpeed(angle7,speedRun90);
    1fc0:	08 95       	ret
    1fc2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle7>
    1fc6:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle7+0x1>
		curveFlag = 1;   //RYGB(0,0,0,0);
    1fca:	a0 da       	rcall	.-2752   	; 0x150c <handleAndSpeed>
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		straightLine = 0;
    1fd2:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		sensorPos = 6;
    1fd6:	86 e0       	ldi	r24, 0x06	; 6
    1fd8:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
		case 0x81:// 10000001
		case 0xc1:// 11000001
		case 0x00:// 00000000
		case 0x83:// 10000011
		if ( sensorPos < -4)
    1fdc:	08 95       	ret
    1fde:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(-30,0);
    1fe2:	8c 3f       	cpi	r24, 0xFC	; 252
    1fe4:	34 f4       	brge	.+12     	; 0x1ff2 <runForwardLine90+0x1fa>
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	82 ee       	ldi	r24, 0xE2	; 226
			break;
    1fec:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else if ( sensorPos > 4)
    1fee:	8e ca       	rjmp	.-2788   	; 0x150c <handleAndSpeed>
    1ff0:	08 95       	ret
    1ff2:	85 30       	cpi	r24, 0x05	; 5
		{
			handleAndSpeed(30,0);
    1ff4:	0c f4       	brge	.+2      	; 0x1ff8 <runForwardLine90+0x200>
    1ff6:	fb c0       	rjmp	.+502    	; 0x21ee <__DATA_REGION_LENGTH__+0x1ee>
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
		}
		break;
		case 0x10:// 00010000
		case 0x38:// 00111000
		if ( sensorPos > 3)
    2000:	85 ca       	rjmp	.-2806   	; 0x150c <handleAndSpeed>
    2002:	08 95       	ret
    2004:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    2008:	84 30       	cpi	r24, 0x04	; 4
    200a:	34 f0       	brlt	.+12     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	8e e1       	ldi	r24, 0x1E	; 30
    2012:	90 e0       	ldi	r25, 0x00	; 0
			break;
    2014:	7b ca       	rjmp	.-2826   	; 0x150c <handleAndSpeed>
		}
		else
		handleAndSpeedMicro (-angle1,speedRun90);
    2016:	08 95       	ret
    2018:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <angle1>
    201c:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <angle1+0x1>
    2020:	91 95       	neg	r25
    2022:	81 95       	neg	r24
    2024:	91 09       	sbc	r25, r1
		curveFlag = 0;
    2026:	c7 da       	rcall	.-2674   	; 0x15b6 <handleAndSpeedMicro>
    2028:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = -1;
    202c:	8f ef       	ldi	r24, 0xFF	; 255
		straightLine = 1;
    202e:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
    2032:	81 e0       	ldi	r24, 0x01	; 1
		break;
    2034:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		case 0x30:// 00110000
		case 0x78:// 01111000
		if ( sensorPos > 3)
    2038:	08 95       	ret
    203a:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    203e:	84 30       	cpi	r24, 0x04	; 4
    2040:	34 f0       	brlt	.+12     	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	8e e1       	ldi	r24, 0x1E	; 30
    2048:	90 e0       	ldi	r25, 0x00	; 0
			break;
    204a:	60 ca       	rjmp	.-2880   	; 0x150c <handleAndSpeed>
		}
		else
		handleAndSpeed(-angle2,speedRun90);
    204c:	08 95       	ret
    204e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <angle2>
    2052:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <angle2+0x1>
    2056:	91 95       	neg	r25
    2058:	81 95       	neg	r24
    205a:	91 09       	sbc	r25, r1
		curveFlag = 0;
    205c:	57 da       	rcall	.-2898   	; 0x150c <handleAndSpeed>
    205e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <curveFlag>
		sensorPos = -2;
    2062:	8e ef       	ldi	r24, 0xFE	; 254
    2064:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		break;
		case 0x20:// 00100000
		case 0x70:// 01110000
		if ( sensorPos > 3)
    206e:	08 95       	ret
    2070:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	34 f0       	brlt	.+12     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    207e:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    2080:	45 ca       	rjmp	.-2934   	; 0x150c <handleAndSpeed>
    2082:	08 95       	ret
    2084:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    2088:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
		{
			handle(-7);
    208c:	0c 97       	sbiw	r24, 0x0c	; 12
    208e:	50 f0       	brcs	.+20     	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    2090:	89 ef       	ldi	r24, 0xF9	; 249
    2092:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    2094:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2098:	6c ee       	ldi	r22, 0xEC	; 236
    209a:	7f ef       	ldi	r23, 0xFF	; 255
    209c:	8c ee       	ldi	r24, 0xEC	; 236
    209e:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else
		handleAndSpeed(-angle3,speedRun90);
    20a0:	8a d4       	rcall	.+2324   	; 0x29b6 <speed>
    20a2:	08 c0       	rjmp	.+16     	; 0x20b4 <__DATA_REGION_LENGTH__+0xb4>
    20a4:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <angle3>
    20a8:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <angle3+0x1>
    20ac:	91 95       	neg	r25
    20ae:	81 95       	neg	r24
    20b0:	91 09       	sbc	r25, r1
		curveFlag = 1;
    20b2:	2c da       	rcall	.-2984   	; 0x150c <handleAndSpeed>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = -3;
    20ba:	8d ef       	ldi	r24, 0xFD	; 253
    20bc:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
		break;
    20c0:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0x60:// 01100000
		if ( sensorPos > 3)
    20c4:	08 95       	ret
    20c6:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	34 f0       	brlt	.+12     	; 0x20da <__DATA_REGION_LENGTH__+0xda>
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    20d4:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    20d6:	1a ca       	rjmp	.-3020   	; 0x150c <handleAndSpeed>
    20d8:	08 95       	ret
    20da:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    20de:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
		{
			handle(-15);
    20e2:	0c 97       	sbiw	r24, 0x0c	; 12
    20e4:	50 f0       	brcs	.+20     	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
    20e6:	81 ef       	ldi	r24, 0xF1	; 241
    20e8:	9f ef       	ldi	r25, 0xFF	; 255
			speed(-20,-20);
    20ea:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    20ee:	6c ee       	ldi	r22, 0xEC	; 236
    20f0:	7f ef       	ldi	r23, 0xFF	; 255
    20f2:	8c ee       	ldi	r24, 0xEC	; 236
    20f4:	9f ef       	ldi	r25, 0xFF	; 255
		}
		else
		handleAndSpeed(-angle4,speedRun90);
    20f6:	5f d4       	rcall	.+2238   	; 0x29b6 <speed>
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
    20fa:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <angle4>
    20fe:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <angle4+0x1>
    2102:	91 95       	neg	r25
    2104:	81 95       	neg	r24
    2106:	91 09       	sbc	r25, r1
		curveFlag = 1;
    2108:	01 da       	rcall	.-3070   	; 0x150c <handleAndSpeed>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = -4;
    2110:	8c ef       	ldi	r24, 0xFC	; 252
		straightLine = 0;
    2112:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
    2116:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0x40:// 01000000
		case 0xe0:// 11100000
		if ( sensorPos > 3)
    211a:	08 95       	ret
    211c:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    2120:	84 30       	cpi	r24, 0x04	; 4
    2122:	34 f0       	brlt	.+12     	; 0x2130 <__DATA_REGION_LENGTH__+0x130>
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    212a:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (brakeCurve > 11)
    212c:	ef c9       	rjmp	.-3106   	; 0x150c <handleAndSpeed>
    212e:	08 95       	ret
    2130:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    2134:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
		{
			handle(-15);
    2138:	0c 97       	sbiw	r24, 0x0c	; 12
    213a:	50 f0       	brcs	.+20     	; 0x2150 <__DATA_REGION_LENGTH__+0x150>
    213c:	81 ef       	ldi	r24, 0xF1	; 241
    213e:	9f ef       	ldi	r25, 0xFF	; 255
			speed(0,0);
    2140:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle5,speedRun90);
    214c:	34 d4       	rcall	.+2152   	; 0x29b6 <speed>
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
    2150:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <angle5>
    2154:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <angle5+0x1>
    2158:	91 95       	neg	r25
    215a:	81 95       	neg	r24
		curveFlag = 1;
    215c:	91 09       	sbc	r25, r1
    215e:	d6 d9       	rcall	.-3156   	; 0x150c <handleAndSpeed>
    2160:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -5;
    2162:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
    2166:	8b ef       	ldi	r24, 0xFB	; 251
		straightLine = 0;
    2168:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
    216c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		case 0xc0:// 11000000
		if ( sensorPos > 3)
    2170:	08 95       	ret
    2172:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    2176:	84 30       	cpi	r24, 0x04	; 4
    2178:	34 f0       	brlt	.+12     	; 0x2186 <__DATA_REGION_LENGTH__+0x186>
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    2180:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle6,speedRun90);
    2182:	c4 c9       	rjmp	.-3192   	; 0x150c <handleAndSpeed>
    2184:	08 95       	ret
    2186:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <angle6>
    218a:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <angle6+0x1>
    218e:	91 95       	neg	r25
    2190:	81 95       	neg	r24
		curveFlag = 1;
    2192:	91 09       	sbc	r25, r1
    2194:	bb d9       	rcall	.-3210   	; 0x150c <handleAndSpeed>
    2196:	81 e0       	ldi	r24, 0x01	; 1
		sensorPos = -6;
    2198:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
    219c:	8a ef       	ldi	r24, 0xFA	; 250
		straightLine = 0;
    219e:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		break;
		case 0x80:// 10000000
		if ( sensorPos > 3)
    21a2:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
    21a6:	08 95       	ret
    21a8:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <sensorPos>
		{
			handleAndSpeed(30,0);
    21ac:	84 30       	cpi	r24, 0x04	; 4
    21ae:	34 f0       	brlt	.+12     	; 0x21bc <__DATA_REGION_LENGTH__+0x1bc>
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	8e e1       	ldi	r24, 0x1E	; 30
			break;
    21b6:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		handleAndSpeed(-angle7,speedRun90);
    21b8:	a9 c9       	rjmp	.-3246   	; 0x150c <handleAndSpeed>
    21ba:	08 95       	ret
    21bc:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angle7>
    21c0:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angle7+0x1>
    21c4:	91 95       	neg	r25
    21c6:	81 95       	neg	r24
    21c8:	91 09       	sbc	r25, r1
		curveFlag = 1;
    21ca:	a0 d9       	rcall	.-3264   	; 0x150c <handleAndSpeed>
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <curveFlag>
		sensorPos = -6;
    21d2:	8a ef       	ldi	r24, 0xFA	; 250
    21d4:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <sensorPos>
		straightLine = 0;
    21d8:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
		break;
		case 0x0f: break;
		case 0xf0: break;
		default:
		straightLine = 1;
    21dc:	08 95       	ret
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <straightLine>
		speed(0,0);
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	e4 c3       	rjmp	.+1992   	; 0x29b6 <speed>
    21ee:	08 95       	ret

000021f0 <turn90>:
		break;
	}
}
int turn90(int speedRun)
{
    21f0:	6f 92       	push	r6
    21f2:	7f 92       	push	r7
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	8c 01       	movw	r16, r24
	int runCase2 = 19;
	cnt1 = 0;
    220e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    2212:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
	cnt2 = 0;
    2216:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    221a:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
	RGB(1,0,1);
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
		break;
	}
}
int turn90(int speedRun)
{
	int runCase2 = 19;
    2228:	c3 e1       	ldi	r28, 0x13	; 19
    222a:	d0 e0       	ldi	r29, 0x00	; 0
			switch( line ) {
				case 2:
				handle(-45);
				speed(0,speedRun);
				if(sensorMask(0xff) == 0x00){
					runCase2 = 31;
    222c:	0f 2e       	mov	r0, r31
    222e:	ff e1       	ldi	r31, 0x1F	; 31
    2230:	6f 2e       	mov	r6, r31
    2232:	f0 2d       	mov	r31, r0
    2234:	71 2c       	mov	r7, r1
					beep_long(1000);
					runCase2 = 24;
					cnt1 = 0;
					break;
					case 1:
					line = 1;
    2236:	cc 24       	eor	r12, r12
    2238:	c3 94       	inc	r12
    223a:	d1 2c       	mov	r13, r1
					handle(45);
					speed(0,0);
					beep_long(100);
					runCase2 = 24;
    223c:	0f 2e       	mov	r0, r31
    223e:	f8 e1       	ldi	r31, 0x18	; 24
    2240:	8f 2e       	mov	r8, r31
    2242:	f0 2d       	mov	r31, r0
    2244:	91 2c       	mov	r9, r1
			if (LineCheck)
			{
				switch (LineCheck)
				{
					case 2:
					line = 2;
    2246:	68 94       	set
    2248:	ee 24       	eor	r14, r14
    224a:	e1 f8       	bld	r14, 1
    224c:	f1 2c       	mov	r15, r1
		switch (runCase2)
		{
			case 19:
			brakeTheCar(timerBrake90,speedBrake90);
			runForwardLine90(speedRun);
			runCase2 = 23;
    224e:	0f 2e       	mov	r0, r31
    2250:	f7 e1       	ldi	r31, 0x17	; 23
    2252:	af 2e       	mov	r10, r31
    2254:	f0 2d       	mov	r31, r0
    2256:	b1 2c       	mov	r11, r1
	cnt1 = 0;
	cnt2 = 0;
	RGB(1,0,1);
	int LineCheck = 0;
	while (1){
		switch (runCase2)
    2258:	fe 01       	movw	r30, r28
    225a:	73 97       	sbiw	r30, 0x13	; 19
    225c:	ec 31       	cpi	r30, 0x1C	; 28
    225e:	f1 05       	cpc	r31, r1
    2260:	08 f0       	brcs	.+2      	; 0x2264 <__stack+0x65>
    2262:	c4 c1       	rjmp	.+904    	; 0x25ec <__stack+0x3ed>
    2264:	88 27       	eor	r24, r24
    2266:	e3 5a       	subi	r30, 0xA3	; 163
    2268:	fd 4f       	sbci	r31, 0xFD	; 253
    226a:	8f 4f       	sbci	r24, 0xFF	; 255
    226c:	21 c6       	rjmp	.+3138   	; 0x2eb0 <__tablejump2__>
		{
			case 19:
			brakeTheCar(timerBrake90,speedBrake90);
    226e:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <speedBrake90>
    2272:	70 91 31 03 	lds	r23, 0x0331	; 0x800331 <speedBrake90+0x1>
    2276:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <timerBrake90>
    227a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <timerBrake90+0x1>
    227e:	36 dc       	rcall	.-1940   	; 0x1aec <brakeTheCar>
			runForwardLine90(speedRun);
    2280:	c8 01       	movw	r24, r16
    2282:	ba dd       	rcall	.-1164   	; 0x1df8 <runForwardLine90>
    2284:	ca 2d       	mov	r28, r10
			runCase2 = 23;
    2286:	db 2d       	mov	r29, r11
    2288:	e7 cf       	rjmp	.-50     	; 0x2258 <__stack+0x59>
			break;
    228a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <cnt1>
			case 23:
			if(cnt1 > 2000){
    228e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <cnt1+0x1>
    2292:	81 3d       	cpi	r24, 0xD1	; 209
    2294:	97 40       	sbci	r25, 0x07	; 7
    2296:	08 f0       	brcs	.+2      	; 0x229a <__stack+0x9b>
    2298:	ac c1       	rjmp	.+856    	; 0x25f2 <__stack+0x3f3>
				return 100;
				break;
			}
			LineCheck = checkCrossHalfLine();
    229a:	24 d9       	rcall	.-3512   	; 0x14e4 <checkCrossHalfLine>
    229c:	88 23       	and	r24, r24
			if (LineCheck)
    229e:	a1 f1       	breq	.+104    	; 0x2308 <__stack+0x109>
    22a0:	81 30       	cpi	r24, 0x01	; 1
			{
				switch (LineCheck)
    22a2:	d1 f0       	breq	.+52     	; 0x22d8 <__stack+0xd9>
    22a4:	82 30       	cpi	r24, 0x02	; 2
    22a6:	c1 f6       	brne	.-80     	; 0x2258 <__stack+0x59>
    22a8:	f0 92 15 03 	sts	0x0315, r15	; 0x800315 <line+0x1>
				{
					case 2:
					line = 2;
    22ac:	e0 92 14 03 	sts	0x0314, r14	; 0x800314 <line>
    22b0:	83 ed       	ldi	r24, 0xD3	; 211
					handle (-45);
    22b2:	9f ef       	ldi	r25, 0xFF	; 255
    22b4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    22b8:	60 e0       	ldi	r22, 0x00	; 0
					speed(0,0);
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	7a d3       	rcall	.+1780   	; 0x29b6 <speed>
    22c2:	88 ee       	ldi	r24, 0xE8	; 232
					beep_long(1000);
    22c4:	93 e0       	ldi	r25, 0x03	; 3
    22c6:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    22ca:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
					runCase2 = 24;
					cnt1 = 0;
    22ce:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    22d2:	c8 2d       	mov	r28, r8
					case 2:
					line = 2;
					handle (-45);
					speed(0,0);
					beep_long(1000);
					runCase2 = 24;
    22d4:	d9 2d       	mov	r29, r9
    22d6:	c0 cf       	rjmp	.-128    	; 0x2258 <__stack+0x59>
					cnt1 = 0;
					break;
    22d8:	d0 92 15 03 	sts	0x0315, r13	; 0x800315 <line+0x1>
					case 1:
					line = 1;
    22dc:	c0 92 14 03 	sts	0x0314, r12	; 0x800314 <line>
    22e0:	8d e2       	ldi	r24, 0x2D	; 45
					handle(45);
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
					speed(0,0);
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	62 d3       	rcall	.+1732   	; 0x29b6 <speed>
    22f2:	84 e6       	ldi	r24, 0x64	; 100
					beep_long(100);
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    22fa:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
					runCase2 = 24;
					cnt1 = 0;
    22fe:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
					case 1:
					line = 1;
					handle(45);
					speed(0,0);
					beep_long(100);
					runCase2 = 24;
    2302:	c8 2d       	mov	r28, r8
    2304:	d9 2d       	mov	r29, r9
					cnt1 = 0;
					break;
    2306:	a8 cf       	rjmp	.-176    	; 0x2258 <__stack+0x59>
					default : break;
				}
			}
			else runForwardLine90(speedRun);
    2308:	c8 01       	movw	r24, r16
    230a:	76 dd       	rcall	.-1300   	; 0x1df8 <runForwardLine90>
    230c:	a5 cf       	rjmp	.-182    	; 0x2258 <__stack+0x59>
    230e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <line>
			break;
			case 24:
			switch( line ) {
    2312:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <line+0x1>
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	b1 f0       	breq	.+44     	; 0x2348 <__stack+0x149>
    231c:	02 97       	sbiw	r24, 0x02	; 2
    231e:	09 f0       	breq	.+2      	; 0x2322 <__stack+0x123>
    2320:	9b cf       	rjmp	.-202    	; 0x2258 <__stack+0x59>
    2322:	83 ed       	ldi	r24, 0xD3	; 211
				case 2:
				handle(-45);
    2324:	9f ef       	ldi	r25, 0xFF	; 255
    2326:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(0,speedRun);
    232a:	b8 01       	movw	r22, r16
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	42 d3       	rcall	.+1668   	; 0x29b6 <speed>
    2332:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
				if(sensorMask(0xff) == 0x00){
    2336:	81 11       	cpse	r24, r1
    2338:	02 c0       	rjmp	.+4      	; 0x233e <__stack+0x13f>
    233a:	c6 2d       	mov	r28, r6
					runCase2 = 31;
    233c:	d7 2d       	mov	r29, r7
    233e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
				}
				cnt1 = 0;
    2342:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    2346:	88 cf       	rjmp	.-240    	; 0x2258 <__stack+0x59>
				
				break;
				case 1:
				handle(45);
    2348:	8d e2       	ldi	r24, 0x2D	; 45
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(speedRun,0);
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	70 e0       	ldi	r23, 0x00	; 0
    2354:	c8 01       	movw	r24, r16
    2356:	2f d3       	rcall	.+1630   	; 0x29b6 <speed>
    2358:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
				if(sensorMask(0xff) == 0x00){
    235c:	81 11       	cpse	r24, r1
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <__stack+0x165>
    2360:	c9 e2       	ldi	r28, 0x29	; 41
					runCase2 = 41;
    2362:	d0 e0       	ldi	r29, 0x00	; 0
    2364:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
				}
				cnt1 = 0;
    2368:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    236c:	75 cf       	rjmp	.-278    	; 0x2258 <__stack+0x59>
				break;
    236e:	40 e0       	ldi	r20, 0x00	; 0
				default:
				break;
			}
			break;
			case 31:
			RGB(1,0,0);
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (-45);
    2378:	83 ed       	ldi	r24, 0xD3	; 211
    237a:	9f ef       	ldi	r25, 0xFF	; 255
    237c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    2380:	b8 01       	movw	r22, r16
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	17 d3       	rcall	.+1582   	; 0x29b6 <speed>
    2388:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
		runForwardLine(speedRun);
	}
}
unsigned char sensorMask (unsigned char MASK)
{
	return ( sensor & MASK);
    238c:	98 2f       	mov	r25, r24
			break;
			case 31:
			RGB(1,0,0);
			handle (-45);
			speed (0,speedRun);
			if (sensorMask(0X3c) != 0x00)
    238e:	9c 73       	andi	r25, 0x3C	; 60
    2390:	39 f0       	breq	.+14     	; 0x23a0 <__stack+0x1a1>
    2392:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    2396:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    239a:	cd e2       	ldi	r28, 0x2D	; 45
				runCase2 = 45;
    239c:	d0 e0       	ldi	r29, 0x00	; 0
    239e:	5c cf       	rjmp	.-328    	; 0x2258 <__stack+0x59>
				break;
    23a0:	81 ff       	sbrs	r24, 1
			}
			if ((sensorMask (0x02) == 0x02))
    23a2:	5a cf       	rjmp	.-332    	; 0x2258 <__stack+0x59>
    23a4:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    23a8:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    23ac:	c0 e2       	ldi	r28, 0x20	; 32
				runCase2 = 32;
    23ae:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    23b0:	53 cf       	rjmp	.-346    	; 0x2258 <__stack+0x59>
			}
			break;
			case 32:
			handle (-45);
    23b2:	83 ed       	ldi	r24, 0xD3	; 211
    23b4:	9f ef       	ldi	r25, 0xFF	; 255
    23b6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    23ba:	b8 01       	movw	r22, r16
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	fa d2       	rcall	.+1524   	; 0x29b6 <speed>
    23c2:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x0f) == 0x01) {
    23c6:	8f 70       	andi	r24, 0x0F	; 15
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	09 f0       	breq	.+2      	; 0x23ce <__stack+0x1cf>
    23cc:	45 cf       	rjmp	.-374    	; 0x2258 <__stack+0x59>
				runCase2 = 33;
    23ce:	c1 e2       	ldi	r28, 0x21	; 33
    23d0:	d0 e0       	ldi	r29, 0x00	; 0
    23d2:	42 cf       	rjmp	.-380    	; 0x2258 <__stack+0x59>
				break;
			}
			break;
			case 33:
			handle (-45);
    23d4:	83 ed       	ldi	r24, 0xD3	; 211
    23d6:	9f ef       	ldi	r25, 0xFF	; 255
    23d8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    23dc:	b8 01       	movw	r22, r16
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	e9 d2       	rcall	.+1490   	; 0x29b6 <speed>
    23e4:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0xf0) == 0x00)
    23e8:	80 7f       	andi	r24, 0xF0	; 240
    23ea:	09 f0       	breq	.+2      	; 0x23ee <__stack+0x1ef>
    23ec:	35 cf       	rjmp	.-406    	; 0x2258 <__stack+0x59>
			{
				runCase2 = 34;
    23ee:	c2 e2       	ldi	r28, 0x22	; 34
    23f0:	d0 e0       	ldi	r29, 0x00	; 0
    23f2:	32 cf       	rjmp	.-412    	; 0x2258 <__stack+0x59>
				break;
			}
			break;
			case 34:
			handle (15);//35
    23f4:	8f e0       	ldi	r24, 0x0F	; 15
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    23fc:	b8 01       	movw	r22, r16
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	d9 d2       	rcall	.+1458   	; 0x29b6 <speed>
    2404:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    2408:	8c 73       	andi	r24, 0x3C	; 60
    240a:	09 f4       	brne	.+2      	; 0x240e <__stack+0x20f>
    240c:	25 cf       	rjmp	.-438    	; 0x2258 <__stack+0x59>
    240e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    2412:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    2416:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
				cnt2 = 0;
    241a:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
    241e:	c3 e2       	ldi	r28, 0x23	; 35
				runCase2 = 35;
    2420:	d0 e0       	ldi	r29, 0x00	; 0
    2422:	1a cf       	rjmp	.-460    	; 0x2258 <__stack+0x59>
			}
			break;
			case 35:
			RGB(1,0,1);
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (30);
    242e:	8e e1       	ldi	r24, 0x1E	; 30
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (0,speedRun);
    2436:	b8 01       	movw	r22, r16
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	bc d2       	rcall	.+1400   	; 0x29b6 <speed>
    243e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    2442:	8c 73       	andi	r24, 0x3C	; 60
    2444:	09 f4       	brne	.+2      	; 0x2448 <__stack+0x249>
    2446:	08 cf       	rjmp	.-496    	; 0x2258 <__stack+0x59>
    2448:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    244c:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    2450:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
				cnt2 = 0;
    2454:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
    2458:	ce e2       	ldi	r28, 0x2E	; 46
				runCase2 = 46;
    245a:	d0 e0       	ldi	r29, 0x00	; 0
    245c:	fd ce       	rjmp	.-518    	; 0x2258 <__stack+0x59>
			//}
			//cnt3 = 0;
			//return 11;
			//break;
			case 41:
			RGB(1,0,0);
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	60 e0       	ldi	r22, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle(45);
    2468:	8d e2       	ldi	r24, 0x2D	; 45
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	c8 01       	movw	r24, r16
    2476:	9f d2       	rcall	.+1342   	; 0x29b6 <speed>
    2478:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
		runForwardLine(speedRun);
	}
}
unsigned char sensorMask (unsigned char MASK)
{
	return ( sensor & MASK);
    247c:	98 2f       	mov	r25, r24
			//break;
			case 41:
			RGB(1,0,0);
			handle(45);
			speed (speedRun,0);
			if (sensorMask (0x3c) != 0x00)
    247e:	9c 73       	andi	r25, 0x3C	; 60
    2480:	39 f0       	breq	.+14     	; 0x2490 <__stack+0x291>
    2482:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    2486:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    248a:	cd e2       	ldi	r28, 0x2D	; 45
				runCase2 = 45;
    248c:	d0 e0       	ldi	r29, 0x00	; 0
    248e:	e4 ce       	rjmp	.-568    	; 0x2258 <__stack+0x59>
				break;
    2490:	80 7c       	andi	r24, 0xC0	; 192
			}
			if ((sensorMask (0xc0) == 0xc0))
    2492:	80 3c       	cpi	r24, 0xC0	; 192
    2494:	09 f0       	breq	.+2      	; 0x2498 <__stack+0x299>
    2496:	e0 ce       	rjmp	.-576    	; 0x2258 <__stack+0x59>
    2498:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    249c:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    24a0:	ca e2       	ldi	r28, 0x2A	; 42
				runCase2 = 42;
    24a2:	d0 e0       	ldi	r29, 0x00	; 0
				break;
    24a4:	d9 ce       	rjmp	.-590    	; 0x2258 <__stack+0x59>
			}
			break;
			case 42:
			RGB(0,1,0);
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	61 e0       	ldi	r22, 0x01	; 1
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (45);
    24b0:	8d e2       	ldi	r24, 0x2D	; 45
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	c8 01       	movw	r24, r16
    24be:	7b d2       	rcall	.+1270   	; 0x29b6 <speed>
    24c0:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if ((sensorMask(0xf0) == 0x80))
    24c4:	80 7f       	andi	r24, 0xF0	; 240
    24c6:	80 38       	cpi	r24, 0x80	; 128
    24c8:	09 f0       	breq	.+2      	; 0x24cc <__stack+0x2cd>
    24ca:	c6 ce       	rjmp	.-628    	; 0x2258 <__stack+0x59>
			{
				runCase2 = 43;
    24cc:	cb e2       	ldi	r28, 0x2B	; 43
    24ce:	d0 e0       	ldi	r29, 0x00	; 0
    24d0:	c3 ce       	rjmp	.-634    	; 0x2258 <__stack+0x59>
				break;
			}
			break;
			case 43:
			RGB(0,0,1);
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (45);
    24dc:	8d e2       	ldi	r24, 0x2D	; 45
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	c8 01       	movw	r24, r16
    24ea:	65 d2       	rcall	.+1226   	; 0x29b6 <speed>
    24ec:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if ((sensorMask(0xf0) == 0x00))
    24f0:	80 7f       	andi	r24, 0xF0	; 240
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <__stack+0x2f7>
    24f4:	b1 ce       	rjmp	.-670    	; 0x2258 <__stack+0x59>
			{
				runCase2 = 44;
    24f6:	cc e2       	ldi	r28, 0x2C	; 44
    24f8:	d0 e0       	ldi	r29, 0x00	; 0
    24fa:	ae ce       	rjmp	.-676    	; 0x2258 <__stack+0x59>
				break;
			}
			break;
			case 44:
			RGB(1,0,1);
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (-15);
    2506:	81 ef       	ldi	r24, 0xF1	; 241
    2508:	9f ef       	ldi	r25, 0xFF	; 255
    250a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	c8 01       	movw	r24, r16
    2514:	50 d2       	rcall	.+1184   	; 0x29b6 <speed>
    2516:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    251a:	8c 73       	andi	r24, 0x3C	; 60
    251c:	09 f4       	brne	.+2      	; 0x2520 <__stack+0x321>
    251e:	9c ce       	rjmp	.-712    	; 0x2258 <__stack+0x59>
    2520:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    2524:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    2528:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
				cnt2 = 0;
    252c:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
				runCase2 = 45;
    2530:	cd e2       	ldi	r28, 0x2D	; 45
    2532:	d0 e0       	ldi	r29, 0x00	; 0
    2534:	91 ce       	rjmp	.-734    	; 0x2258 <__stack+0x59>
			}
			break;
			case 45:
			RGB(1,0,1);
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			handle (30);
    2540:	8e e1       	ldi	r24, 0x1E	; 30
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
			speed (speedRun,0);
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	c8 01       	movw	r24, r16
    254e:	33 d2       	rcall	.+1126   	; 0x29b6 <speed>
    2550:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
			if (sensorMask(0x3c)!=0x00)
    2554:	8c 73       	andi	r24, 0x3C	; 60
    2556:	09 f4       	brne	.+2      	; 0x255a <__stack+0x35b>
    2558:	7f ce       	rjmp	.-770    	; 0x2258 <__stack+0x59>
    255a:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			{
				cnt1 = 0;
    255e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    2562:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
				cnt2 = 0;
    2566:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
    256a:	ce e2       	ldi	r28, 0x2E	; 46
				runCase2 = 46;
    256c:	d0 e0       	ldi	r29, 0x00	; 0
    256e:	74 ce       	rjmp	.-792    	; 0x2258 <__stack+0x59>
    2570:	41 e0       	ldi	r20, 0x01	; 1
			}
			break;
			case 46:
			RGB(1,1,1);
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			cnt2 = 0;
    257a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    257e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			beep_long(300);
    2582:	8c e2       	ldi	r24, 0x2C	; 44
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			while(cnt2 < 200)
    258a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    258e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    2592:	88 3c       	cpi	r24, 0xC8	; 200
    2594:	91 05       	cpc	r25, r1
    2596:	48 f4       	brcc	.+18     	; 0x25aa <__stack+0x3ab>
			{
				runForwardLine90(speedRun);
    2598:	c8 01       	movw	r24, r16
    259a:	2e dc       	rcall	.-1956   	; 0x1df8 <runForwardLine90>
    259c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
			break;
			case 46:
			RGB(1,1,1);
			cnt2 = 0;
			beep_long(300);
			while(cnt2 < 200)
    25a0:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    25a4:	88 3c       	cpi	r24, 0xC8	; 200
    25a6:	91 05       	cpc	r25, r1
    25a8:	b8 f3       	brcs	.-18     	; 0x2598 <__stack+0x399>
			{
				runForwardLine90(speedRun);
			}
			cnt2 = 0;
    25aa:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    25ae:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
			while(cnt2 < timerBoostAfter90)
    25b2:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <timerBoostAfter90>
    25b6:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <timerBoostAfter90+0x1>
    25ba:	89 2b       	or	r24, r25
    25bc:	81 f0       	breq	.+32     	; 0x25de <__stack+0x3df>
			{
				runForwardLine90(speedBoostAfter90);
    25be:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <speedBoostAfter90>
    25c2:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <speedBoostAfter90+0x1>
    25c6:	18 dc       	rcall	.-2000   	; 0x1df8 <runForwardLine90>
    25c8:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <cnt2>
			while(cnt2 < 200)
			{
				runForwardLine90(speedRun);
			}
			cnt2 = 0;
			while(cnt2 < timerBoostAfter90)
    25cc:	30 91 45 03 	lds	r19, 0x0345	; 0x800345 <cnt2+0x1>
    25d0:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <timerBoostAfter90>
    25d4:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <timerBoostAfter90+0x1>
    25d8:	28 17       	cp	r18, r24
    25da:	39 07       	cpc	r19, r25
    25dc:	80 f3       	brcs	.-32     	; 0x25be <__stack+0x3bf>
    25de:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <cnt3+0x1>
			{
				runForwardLine90(speedBoostAfter90);
			}
			cnt3 = 0;;
    25e2:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <cnt3>
    25e6:	8b e0       	ldi	r24, 0x0B	; 11
			return 11;
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	05 c0       	rjmp	.+10     	; 0x25f6 <__stack+0x3f7>
    25ec:	8b e0       	ldi	r24, 0x0B	; 11
			break;
			default:
			return 11;
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <__stack+0x3f7>
    25f2:	84 e6       	ldi	r24, 0x64	; 100
			runForwardLine90(speedRun);
			runCase2 = 23;
			break;
			case 23:
			if(cnt1 > 2000){
				return 100;
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	df 91       	pop	r29
			default:
			return 11;
			break;
		}
	}
}
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	df 90       	pop	r13
    2604:	cf 90       	pop	r12
    2606:	bf 90       	pop	r11
    2608:	af 90       	pop	r10
    260a:	9f 90       	pop	r9
    260c:	8f 90       	pop	r8
    260e:	7f 90       	pop	r7
    2610:	6f 90       	pop	r6
    2612:	08 95       	ret

00002614 <run>:
    2614:	0e 94 61 07 	call	0xec2	; 0xec2 <setup>
	speedRun7 = speedRunForward*65/100;		angle7 = 11;
}
void run(void)
{
	setup();
	unsigned char runCase = 0;
    2618:	c0 e0       	ldi	r28, 0x00	; 0
					runCase = 12;
					break;
					
					case HALF_RIGHT_LINE:
					cnt1 = 0;
					runCase = 13;
    261a:	0d e0       	ldi	r16, 0x0D	; 13
				runCase = 21;
				cnt1 = 0;
				break;
			}
			else {					
				switch (checkCrossHalfLine())
    261c:	1b e0       	ldi	r17, 0x0B	; 11
				{
					case HALF_LEFT_LINE:
					cnt1 = 0;
					runCase = 12;
    261e:	dc e0       	ldi	r29, 0x0C	; 12
void run(void)
{
	setup();
	unsigned char runCase = 0;
	while( 1 ) {
		switch( runCase ) {
    2620:	cb 30       	cpi	r28, 0x0B	; 11
    2622:	09 f4       	brne	.+2      	; 0x2626 <run+0x12>
    2624:	5b c0       	rjmp	.+182    	; 0x26dc <run+0xc8>
    2626:	38 f4       	brcc	.+14     	; 0x2636 <run+0x22>
    2628:	c1 30       	cpi	r28, 0x01	; 1
    262a:	41 f1       	breq	.+80     	; 0x267c <run+0x68>
    262c:	80 f0       	brcs	.+32     	; 0x264e <run+0x3a>
    262e:	c2 30       	cpi	r28, 0x02	; 2
    2630:	09 f0       	breq	.+2      	; 0x2634 <run+0x20>
    2632:	db c0       	rjmp	.+438    	; 0x27ea <run+0x1d6>
    2634:	35 c0       	rjmp	.+106    	; 0x26a0 <run+0x8c>
    2636:	cd 30       	cpi	r28, 0x0D	; 13
    2638:	09 f4       	brne	.+2      	; 0x263c <run+0x28>
    263a:	99 c0       	rjmp	.+306    	; 0x276e <run+0x15a>
    263c:	08 f4       	brcc	.+2      	; 0x2640 <run+0x2c>
    263e:	81 c0       	rjmp	.+258    	; 0x2742 <run+0x12e>
    2640:	c5 31       	cpi	r28, 0x15	; 21
    2642:	09 f4       	brne	.+2      	; 0x2646 <run+0x32>
    2644:	aa c0       	rjmp	.+340    	; 0x279a <run+0x186>
    2646:	c4 36       	cpi	r28, 0x64	; 100
    2648:	09 f0       	breq	.+2      	; 0x264c <run+0x38>
    264a:	cf c0       	rjmp	.+414    	; 0x27ea <run+0x1d6>
    264c:	b7 c0       	rjmp	.+366    	; 0x27bc <run+0x1a8>
			case 0:
			if((getGateSensor() == 1)){
    264e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <getGateSensor>
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	71 f4       	brne	.+28     	; 0x2672 <run+0x5e>
				runCase = 1;
				beep_long(100);
    2656:	84 e6       	ldi	r24, 0x64	; 100
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    265e:	2f ef       	ldi	r18, 0xFF	; 255
    2660:	89 e6       	ldi	r24, 0x69	; 105
    2662:	98 e1       	ldi	r25, 0x18	; 24
    2664:	21 50       	subi	r18, 0x01	; 1
    2666:	80 40       	sbci	r24, 0x00	; 0
    2668:	90 40       	sbci	r25, 0x00	; 0
    266a:	e1 f7       	brne	.-8      	; 0x2664 <run+0x50>
    266c:	00 c0       	rjmp	.+0      	; 0x266e <run+0x5a>
    266e:	00 00       	nop
    2670:	05 c0       	rjmp	.+10     	; 0x267c <run+0x68>
				_delay_ms(500);
				break;
			}
			if (SW4)
    2672:	83 e0       	ldi	r24, 0x03	; 3
    2674:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2678:	88 23       	and	r24, r24
    267a:	49 f3       	breq	.-46     	; 0x264e <run+0x3a>
				runCase = 1;
				break;
			}
			break;
			case 1:
			if ((getGateSensor() == 0) || SW4)
    267c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <getGateSensor>
    2680:	88 23       	and	r24, r24
    2682:	29 f0       	breq	.+10     	; 0x268e <run+0x7a>
    2684:	83 e0       	ldi	r24, 0x03	; 3
    2686:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    268a:	88 23       	and	r24, r24
    268c:	b9 f3       	breq	.-18     	; 0x267c <run+0x68>
			{
				runCase = 2;
				cnt1 = 0;
    268e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    2692:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				cnt4 = 0;
    2696:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <cnt4+0x1>
    269a:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <cnt4>
    269e:	07 c0       	rjmp	.+14     	; 0x26ae <run+0x9a>
				break;
			}
			break;
			case 2:
			if( cnt1 < 3000 ) {
    26a0:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <cnt1>
    26a4:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <cnt1+0x1>
    26a8:	88 3b       	cpi	r24, 0xB8	; 184
    26aa:	9b 40       	sbci	r25, 0x0B	; 11
    26ac:	50 f4       	brcc	.+20     	; 0x26c2 <run+0xae>
				handle(0);
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
				speed(0,0);
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	7b d1       	rcall	.+758    	; 0x29b6 <speed>
    26c0:	ef cf       	rjmp	.-34     	; 0x26a0 <run+0x8c>
			}
			else {
				beep_long(100);
    26c2:	84 e6       	ldi	r24, 0x64	; 100
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
				runCase = 11;
				cnt1 = 0;
    26ca:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    26ce:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				cnt4 = 0;
    26d2:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <cnt4+0x1>
    26d6:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <cnt4>
    26da:	10 c0       	rjmp	.+32     	; 0x26fc <run+0xe8>
			}
			break;
			case 11:
			/* time run = cnt4 */
			if(cnt4 > RunTimer){
    26dc:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <cnt4>
    26e0:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <cnt4+0x1>
    26e4:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <RunTimer>
    26e8:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <RunTimer+0x1>
    26ec:	82 17       	cp	r24, r18
    26ee:	93 07       	cpc	r25, r19
    26f0:	28 f4       	brcc	.+10     	; 0x26fc <run+0xe8>
				runCase = 100;
				cnt1 = 0;
    26f2:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    26f6:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    26fa:	67 c0       	rjmp	.+206    	; 0x27ca <run+0x1b6>
				break;
			}
			if(checkCrossLine()) {      
    26fc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <checkCrossLine>
    2700:	88 23       	and	r24, r24
    2702:	29 f0       	breq	.+10     	; 0x270e <run+0xfa>
				runCase = 21;
				cnt1 = 0;
    2704:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    2708:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				break;
    270c:	46 c0       	rjmp	.+140    	; 0x279a <run+0x186>
			}
			else {					
				switch (checkCrossHalfLine())
    270e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <checkCrossHalfLine>
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	41 f0       	breq	.+16     	; 0x2726 <run+0x112>
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	61 f4       	brne	.+24     	; 0x2732 <run+0x11e>
				{
					case HALF_LEFT_LINE:
					cnt1 = 0;
    271a:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    271e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
					runCase = 12;
    2722:	cd 2f       	mov	r28, r29
					break;
    2724:	07 c0       	rjmp	.+14     	; 0x2734 <run+0x120>
					
					case HALF_RIGHT_LINE:
					cnt1 = 0;
    2726:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    272a:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
					runCase = 13;
    272e:	c0 2f       	mov	r28, r16
					break;
    2730:	01 c0       	rjmp	.+2      	; 0x2734 <run+0x120>
				runCase = 21;
				cnt1 = 0;
				break;
			}
			else {					
				switch (checkCrossHalfLine())
    2732:	c1 2f       	mov	r28, r17
					
					default :
					break;
				}
			}
			runForwardLine(speedRunForward);
    2734:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <speedRunForward>
    2738:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <speedRunForward+0x1>
    273c:	0e 94 3e 0b 	call	0x167c	; 0x167c <runForwardLine>
			break;
    2740:	6f cf       	rjmp	.-290    	; 0x2620 <run+0xc>
			case 12:
			/* Check of large turning to the right completion */
			if( checkCrossLine()) {   /* Cross line check even during turning */
    2742:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <checkCrossLine>
    2746:	88 23       	and	r24, r24
    2748:	29 f0       	breq	.+10     	; 0x2754 <run+0x140>
				runCase = 21;
				cnt1 = 0;
    274a:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    274e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				break;
    2752:	23 c0       	rjmp	.+70     	; 0x279a <run+0x186>
			}
			runCase = leftLaneChange(speedChangeLanes);
    2754:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <speedChangeLanes>
    2758:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <speedChangeLanes+0x1>
    275c:	e1 d9       	rcall	.-3134   	; 0x1b20 <leftLaneChange>
    275e:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    2760:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    2764:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
			straightLine = 0;
    2768:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
			break;
    276c:	59 cf       	rjmp	.-334    	; 0x2620 <run+0xc>
			case 13:
			/* Check of large turning completion to the left */
			if( checkCrossLine() ) {   /* Cross line check even during large turn */
    276e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <checkCrossLine>
    2772:	88 23       	and	r24, r24
    2774:	29 f0       	breq	.+10     	; 0x2780 <run+0x16c>
				runCase = 21;
				cnt1 = 0;
    2776:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    277a:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
				break;
    277e:	0d c0       	rjmp	.+26     	; 0x279a <run+0x186>
			}
			runCase = rightLaneChange(speedChangeLanes);
    2780:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <speedChangeLanes>
    2784:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <speedChangeLanes+0x1>
    2788:	96 da       	rcall	.-2772   	; 0x1cb6 <rightLaneChange>
    278a:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    278c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    2790:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
			straightLine = 0;
    2794:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
			break;
    2798:	43 cf       	rjmp	.-378    	; 0x2620 <run+0xc>

			case 21:
			/* Process when first Cross line is detected */
			beep_long(100);
    279a:	84 e6       	ldi	r24, 0x64	; 100
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			runCase = turn90(speed90);
    27a2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <speed90>
    27a6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <speed90+0x1>
    27aa:	22 dd       	rcall	.-1468   	; 0x21f0 <turn90>
    27ac:	c8 2f       	mov	r28, r24
			cnt1 = 0;
    27ae:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    27b2:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
			straightLine = 0;
    27b6:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <straightLine>
			break;
    27ba:	32 cf       	rjmp	.-412    	; 0x2620 <run+0xc>
			
			case 100:
			if (cnt1<500)
    27bc:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <cnt1>
    27c0:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <cnt1+0x1>
    27c4:	84 3f       	cpi	r24, 0xF4	; 244
    27c6:	91 40       	sbci	r25, 0x01	; 1
    27c8:	30 f4       	brcc	.+12     	; 0x27d6 <run+0x1c2>
			{
				speed(0,0);
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	f1 d0       	rcall	.+482    	; 0x29b6 <speed>
    27d4:	f3 cf       	rjmp	.-26     	; 0x27bc <run+0x1a8>
			}
			else
			{
				speed(0,0);
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	eb d0       	rcall	.+470    	; 0x29b6 <speed>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
				handle(0);
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    27e8:	e9 cf       	rjmp	.-46     	; 0x27bc <run+0x1a8>
    27ea:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
			}
			break;
			default:
			runCase = 11;
			cnt1 = 0;
    27ee:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
    27f2:	74 cf       	rjmp	.-280    	; 0x26dc <run+0xc8>

000027f4 <__vector_23>:
    27f4:	1f 92       	push	r1
    27f6:	0f 92       	push	r0
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	0f 92       	push	r0
    27fc:	11 24       	eor	r1, r1
    27fe:	0b b6       	in	r0, 0x3b	; 59
    2800:	0f 92       	push	r0
    2802:	2f 93       	push	r18
    2804:	3f 93       	push	r19
    2806:	4f 93       	push	r20
    2808:	5f 93       	push	r21
    280a:	6f 93       	push	r22
    280c:	7f 93       	push	r23
    280e:	8f 93       	push	r24
    2810:	9f 93       	push	r25
    2812:	af 93       	push	r26
    2814:	bf 93       	push	r27
    2816:	ef 93       	push	r30
    2818:	ff 93       	push	r31
    281a:	86 e0       	ldi	r24, 0x06	; 6
    281c:	86 bd       	out	0x26, r24	; 38
    281e:	e4 d2       	rcall	.+1480   	; 0x2de8 <virtual_timer>
    2820:	0e 94 87 03 	call	0x70e	; 0x70e <beep_mod>
    2824:	0e 94 d6 04 	call	0x9ac	; 0x9ac <update_input>
    2828:	0e 94 ef 02 	call	0x5de	; 0x5de <read_sensor>
    282c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <sensor>
    2830:	0e 94 36 07 	call	0xe6c	; 0xe6c <led_put>
    2834:	ff 91       	pop	r31
    2836:	ef 91       	pop	r30
    2838:	bf 91       	pop	r27
    283a:	af 91       	pop	r26
    283c:	9f 91       	pop	r25
    283e:	8f 91       	pop	r24
    2840:	7f 91       	pop	r23
    2842:	6f 91       	pop	r22
    2844:	5f 91       	pop	r21
    2846:	4f 91       	pop	r20
    2848:	3f 91       	pop	r19
    284a:	2f 91       	pop	r18
    284c:	0f 90       	pop	r0
    284e:	0b be       	out	0x3b, r0	; 59
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	0f 90       	pop	r0
    2856:	1f 90       	pop	r1
    2858:	18 95       	reti

0000285a <init>:
    285a:	80 e8       	ldi	r24, 0x80	; 128
    285c:	80 bf       	out	0x30, r24	; 48
    285e:	0e 94 44 04 	call	0x888	; 0x888 <handle_init>
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    286a:	72 d0       	rcall	.+228    	; 0x2950 <speed_init>
    286c:	a4 d2       	rcall	.+1352   	; 0x2db6 <timer_init>
    286e:	0e 94 9b 02 	call	0x536	; 0x536 <adc_init>
    2872:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <beep_init>
    2876:	0e 94 28 07 	call	0xe50	; 0xe50 <led_init>
    287a:	0e 94 b3 04 	call	0x966	; 0x966 <input_init>
    287e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <encoder_init>
    2882:	0e 94 8a 04 	call	0x914	; 0x914 <read_handle_center>
    2886:	0e 94 75 03 	call	0x6ea	; 0x6ea <read_vcompare>
    288a:	0c 94 59 05 	jmp	0xab2	; 0xab2 <LCD_Init>
    288e:	08 95       	ret

00002890 <batteryCheck>:
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	0e 94 bd 02 	call	0x57a	; 0x57a <read_bat>
    2898:	ec 01       	movw	r28, r24
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
    28a2:	84 e6       	ldi	r24, 0x64	; 100
    28a4:	8c 9f       	mul	r24, r28
    28a6:	90 01       	movw	r18, r0
    28a8:	8d 9f       	mul	r24, r29
    28aa:	30 0d       	add	r19, r0
    28ac:	11 24       	eor	r1, r1
    28ae:	36 95       	lsr	r19
    28b0:	27 95       	ror	r18
    28b2:	a1 ea       	ldi	r26, 0xA1	; 161
    28b4:	bf eb       	ldi	r27, 0xBF	; 191
    28b6:	04 d3       	rcall	.+1544   	; 0x2ec0 <__umulhisi3>
    28b8:	88 0f       	add	r24, r24
    28ba:	89 2f       	mov	r24, r25
    28bc:	88 1f       	adc	r24, r24
    28be:	99 0b       	sbc	r25, r25
    28c0:	91 95       	neg	r25
    28c2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
    28c6:	0d c0       	rjmp	.+26     	; 0x28e2 <batteryCheck+0x52>
    28c8:	84 e1       	ldi	r24, 0x14	; 20
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    28d0:	2f ef       	ldi	r18, 0xFF	; 255
    28d2:	81 ee       	ldi	r24, 0xE1	; 225
    28d4:	94 e0       	ldi	r25, 0x04	; 4
    28d6:	21 50       	subi	r18, 0x01	; 1
    28d8:	80 40       	sbci	r24, 0x00	; 0
    28da:	90 40       	sbci	r25, 0x00	; 0
    28dc:	e1 f7       	brne	.-8      	; 0x28d6 <batteryCheck+0x46>
    28de:	00 c0       	rjmp	.+0      	; 0x28e0 <batteryCheck+0x50>
    28e0:	00 00       	nop
    28e2:	0e 94 bd 02 	call	0x57a	; 0x57a <read_bat>
    28e6:	8c 32       	cpi	r24, 0x2C	; 44
    28e8:	91 40       	sbci	r25, 0x01	; 1
    28ea:	70 f3       	brcs	.-36     	; 0x28c8 <batteryCheck+0x38>
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	08 95       	ret

000028f2 <main>:
    28f2:	b3 df       	rcall	.-154    	; 0x285a <init>
    28f4:	78 94       	sei
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	70 e0       	ldi	r23, 0x00	; 0
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	5b d0       	rcall	.+182    	; 0x29b6 <speed>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <testing_flag>
    2906:	84 e1       	ldi	r24, 0x14	; 20
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	83 e0       	ldi	r24, 0x03	; 3
    2912:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
    2916:	84 e7       	ldi	r24, 0x74	; 116
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_Puts>
    291e:	61 e0       	ldi	r22, 0x01	; 1
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
    2926:	8c e7       	ldi	r24, 0x7C	; 124
    2928:	92 e0       	ldi	r25, 0x02	; 2
    292a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_Puts>
    292e:	2f ef       	ldi	r18, 0xFF	; 255
    2930:	8d e3       	ldi	r24, 0x3D	; 61
    2932:	99 e4       	ldi	r25, 0x49	; 73
    2934:	21 50       	subi	r18, 0x01	; 1
    2936:	80 40       	sbci	r24, 0x00	; 0
    2938:	90 40       	sbci	r25, 0x00	; 0
    293a:	e1 f7       	brne	.-8      	; 0x2934 <main+0x42>
    293c:	00 c0       	rjmp	.+0      	; 0x293e <main+0x4c>
    293e:	00 00       	nop
    2940:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCD_Clr>
    2944:	a5 df       	rcall	.-182    	; 0x2890 <batteryCheck>
    2946:	72 d0       	rcall	.+228    	; 0x2a2c <test>
    2948:	65 de       	rcall	.-822    	; 0x2614 <run>
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	08 95       	ret

00002950 <speed_init>:
/*  Description: configure hardware   */
/*               for PWM (speed)      */
/*               function             */
/*====================================*/
void speed_init(){
	DIR_DDR  |=  _BV(DIR_LEFT)|_BV(DIR_RIGHT)|_BV(DIR_STEERING);
    2950:	8d b1       	in	r24, 0x0d	; 13
    2952:	84 6c       	ori	r24, 0xC4	; 196
    2954:	8d b9       	out	0x0d, r24	; 13
	PWM_DDR  |=  _BV(PWM_LEFT)|_BV(PWM_RIGHT)|_BV(PWM_STEERING);
    2956:	8d b1       	in	r24, 0x0d	; 13
    2958:	88 63       	ori	r24, 0x38	; 56
    295a:	8d b9       	out	0x0d, r24	; 13
	BRAKE_DDR  |=  _BV(BRAKE_RIGHT)|_BV(BRAKE_LEFT)|_BV(BRAKE_STEERING);
    295c:	84 b1       	in	r24, 0x04	; 4
    295e:	87 60       	ori	r24, 0x07	; 7
    2960:	84 b9       	out	0x04, r24	; 4
	BRAKE_POUT  |=  _BV(BRAKE_RIGHT)|_BV(BRAKE_LEFT)|_BV(BRAKE_STEERING);
    2962:	85 b1       	in	r24, 0x05	; 5
    2964:	87 60       	ori	r24, 0x07	; 7
    2966:	85 b9       	out	0x05, r24	; 5
	// Timer3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=(1<<COM3A1) | (0<<COM3A0) | (1<<COM3B1) | (0<<COM3B0) | (1<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (1<<WGM30);
    2968:	89 ea       	ldi	r24, 0xA9	; 169
    296a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	TCNT3H=0x00;
    2974:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
	TCNT3L=0x00;
    2978:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	ICR3H=0x00;
    297c:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
	ICR3L=0x00;
    2980:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	OCR3AH=0x00;
    2984:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
	OCR3AL=0x00;
    2988:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	OCR3BH=0x00;
    298c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
	OCR3BL=0x00;
    2990:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
	OCR3CH=0x00;
    2994:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
	OCR3CL=0x00;
    2998:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
    299c:	08 95       	ret

0000299e <set_left_dir>:
/*  Parameter: _dir                   */
/*  Description: setting direction for*/
/*             left motor             */
/*====================================*/
void set_left_dir(unsigned char _dir){
	if(_dir == FORWARD)
    299e:	81 30       	cpi	r24, 0x01	; 1
    29a0:	11 f4       	brne	.+4      	; 0x29a6 <set_left_dir+0x8>
		DIR_POUT |= _BV(DIR_LEFT);
    29a2:	72 9a       	sbi	0x0e, 2	; 14
    29a4:	08 95       	ret
	else
		DIR_POUT &= ~_BV(DIR_LEFT);
    29a6:	72 98       	cbi	0x0e, 2	; 14
    29a8:	08 95       	ret

000029aa <set_right_dir>:
/*  Parameter: _dir                   */
/*  Description: setting direction for*/
/*             right motor            */
/*====================================*/
void set_right_dir(unsigned char _dir){
	if(_dir == FORWARD)
    29aa:	81 30       	cpi	r24, 0x01	; 1
    29ac:	11 f4       	brne	.+4      	; 0x29b2 <set_right_dir+0x8>
		DIR_POUT |= _BV(DIR_RIGHT);
    29ae:	76 9a       	sbi	0x0e, 6	; 14
    29b0:	08 95       	ret
	else
		DIR_POUT &= ~_BV(DIR_RIGHT);
    29b2:	76 98       	cbi	0x0e, 6	; 14
    29b4:	08 95       	ret

000029b6 <speed>:
/*  Function name: speed              */
/*  Parameter:_left_speed,_right_speed*/
/*  Description: setting speed for    */
/*             left and right motor   */
/*====================================*/
void speed(int _right_speed , int _left_speed){
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	ec 01       	movw	r28, r24
    29c0:	8b 01       	movw	r16, r22

	if(_left_speed >= 0){
    29c2:	77 23       	and	r23, r23
    29c4:	1c f0       	brlt	.+6      	; 0x29cc <speed+0x16>
		set_left_dir(FORWARD);
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	ea df       	rcall	.-44     	; 0x299e <set_left_dir>
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <speed+0x20>
	}else{
		_left_speed = -_left_speed;
    29cc:	11 95       	neg	r17
    29ce:	01 95       	neg	r16
    29d0:	11 09       	sbc	r17, r1
		set_left_dir(BACKWARD);
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	e4 df       	rcall	.-56     	; 0x299e <set_left_dir>
	}
	if(_right_speed >= 0){
    29d6:	dd 23       	and	r29, r29
		set_right_dir(FORWARD);
    29d8:	1c f0       	brlt	.+6      	; 0x29e0 <speed+0x2a>
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	e6 df       	rcall	.-52     	; 0x29aa <set_right_dir>
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <speed+0x34>
	}else{
		_right_speed = -_right_speed;
    29e0:	d1 95       	neg	r29
    29e2:	c1 95       	neg	r28
		set_right_dir(BACKWARD);
    29e4:	d1 09       	sbc	r29, r1
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	e0 df       	rcall	.-64     	; 0x29aa <set_right_dir>
    29ea:	0f 3f       	cpi	r16, 0xFF	; 255
    29ec:	11 05       	cpc	r17, r1
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <speed+0x40>
    29f0:	14 f0       	brlt	.+4      	; 0x29f6 <speed+0x40>
    29f2:	0f ef       	ldi	r16, 0xFF	; 255
    29f4:	10 e0       	ldi	r17, 0x00	; 0
    29f6:	cf 3f       	cpi	r28, 0xFF	; 255
    29f8:	d1 05       	cpc	r29, r1
    29fa:	19 f0       	breq	.+6      	; 0x2a02 <speed+0x4c>
    29fc:	14 f0       	brlt	.+4      	; 0x2a02 <speed+0x4c>
    29fe:	cf ef       	ldi	r28, 0xFF	; 255
    2a00:	d0 e0       	ldi	r29, 0x00	; 0
	if(_left_speed < MIN_SPEED)  _left_speed = 0;
	
	if(_right_speed > MAX_SPEED)  _right_speed = MAX_SPEED;
	if(_right_speed < MIN_SPEED)  _right_speed = 0;

	LEFT_SPEED  = _left_speed;
    2a02:	11 23       	and	r17, r17
    2a04:	14 f4       	brge	.+4      	; 0x2a0a <speed+0x54>
    2a06:	00 e0       	ldi	r16, 0x00	; 0
    2a08:	10 e0       	ldi	r17, 0x00	; 0
    2a0a:	10 93 99 00 	sts	0x0099, r17	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    2a0e:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	RIGHT_SPEED = _right_speed;
    2a12:	dd 23       	and	r29, r29
    2a14:	14 f4       	brge	.+4      	; 0x2a1a <speed+0x64>
    2a16:	c0 e0       	ldi	r28, 0x00	; 0
    2a18:	d0 e0       	ldi	r29, 0x00	; 0
    2a1a:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    2a1e:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
}
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	08 95       	ret

00002a2c <test>:
/*  Description: to implement cases   */
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
			break;
			case 4://the RGB light turns blue
			RGB(0,1,1);
			LCD_Clr();
			LCD_Gotoxy(0,0);
			LCD_PutDec(sensor_value[7]);
    2a30:	cc ed       	ldi	r28, 0xDC	; 220
    2a32:	d2 e0       	ldi	r29, 0x02	; 2
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
	while(testing_flag == 1){
    2a34:	b8 c1       	rjmp	.+880    	; 0x2da6 <test+0x37a>
		switch(get_dipsw()){
    2a36:	0e 94 0a 05 	call	0xa14	; 0xa14 <get_dipsw>
    2a3a:	82 30       	cpi	r24, 0x02	; 2
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <test+0x14>
    2a3e:	91 c0       	rjmp	.+290    	; 0x2b62 <test+0x136>
    2a40:	28 f4       	brcc	.+10     	; 0x2a4c <test+0x20>
    2a42:	88 23       	and	r24, r24
    2a44:	61 f0       	breq	.+24     	; 0x2a5e <test+0x32>
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	e9 f1       	breq	.+122    	; 0x2ac4 <test+0x98>
    2a4a:	79 c1       	rjmp	.+754    	; 0x2d3e <test+0x312>
    2a4c:	84 30       	cpi	r24, 0x04	; 4
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <test+0x26>
    2a50:	f9 c0       	rjmp	.+498    	; 0x2c44 <test+0x218>
    2a52:	08 f4       	brcc	.+2      	; 0x2a56 <test+0x2a>
    2a54:	e7 c0       	rjmp	.+462    	; 0x2c24 <test+0x1f8>
    2a56:	85 30       	cpi	r24, 0x05	; 5
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <test+0x30>
    2a5a:	45 c1       	rjmp	.+650    	; 0x2ce6 <test+0x2ba>
    2a5c:	70 c1       	rjmp	.+736    	; 0x2d3e <test+0x312>
			case 0:
			RGB(1,0,0); //the RGB light turns red
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/*************line sensor calibration************/
			if (SW1){	// press SW1 to update black value
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a6e:	88 23       	and	r24, r24
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <test+0x52>
				update_black();
    2a72:	0e 94 4f 03 	call	0x69e	; 0x69e <update_black>
				beep_long(20);
    2a76:	84 e1       	ldi	r24, 0x14	; 20
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW2){	// press SW2 to update white value
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a84:	88 23       	and	r24, r24
    2a86:	31 f0       	breq	.+12     	; 0x2a94 <test+0x68>
				update_white();
    2a88:	0e 94 29 03 	call	0x652	; 0x652 <update_white>
				beep_long(100);
    2a8c:	84 e6       	ldi	r24, 0x64	; 100
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW3){	// press SW3 to save sensor value
    2a94:	82 e0       	ldi	r24, 0x02	; 2
    2a96:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2a9a:	88 23       	and	r24, r24
    2a9c:	31 f0       	breq	.+12     	; 0x2aaa <test+0x7e>
				update_vcompare();
    2a9e:	0e 94 0a 03 	call	0x614	; 0x614 <update_vcompare>
				beep_long(300);
    2aa2:	8c e2       	ldi	r24, 0x2C	; 44
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
			}
			if (SW4){	// press SW4 to save sensor value
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2ab0:	88 23       	and	r24, r24
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <test+0x8a>
    2ab4:	78 c1       	rjmp	.+752    	; 0x2da6 <test+0x37a>
				update_vcompare();
    2ab6:	0e 94 0a 03 	call	0x614	; 0x614 <update_vcompare>
				beep_long(300);
    2aba:	8c e2       	ldi	r24, 0x2C	; 44
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2ac2:	71 c1       	rjmp	.+738    	; 0x2da6 <test+0x37a>
			}
			break;
			case 1:
			RGB(0,1,0);//the RGB light turns green
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/************test DC motor***********/
			if (SW2){			// press KEY1 to run left motor  backward
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2ad4:	88 23       	and	r24, r24
    2ad6:	61 f0       	breq	.+24     	; 0x2af0 <test+0xc4>
				speed(-250,0);
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	86 e0       	ldi	r24, 0x06	; 6
    2ade:	9f ef       	ldi	r25, 0xFF	; 255
    2ae0:	6a df       	rcall	.-300    	; 0x29b6 <speed>
    2ae2:	8f e3       	ldi	r24, 0x3F	; 63
    2ae4:	9c e9       	ldi	r25, 0x9C	; 156
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <test+0xba>
    2aea:	00 c0       	rjmp	.+0      	; 0x2aec <test+0xc0>
    2aec:	00 00       	nop
    2aee:	5b c1       	rjmp	.+694    	; 0x2da6 <test+0x37a>
				_delay_ms(10);
				}else if(SW1){		// press KEY0 to run left motor forward
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2af6:	88 23       	and	r24, r24
    2af8:	61 f0       	breq	.+24     	; 0x2b12 <test+0xe6>
				speed(250,0);
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	70 e0       	ldi	r23, 0x00	; 0
    2afe:	8a ef       	ldi	r24, 0xFA	; 250
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	59 df       	rcall	.-334    	; 0x29b6 <speed>
    2b04:	8f e3       	ldi	r24, 0x3F	; 63
    2b06:	9c e9       	ldi	r25, 0x9C	; 156
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <test+0xdc>
    2b0c:	00 c0       	rjmp	.+0      	; 0x2b0e <test+0xe2>
    2b0e:	00 00       	nop
    2b10:	4a c1       	rjmp	.+660    	; 0x2da6 <test+0x37a>
				_delay_ms(10);
				}else if(SW4){		// press KEY3 to run right motor backward
    2b12:	83 e0       	ldi	r24, 0x03	; 3
    2b14:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b18:	88 23       	and	r24, r24
    2b1a:	61 f0       	breq	.+24     	; 0x2b34 <test+0x108>
				speed(0,-250);
    2b1c:	66 e0       	ldi	r22, 0x06	; 6
    2b1e:	7f ef       	ldi	r23, 0xFF	; 255
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	48 df       	rcall	.-368    	; 0x29b6 <speed>
    2b26:	8f e3       	ldi	r24, 0x3F	; 63
    2b28:	9c e9       	ldi	r25, 0x9C	; 156
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <test+0xfe>
    2b2e:	00 c0       	rjmp	.+0      	; 0x2b30 <test+0x104>
    2b30:	00 00       	nop
    2b32:	39 c1       	rjmp	.+626    	; 0x2da6 <test+0x37a>
				_delay_ms(10);
				}else if(SW3){		// press KEY2 to run right motor forward
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b3a:	88 23       	and	r24, r24
    2b3c:	61 f0       	breq	.+24     	; 0x2b56 <test+0x12a>
				speed(0, 250);
    2b3e:	6a ef       	ldi	r22, 0xFA	; 250
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	37 df       	rcall	.-402    	; 0x29b6 <speed>
    2b48:	8f e3       	ldi	r24, 0x3F	; 63
    2b4a:	9c e9       	ldi	r25, 0x9C	; 156
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <test+0x120>
    2b50:	00 c0       	rjmp	.+0      	; 0x2b52 <test+0x126>
    2b52:	00 00       	nop
    2b54:	28 c1       	rjmp	.+592    	; 0x2da6 <test+0x37a>
				_delay_ms(10);
				}else{				// stop
				speed(0,0);
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	2b df       	rcall	.-426    	; 0x29b6 <speed>
    2b60:	22 c1       	rjmp	.+580    	; 0x2da6 <test+0x37a>
			}
			
			break;
			case 2:
			RGB(0,0,1);//the RGB light turns blue
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			/************test RC servo***********/
			if (SW3){			// press SW3 to turn right
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2b72:	88 23       	and	r24, r24
    2b74:	b9 f0       	breq	.+46     	; 0x2ba4 <test+0x178>
				handle_center -= 2;
    2b76:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <handle_center>
    2b7a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <handle_center+0x1>
    2b7e:	02 97       	sbiw	r24, 0x02	; 2
    2b80:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
    2b84:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
				handle(0);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2b90:	9f ef       	ldi	r25, 0xFF	; 255
    2b92:	20 e7       	ldi	r18, 0x70	; 112
    2b94:	82 e0       	ldi	r24, 0x02	; 2
    2b96:	91 50       	subi	r25, 0x01	; 1
    2b98:	20 40       	sbci	r18, 0x00	; 0
    2b9a:	80 40       	sbci	r24, 0x00	; 0
    2b9c:	e1 f7       	brne	.-8      	; 0x2b96 <test+0x16a>
    2b9e:	00 c0       	rjmp	.+0      	; 0x2ba0 <test+0x174>
    2ba0:	00 00       	nop
    2ba2:	01 c1       	rjmp	.+514    	; 0x2da6 <test+0x37a>
				_delay_ms(50);
				}else if(SW2){	// press SW2 to turn left
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2baa:	88 23       	and	r24, r24
    2bac:	b9 f0       	breq	.+46     	; 0x2bdc <test+0x1b0>
				handle_center += 2;
    2bae:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <handle_center>
    2bb2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <handle_center+0x1>
    2bb6:	02 96       	adiw	r24, 0x02	; 2
    2bb8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <handle_center+0x1>
    2bbc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <handle_center>
				handle(0);
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2bc8:	9f ef       	ldi	r25, 0xFF	; 255
    2bca:	20 e7       	ldi	r18, 0x70	; 112
    2bcc:	82 e0       	ldi	r24, 0x02	; 2
    2bce:	91 50       	subi	r25, 0x01	; 1
    2bd0:	20 40       	sbci	r18, 0x00	; 0
    2bd2:	80 40       	sbci	r24, 0x00	; 0
    2bd4:	e1 f7       	brne	.-8      	; 0x2bce <test+0x1a2>
    2bd6:	00 c0       	rjmp	.+0      	; 0x2bd8 <test+0x1ac>
    2bd8:	00 00       	nop
    2bda:	e5 c0       	rjmp	.+458    	; 0x2da6 <test+0x37a>
				_delay_ms(50);
			}
			else if (SW1||SW4)
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2be2:	81 11       	cpse	r24, r1
    2be4:	06 c0       	rjmp	.+12     	; 0x2bf2 <test+0x1c6>
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2bec:	88 23       	and	r24, r24
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <test+0x1c6>
    2bf0:	da c0       	rjmp	.+436    	; 0x2da6 <test+0x37a>
			{
				save_handle_center();
    2bf2:	0e 94 81 04 	call	0x902	; 0x902 <save_handle_center>
    2bf6:	9f ef       	ldi	r25, 0xFF	; 255
    2bf8:	23 ed       	ldi	r18, 0xD3	; 211
    2bfa:	80 e3       	ldi	r24, 0x30	; 48
    2bfc:	91 50       	subi	r25, 0x01	; 1
    2bfe:	20 40       	sbci	r18, 0x00	; 0
    2c00:	80 40       	sbci	r24, 0x00	; 0
    2c02:	e1 f7       	brne	.-8      	; 0x2bfc <test+0x1d0>
    2c04:	00 c0       	rjmp	.+0      	; 0x2c06 <test+0x1da>
    2c06:	00 00       	nop
				_delay_ms(1000);
				beep_long(200);
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2c10:	9f ef       	ldi	r25, 0xFF	; 255
    2c12:	23 ec       	ldi	r18, 0xC3	; 195
    2c14:	89 e0       	ldi	r24, 0x09	; 9
    2c16:	91 50       	subi	r25, 0x01	; 1
    2c18:	20 40       	sbci	r18, 0x00	; 0
    2c1a:	80 40       	sbci	r24, 0x00	; 0
    2c1c:	e1 f7       	brne	.-8      	; 0x2c16 <test+0x1ea>
    2c1e:	00 c0       	rjmp	.+0      	; 0x2c20 <test+0x1f4>
    2c20:	00 00       	nop
    2c22:	c1 c0       	rjmp	.+386    	; 0x2da6 <test+0x37a>
				_delay_ms(200);
			}
			break;
			case 3://test encoder
			RGB(1,1,0);//the RGB light turns yellow
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			LCD_Gotoxy(0,0);
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(distance1);
    2c36:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <distance1>
    2c3a:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <distance1+0x1>
    2c3e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			/************test Encoder***********/
			break;
    2c42:	b1 c0       	rjmp	.+354    	; 0x2da6 <test+0x37a>
			case 4://the RGB light turns blue
			RGB(0,1,1);
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			LCD_Clr();
    2c4e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <LCD_Clr>
			LCD_Gotoxy(0,0);
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[7]);
    2c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c5e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(4,0);
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	84 e0       	ldi	r24, 0x04	; 4
    2c66:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[6]);
    2c6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c6e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(8,0);
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	88 e0       	ldi	r24, 0x08	; 8
    2c76:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[5]);
    2c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c7e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(12,0);
    2c82:	60 e0       	ldi	r22, 0x00	; 0
    2c84:	8c e0       	ldi	r24, 0x0C	; 12
    2c86:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[4]);
    2c8a:	88 85       	ldd	r24, Y+8	; 0x08
    2c8c:	99 85       	ldd	r25, Y+9	; 0x09
    2c8e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(0,1);
    2c92:	61 e0       	ldi	r22, 0x01	; 1
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[3]);
    2c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c9e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(4,1);
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	84 e0       	ldi	r24, 0x04	; 4
    2ca6:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[2]);
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	9d 81       	ldd	r25, Y+5	; 0x05
    2cae:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(8,1);
    2cb2:	61 e0       	ldi	r22, 0x01	; 1
    2cb4:	88 e0       	ldi	r24, 0x08	; 8
    2cb6:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[1]);
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbe:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
			LCD_Gotoxy(12,1);
    2cc2:	61 e0       	ldi	r22, 0x01	; 1
    2cc4:	8c e0       	ldi	r24, 0x0C	; 12
    2cc6:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_Gotoxy>
			LCD_PutDec(sensor_value[0]);
    2cca:	88 81       	ld	r24, Y
    2ccc:	99 81       	ldd	r25, Y+1	; 0x01
    2cce:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LCD_PutDec>
    2cd2:	9f ef       	ldi	r25, 0xFF	; 255
    2cd4:	21 ee       	ldi	r18, 0xE1	; 225
    2cd6:	84 e0       	ldi	r24, 0x04	; 4
    2cd8:	91 50       	subi	r25, 0x01	; 1
    2cda:	20 40       	sbci	r18, 0x00	; 0
    2cdc:	80 40       	sbci	r24, 0x00	; 0
    2cde:	e1 f7       	brne	.-8      	; 0x2cd8 <test+0x2ac>
    2ce0:	00 c0       	rjmp	.+0      	; 0x2ce2 <test+0x2b6>
    2ce2:	00 00       	nop
    2ce4:	60 c0       	rjmp	.+192    	; 0x2da6 <test+0x37a>
			_delay_ms(100);
			//RYGB(0,100,0,0);
			break;
			case 5:
			RGB(1,0,1);//the RGB light turns purple
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			if (SW3){			// press SW3 to turn right
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2cf6:	88 23       	and	r24, r24
    2cf8:	71 f0       	breq	.+28     	; 0x2d16 <test+0x2ea>
				
				handle(35);
    2cfa:	83 e2       	ldi	r24, 0x23	; 35
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2d02:	9f ef       	ldi	r25, 0xFF	; 255
    2d04:	20 e7       	ldi	r18, 0x70	; 112
    2d06:	82 e0       	ldi	r24, 0x02	; 2
    2d08:	91 50       	subi	r25, 0x01	; 1
    2d0a:	20 40       	sbci	r18, 0x00	; 0
    2d0c:	80 40       	sbci	r24, 0x00	; 0
    2d0e:	e1 f7       	brne	.-8      	; 0x2d08 <test+0x2dc>
    2d10:	00 c0       	rjmp	.+0      	; 0x2d12 <test+0x2e6>
    2d12:	00 00       	nop
    2d14:	48 c0       	rjmp	.+144    	; 0x2da6 <test+0x37a>
				_delay_ms(50);
				}else if(SW2){	// press SW2 to turn left
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d1c:	88 23       	and	r24, r24
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <test+0x2f6>
    2d20:	42 c0       	rjmp	.+132    	; 0x2da6 <test+0x37a>
				
				handle(-35);
    2d22:	8d ed       	ldi	r24, 0xDD	; 221
    2d24:	9f ef       	ldi	r25, 0xFF	; 255
    2d26:	0e 94 64 04 	call	0x8c8	; 0x8c8 <handle>
    2d2a:	9f e7       	ldi	r25, 0x7F	; 127
    2d2c:	22 e3       	ldi	r18, 0x32	; 50
    2d2e:	82 e0       	ldi	r24, 0x02	; 2
    2d30:	91 50       	subi	r25, 0x01	; 1
    2d32:	20 40       	sbci	r18, 0x00	; 0
    2d34:	80 40       	sbci	r24, 0x00	; 0
    2d36:	e1 f7       	brne	.-8      	; 0x2d30 <test+0x304>
    2d38:	00 c0       	rjmp	.+0      	; 0x2d3a <test+0x30e>
    2d3a:	00 00       	nop
    2d3c:	34 c0       	rjmp	.+104    	; 0x2da6 <test+0x37a>
				_delay_ms(45);
			}
			
			break;
			default:// go to run.c
			RGB(0,0,0);
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	0e 94 39 07 	call	0xe72	; 0xe72 <RGB>
			if (SW1)
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d4e:	88 23       	and	r24, r24
    2d50:	39 f0       	breq	.+14     	; 0x2d60 <test+0x334>
			{
				
				testing_flag = 0;
    2d52:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2d56:	88 ec       	ldi	r24, 0xC8	; 200
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2d5e:	23 c0       	rjmp	.+70     	; 0x2da6 <test+0x37a>
			}
			else if(SW4)
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d66:	88 23       	and	r24, r24
    2d68:	39 f0       	breq	.+14     	; 0x2d78 <test+0x34c>
			{
				testing_flag = 0;
    2d6a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2d6e:	88 ec       	ldi	r24, 0xC8	; 200
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2d76:	17 c0       	rjmp	.+46     	; 0x2da6 <test+0x37a>
			}
			else if (SW2)
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d7e:	88 23       	and	r24, r24
    2d80:	39 f0       	breq	.+14     	; 0x2d90 <test+0x364>
			{
				
				testing_flag = 0;
    2d82:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
    2d8e:	0b c0       	rjmp	.+22     	; 0x2da6 <test+0x37a>
			}
			else if(SW3)
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_key>
    2d96:	88 23       	and	r24, r24
    2d98:	31 f0       	breq	.+12     	; 0x2da6 <test+0x37a>
			{
				testing_flag = 0;
    2d9a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <testing_flag>
				beep_long(200);
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 9a 03 	call	0x734	; 0x734 <beep_long>
/*              to test all modules   */
/*              on the car       */
/*====================================*/

void test(){
	while(testing_flag == 1){
    2da6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <testing_flag>
    2daa:	81 30       	cpi	r24, 0x01	; 1
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <test+0x384>
    2dae:	43 ce       	rjmp	.-890    	; 0x2a36 <test+0xa>
			
			break;
			
		}
	}
}
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	08 95       	ret

00002db6 <timer_init>:
/*  Description: configure hardware   */
/*               for timer function   */
/*====================================*/
void timer_init()
{	
	cnt1 = cnt2 = cnt3 = cnt4 = 0;
    2db6:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <cnt4+0x1>
    2dba:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <cnt4>
    2dbe:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <cnt3+0x1>
    2dc2:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <cnt3>
    2dc6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <cnt2+0x1>
    2dca:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <cnt2>
    2dce:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <cnt1+0x1>
    2dd2:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <cnt1>
// Clock value: 250.000 kHz
// Mode: Normal top=0xFF
// OC0A output: Disconnected
// OC0B output: Disconnected
// Timer Period: 1 ms
TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
    2dd6:	14 bc       	out	0x24, r1	; 36
TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
    2dd8:	83 e0       	ldi	r24, 0x03	; 3
    2dda:	85 bd       	out	0x25, r24	; 37
TCNT0=0x06;
    2ddc:	86 e0       	ldi	r24, 0x06	; 6
    2dde:	86 bd       	out	0x26, r24	; 38
TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
    2de6:	08 95       	ret

00002de8 <virtual_timer>:
/*  Description: virtual timer        */
/*           virtual delay to use in  */
/*           algorithm                */ 
/*====================================*/
void virtual_timer(){
	cnt1 ++;
    2de8:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <cnt1>
    2dec:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <cnt1+0x1>
    2df0:	01 96       	adiw	r24, 0x01	; 1
    2df2:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <cnt1+0x1>
    2df6:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <cnt1>
	cnt2 ++;
    2dfa:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <cnt2>
    2dfe:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <cnt2+0x1>
    2e02:	01 96       	adiw	r24, 0x01	; 1
    2e04:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <cnt2+0x1>
    2e08:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <cnt2>
	cnt4 ++;
    2e0c:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <cnt4>
    2e10:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <cnt4+0x1>
    2e14:	01 96       	adiw	r24, 0x01	; 1
    2e16:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <cnt4+0x1>
    2e1a:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <cnt4>
	if (curveFlag == 0)
    2e1e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <curveFlag>
    2e22:	81 11       	cpse	r24, r1
    2e24:	0a c0       	rjmp	.+20     	; 0x2e3a <virtual_timer+0x52>
	{
		cnt3++;
    2e26:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <cnt3>
    2e2a:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <cnt3+0x1>
    2e2e:	01 96       	adiw	r24, 0x01	; 1
    2e30:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <cnt3+0x1>
    2e34:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <cnt3>
    2e38:	15 c0       	rjmp	.+42     	; 0x2e64 <virtual_timer+0x7c>
	}
	else if (curveFlag == 1)		
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	99 f4       	brne	.+38     	; 0x2e64 <virtual_timer+0x7c>
	{
		cnt3 = 0;
    2e3e:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <cnt3+0x1>
    2e42:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <cnt3>
		brakeCurve--;	
    2e46:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <brakeCurve>
    2e4a:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <brakeCurve+0x1>
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
		if (brakeCurve < 10)
    2e50:	8a 30       	cpi	r24, 0x0A	; 10
    2e52:	91 05       	cpc	r25, r1
    2e54:	a8 f4       	brcc	.+42     	; 0x2e80 <virtual_timer+0x98>
		{
			brakeCurve = 10;
    2e56:	8a e0       	ldi	r24, 0x0A	; 10
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <brakeCurve+0x1>
    2e5e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <brakeCurve>
    2e62:	08 95       	ret
		}	
	}
	if (cnt3 > 300)
    2e64:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <cnt3>
    2e68:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <cnt3+0x1>
    2e6c:	8d 32       	cpi	r24, 0x2D	; 45
    2e6e:	91 40       	sbci	r25, 0x01	; 1
    2e70:	58 f0       	brcs	.+22     	; 0x2e88 <virtual_timer+0xa0>
	{
		brakeCurve = 81;
    2e72:	81 e5       	ldi	r24, 0x51	; 81
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <brakeCurve+0x1>
    2e7a:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <brakeCurve>
// 	{
// 		velocity = distance2;
// 		cnt3 = 0;
// 		distance2 =  0;
// 	}
}
    2e7e:	08 95       	ret
		cnt3++;
	}
	else if (curveFlag == 1)		
	{
		cnt3 = 0;
		brakeCurve--;	
    2e80:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <brakeCurve+0x1>
    2e84:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <brakeCurve>
    2e88:	08 95       	ret

00002e8a <__divmodhi4>:
    2e8a:	97 fb       	bst	r25, 7
    2e8c:	07 2e       	mov	r0, r23
    2e8e:	16 f4       	brtc	.+4      	; 0x2e94 <__divmodhi4+0xa>
    2e90:	00 94       	com	r0
    2e92:	06 d0       	rcall	.+12     	; 0x2ea0 <__divmodhi4_neg1>
    2e94:	77 fd       	sbrc	r23, 7
    2e96:	08 d0       	rcall	.+16     	; 0x2ea8 <__divmodhi4_neg2>
    2e98:	22 d0       	rcall	.+68     	; 0x2ede <__udivmodhi4>
    2e9a:	07 fc       	sbrc	r0, 7
    2e9c:	05 d0       	rcall	.+10     	; 0x2ea8 <__divmodhi4_neg2>
    2e9e:	3e f4       	brtc	.+14     	; 0x2eae <__divmodhi4_exit>

00002ea0 <__divmodhi4_neg1>:
    2ea0:	90 95       	com	r25
    2ea2:	81 95       	neg	r24
    2ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea6:	08 95       	ret

00002ea8 <__divmodhi4_neg2>:
    2ea8:	70 95       	com	r23
    2eaa:	61 95       	neg	r22
    2eac:	7f 4f       	sbci	r23, 0xFF	; 255

00002eae <__divmodhi4_exit>:
    2eae:	08 95       	ret

00002eb0 <__tablejump2__>:
    2eb0:	ee 0f       	add	r30, r30
    2eb2:	ff 1f       	adc	r31, r31
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	8b bf       	out	0x3b, r24	; 59
    2eb8:	07 90       	elpm	r0, Z+
    2eba:	f6 91       	elpm	r31, Z
    2ebc:	e0 2d       	mov	r30, r0
    2ebe:	19 94       	eijmp

00002ec0 <__umulhisi3>:
    2ec0:	a2 9f       	mul	r26, r18
    2ec2:	b0 01       	movw	r22, r0
    2ec4:	b3 9f       	mul	r27, r19
    2ec6:	c0 01       	movw	r24, r0
    2ec8:	a3 9f       	mul	r26, r19
    2eca:	70 0d       	add	r23, r0
    2ecc:	81 1d       	adc	r24, r1
    2ece:	11 24       	eor	r1, r1
    2ed0:	91 1d       	adc	r25, r1
    2ed2:	b2 9f       	mul	r27, r18
    2ed4:	70 0d       	add	r23, r0
    2ed6:	81 1d       	adc	r24, r1
    2ed8:	11 24       	eor	r1, r1
    2eda:	91 1d       	adc	r25, r1
    2edc:	08 95       	ret

00002ede <__udivmodhi4>:
    2ede:	aa 1b       	sub	r26, r26
    2ee0:	bb 1b       	sub	r27, r27
    2ee2:	51 e1       	ldi	r21, 0x11	; 17
    2ee4:	07 c0       	rjmp	.+14     	; 0x2ef4 <__udivmodhi4_ep>

00002ee6 <__udivmodhi4_loop>:
    2ee6:	aa 1f       	adc	r26, r26
    2ee8:	bb 1f       	adc	r27, r27
    2eea:	a6 17       	cp	r26, r22
    2eec:	b7 07       	cpc	r27, r23
    2eee:	10 f0       	brcs	.+4      	; 0x2ef4 <__udivmodhi4_ep>
    2ef0:	a6 1b       	sub	r26, r22
    2ef2:	b7 0b       	sbc	r27, r23

00002ef4 <__udivmodhi4_ep>:
    2ef4:	88 1f       	adc	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	5a 95       	dec	r21
    2efa:	a9 f7       	brne	.-22     	; 0x2ee6 <__udivmodhi4_loop>
    2efc:	80 95       	com	r24
    2efe:	90 95       	com	r25
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	08 95       	ret

00002f06 <malloc>:
    2f06:	0f 93       	push	r16
    2f08:	1f 93       	push	r17
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	82 30       	cpi	r24, 0x02	; 2
    2f10:	91 05       	cpc	r25, r1
    2f12:	10 f4       	brcc	.+4      	; 0x2f18 <malloc+0x12>
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <__flp>
    2f1c:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <__flp+0x1>
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	a0 e0       	ldi	r26, 0x00	; 0
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	30 97       	sbiw	r30, 0x00	; 0
    2f2a:	19 f1       	breq	.+70     	; 0x2f72 <malloc+0x6c>
    2f2c:	40 81       	ld	r20, Z
    2f2e:	51 81       	ldd	r21, Z+1	; 0x01
    2f30:	02 81       	ldd	r16, Z+2	; 0x02
    2f32:	13 81       	ldd	r17, Z+3	; 0x03
    2f34:	48 17       	cp	r20, r24
    2f36:	59 07       	cpc	r21, r25
    2f38:	c8 f0       	brcs	.+50     	; 0x2f6c <malloc+0x66>
    2f3a:	84 17       	cp	r24, r20
    2f3c:	95 07       	cpc	r25, r21
    2f3e:	69 f4       	brne	.+26     	; 0x2f5a <malloc+0x54>
    2f40:	10 97       	sbiw	r26, 0x00	; 0
    2f42:	31 f0       	breq	.+12     	; 0x2f50 <malloc+0x4a>
    2f44:	12 96       	adiw	r26, 0x02	; 2
    2f46:	0c 93       	st	X, r16
    2f48:	12 97       	sbiw	r26, 0x02	; 2
    2f4a:	13 96       	adiw	r26, 0x03	; 3
    2f4c:	1c 93       	st	X, r17
    2f4e:	27 c0       	rjmp	.+78     	; 0x2f9e <malloc+0x98>
    2f50:	00 93 53 03 	sts	0x0353, r16	; 0x800353 <__flp>
    2f54:	10 93 54 03 	sts	0x0354, r17	; 0x800354 <__flp+0x1>
    2f58:	22 c0       	rjmp	.+68     	; 0x2f9e <malloc+0x98>
    2f5a:	21 15       	cp	r18, r1
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	19 f0       	breq	.+6      	; 0x2f66 <malloc+0x60>
    2f60:	42 17       	cp	r20, r18
    2f62:	53 07       	cpc	r21, r19
    2f64:	18 f4       	brcc	.+6      	; 0x2f6c <malloc+0x66>
    2f66:	9a 01       	movw	r18, r20
    2f68:	bd 01       	movw	r22, r26
    2f6a:	ef 01       	movw	r28, r30
    2f6c:	df 01       	movw	r26, r30
    2f6e:	f8 01       	movw	r30, r16
    2f70:	db cf       	rjmp	.-74     	; 0x2f28 <malloc+0x22>
    2f72:	21 15       	cp	r18, r1
    2f74:	31 05       	cpc	r19, r1
    2f76:	f9 f0       	breq	.+62     	; 0x2fb6 <malloc+0xb0>
    2f78:	28 1b       	sub	r18, r24
    2f7a:	39 0b       	sbc	r19, r25
    2f7c:	24 30       	cpi	r18, 0x04	; 4
    2f7e:	31 05       	cpc	r19, r1
    2f80:	80 f4       	brcc	.+32     	; 0x2fa2 <malloc+0x9c>
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	61 15       	cp	r22, r1
    2f88:	71 05       	cpc	r23, r1
    2f8a:	21 f0       	breq	.+8      	; 0x2f94 <malloc+0x8e>
    2f8c:	fb 01       	movw	r30, r22
    2f8e:	93 83       	std	Z+3, r25	; 0x03
    2f90:	82 83       	std	Z+2, r24	; 0x02
    2f92:	04 c0       	rjmp	.+8      	; 0x2f9c <malloc+0x96>
    2f94:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <__flp+0x1>
    2f98:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <__flp>
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	32 96       	adiw	r30, 0x02	; 2
    2fa0:	44 c0       	rjmp	.+136    	; 0x302a <malloc+0x124>
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e2 0f       	add	r30, r18
    2fa6:	f3 1f       	adc	r31, r19
    2fa8:	81 93       	st	Z+, r24
    2faa:	91 93       	st	Z+, r25
    2fac:	22 50       	subi	r18, 0x02	; 2
    2fae:	31 09       	sbc	r19, r1
    2fb0:	39 83       	std	Y+1, r19	; 0x01
    2fb2:	28 83       	st	Y, r18
    2fb4:	3a c0       	rjmp	.+116    	; 0x302a <malloc+0x124>
    2fb6:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <__brkval>
    2fba:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <__brkval+0x1>
    2fbe:	23 2b       	or	r18, r19
    2fc0:	41 f4       	brne	.+16     	; 0x2fd2 <malloc+0xcc>
    2fc2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2fc6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2fca:	30 93 52 03 	sts	0x0352, r19	; 0x800352 <__brkval+0x1>
    2fce:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <__brkval>
    2fd2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2fd6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2fda:	21 15       	cp	r18, r1
    2fdc:	31 05       	cpc	r19, r1
    2fde:	41 f4       	brne	.+16     	; 0x2ff0 <malloc+0xea>
    2fe0:	2d b7       	in	r18, 0x3d	; 61
    2fe2:	3e b7       	in	r19, 0x3e	; 62
    2fe4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2fe8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2fec:	24 1b       	sub	r18, r20
    2fee:	35 0b       	sbc	r19, r21
    2ff0:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <__brkval>
    2ff4:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <__brkval+0x1>
    2ff8:	e2 17       	cp	r30, r18
    2ffa:	f3 07       	cpc	r31, r19
    2ffc:	a0 f4       	brcc	.+40     	; 0x3026 <malloc+0x120>
    2ffe:	2e 1b       	sub	r18, r30
    3000:	3f 0b       	sbc	r19, r31
    3002:	28 17       	cp	r18, r24
    3004:	39 07       	cpc	r19, r25
    3006:	78 f0       	brcs	.+30     	; 0x3026 <malloc+0x120>
    3008:	ac 01       	movw	r20, r24
    300a:	4e 5f       	subi	r20, 0xFE	; 254
    300c:	5f 4f       	sbci	r21, 0xFF	; 255
    300e:	24 17       	cp	r18, r20
    3010:	35 07       	cpc	r19, r21
    3012:	48 f0       	brcs	.+18     	; 0x3026 <malloc+0x120>
    3014:	4e 0f       	add	r20, r30
    3016:	5f 1f       	adc	r21, r31
    3018:	50 93 52 03 	sts	0x0352, r21	; 0x800352 <__brkval+0x1>
    301c:	40 93 51 03 	sts	0x0351, r20	; 0x800351 <__brkval>
    3020:	81 93       	st	Z+, r24
    3022:	91 93       	st	Z+, r25
    3024:	02 c0       	rjmp	.+4      	; 0x302a <malloc+0x124>
    3026:	e0 e0       	ldi	r30, 0x00	; 0
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	cf 01       	movw	r24, r30
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	08 95       	ret

00003036 <free>:
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	09 f4       	brne	.+2      	; 0x3040 <free+0xa>
    303e:	81 c0       	rjmp	.+258    	; 0x3142 <free+0x10c>
    3040:	fc 01       	movw	r30, r24
    3042:	32 97       	sbiw	r30, 0x02	; 2
    3044:	13 82       	std	Z+3, r1	; 0x03
    3046:	12 82       	std	Z+2, r1	; 0x02
    3048:	a0 91 53 03 	lds	r26, 0x0353	; 0x800353 <__flp>
    304c:	b0 91 54 03 	lds	r27, 0x0354	; 0x800354 <__flp+0x1>
    3050:	10 97       	sbiw	r26, 0x00	; 0
    3052:	81 f4       	brne	.+32     	; 0x3074 <free+0x3e>
    3054:	20 81       	ld	r18, Z
    3056:	31 81       	ldd	r19, Z+1	; 0x01
    3058:	82 0f       	add	r24, r18
    305a:	93 1f       	adc	r25, r19
    305c:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <__brkval>
    3060:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <__brkval+0x1>
    3064:	28 17       	cp	r18, r24
    3066:	39 07       	cpc	r19, r25
    3068:	51 f5       	brne	.+84     	; 0x30be <free+0x88>
    306a:	f0 93 52 03 	sts	0x0352, r31	; 0x800352 <__brkval+0x1>
    306e:	e0 93 51 03 	sts	0x0351, r30	; 0x800351 <__brkval>
    3072:	67 c0       	rjmp	.+206    	; 0x3142 <free+0x10c>
    3074:	ed 01       	movw	r28, r26
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	ce 17       	cp	r28, r30
    307c:	df 07       	cpc	r29, r31
    307e:	40 f4       	brcc	.+16     	; 0x3090 <free+0x5a>
    3080:	4a 81       	ldd	r20, Y+2	; 0x02
    3082:	5b 81       	ldd	r21, Y+3	; 0x03
    3084:	9e 01       	movw	r18, r28
    3086:	41 15       	cp	r20, r1
    3088:	51 05       	cpc	r21, r1
    308a:	f1 f0       	breq	.+60     	; 0x30c8 <free+0x92>
    308c:	ea 01       	movw	r28, r20
    308e:	f5 cf       	rjmp	.-22     	; 0x307a <free+0x44>
    3090:	d3 83       	std	Z+3, r29	; 0x03
    3092:	c2 83       	std	Z+2, r28	; 0x02
    3094:	40 81       	ld	r20, Z
    3096:	51 81       	ldd	r21, Z+1	; 0x01
    3098:	84 0f       	add	r24, r20
    309a:	95 1f       	adc	r25, r21
    309c:	c8 17       	cp	r28, r24
    309e:	d9 07       	cpc	r29, r25
    30a0:	59 f4       	brne	.+22     	; 0x30b8 <free+0x82>
    30a2:	88 81       	ld	r24, Y
    30a4:	99 81       	ldd	r25, Y+1	; 0x01
    30a6:	84 0f       	add	r24, r20
    30a8:	95 1f       	adc	r25, r21
    30aa:	02 96       	adiw	r24, 0x02	; 2
    30ac:	91 83       	std	Z+1, r25	; 0x01
    30ae:	80 83       	st	Z, r24
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	93 83       	std	Z+3, r25	; 0x03
    30b6:	82 83       	std	Z+2, r24	; 0x02
    30b8:	21 15       	cp	r18, r1
    30ba:	31 05       	cpc	r19, r1
    30bc:	29 f4       	brne	.+10     	; 0x30c8 <free+0x92>
    30be:	f0 93 54 03 	sts	0x0354, r31	; 0x800354 <__flp+0x1>
    30c2:	e0 93 53 03 	sts	0x0353, r30	; 0x800353 <__flp>
    30c6:	3d c0       	rjmp	.+122    	; 0x3142 <free+0x10c>
    30c8:	e9 01       	movw	r28, r18
    30ca:	fb 83       	std	Y+3, r31	; 0x03
    30cc:	ea 83       	std	Y+2, r30	; 0x02
    30ce:	49 91       	ld	r20, Y+
    30d0:	59 91       	ld	r21, Y+
    30d2:	c4 0f       	add	r28, r20
    30d4:	d5 1f       	adc	r29, r21
    30d6:	ec 17       	cp	r30, r28
    30d8:	fd 07       	cpc	r31, r29
    30da:	61 f4       	brne	.+24     	; 0x30f4 <free+0xbe>
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	84 0f       	add	r24, r20
    30e2:	95 1f       	adc	r25, r21
    30e4:	02 96       	adiw	r24, 0x02	; 2
    30e6:	e9 01       	movw	r28, r18
    30e8:	99 83       	std	Y+1, r25	; 0x01
    30ea:	88 83       	st	Y, r24
    30ec:	82 81       	ldd	r24, Z+2	; 0x02
    30ee:	93 81       	ldd	r25, Z+3	; 0x03
    30f0:	9b 83       	std	Y+3, r25	; 0x03
    30f2:	8a 83       	std	Y+2, r24	; 0x02
    30f4:	e0 e0       	ldi	r30, 0x00	; 0
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	12 96       	adiw	r26, 0x02	; 2
    30fa:	8d 91       	ld	r24, X+
    30fc:	9c 91       	ld	r25, X
    30fe:	13 97       	sbiw	r26, 0x03	; 3
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	19 f0       	breq	.+6      	; 0x310a <free+0xd4>
    3104:	fd 01       	movw	r30, r26
    3106:	dc 01       	movw	r26, r24
    3108:	f7 cf       	rjmp	.-18     	; 0x30f8 <free+0xc2>
    310a:	8d 91       	ld	r24, X+
    310c:	9c 91       	ld	r25, X
    310e:	11 97       	sbiw	r26, 0x01	; 1
    3110:	9d 01       	movw	r18, r26
    3112:	2e 5f       	subi	r18, 0xFE	; 254
    3114:	3f 4f       	sbci	r19, 0xFF	; 255
    3116:	82 0f       	add	r24, r18
    3118:	93 1f       	adc	r25, r19
    311a:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <__brkval>
    311e:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <__brkval+0x1>
    3122:	28 17       	cp	r18, r24
    3124:	39 07       	cpc	r19, r25
    3126:	69 f4       	brne	.+26     	; 0x3142 <free+0x10c>
    3128:	30 97       	sbiw	r30, 0x00	; 0
    312a:	29 f4       	brne	.+10     	; 0x3136 <free+0x100>
    312c:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <__flp+0x1>
    3130:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <__flp>
    3134:	02 c0       	rjmp	.+4      	; 0x313a <free+0x104>
    3136:	13 82       	std	Z+3, r1	; 0x03
    3138:	12 82       	std	Z+2, r1	; 0x02
    313a:	b0 93 52 03 	sts	0x0352, r27	; 0x800352 <__brkval+0x1>
    313e:	a0 93 51 03 	sts	0x0351, r26	; 0x800351 <__brkval>
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	08 95       	ret

00003148 <_exit>:
    3148:	f8 94       	cli

0000314a <__stop_program>:
    314a:	ff cf       	rjmp	.-2      	; 0x314a <__stop_program>
